(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["gitNote"],{"10f9":function(t,n,e){"use strict";e("d1ff")},"470d":function(t,n,e){"use strict";e.r(n);var i=e("7a23");function g(t,n,e,g,o,r){var a=Object(i["y"])("Loading");return Object(i["r"])(),Object(i["d"])(i["a"],null,[g.displayLoading?(Object(i["r"])(),Object(i["d"])(a,{key:0,class:{"content--hide":!g.showLoading,"content--show":g.showLoading}},null,8,["class"])):Object(i["e"])("",!0),g.displayContent?(Object(i["r"])(),Object(i["d"])("div",{key:1,class:{"markdown-content":!0,"content--hide":!g.showContent,"content--show":g.showContent}},[Object(i["h"])("div",{class:"markdown-body",innerHTML:g.htmlContent},null,8,["innerHTML"])],2)):Object(i["e"])("",!0)],64)}var o=e("1da1"),r=(e("96cf"),e("d4cd")),a=e.n(r),s=e("1487"),c=e.n(s),h=e("3a5e"),u='## git 使用指令\n<a id="user-content-top"></a>\n\n### 目錄\n<details open>\n<summary style="cursor: pointer;">&nbsp;目錄清單 </summary>\n\n- [基本使用](#user-content-basic)\n- [開始專案](#user-content-start)\n- [上傳常用指令](#user-content-update)\n- [合併分支(含遠端)](#user-content-merge)\n- [gitignore](#user-content-gitignore)\n- [git branch 常用指令](#user-content-branch)\n- [git remote 常用指令](#user-content-remote)\n- [git tag (git 標籤)](#user-content-tag)\n- [git stash (git 暫存)](#user-content-stash)\n- [其他使用指令](#user-content-other)\n\n</details>\n\n<hr id="user-content-basic" style="height: 2px;">\n\n### <a href="#user-content-top" >基本使用</a>\n- [git 安裝](https://git-scm.com/downloads)\n- 設定 git 使用者\n  - 設定名字 : git config --global user.name "名字"\n  - 設定信箱 : git config --global user.email "信箱"\n- 查看git設定\n  - git config --global user.name\n  - git config --global user.email\n\n<hr id="user-content-start" style="height: 2px;">\n\n### <a href="#user-content-top" >開始專案</a>\n  - 無原始檔案\n    - 初始化 git: git init\n    - 新增遠端位置: git remote add [名稱(origin)] [網址]\n      - 網址可透過 github 開新專案後取得\n    - 將新增內容全部加入: git add .\n    - 進行初始化 commit: git commit -m init\n    - 上傳遠端: git push origin master\n  - 若有原始專案\n    - 第一種方式: git init -> git remote add [名稱(origin)] [網址] -> git pull [名稱(origin)] [分支] \n    - 第二種方式: git clone [網址]\n      - 複製他人專案分支 : git clone [網址] [分支名稱]\n      - 若要觀看遠端分支資料: git checkout [遠端分支名稱(可由 git branch -r 觀看)]\n        - ex: git checkout origin/experimental\n      - 取得遠端分支資料(本地會多一個新分支): git checkout [遠端分支名稱]\n        - ex: git checkout experimental\n      - 複製單一分支: git clone --single-branch --branch [分支名稱] [遠端位置]\n        - git clone -b [分支名稱] [遠端位置]\n      - 更新遠端所有分支: git remote update origin --prune\n      - 取得遠端資訊(若取得不到) : git fetch origin  \n    \n<hr id="user-content-update" style="height: 2px;">\n\n### <a href="#user-content-top" >上傳常用指令</a>\n  - 查看目前狀態: git status\n    - 若對單一檔案想還原到上個commit狀態: git checkout 檔案名\n    - 全部還原到上一版狀態: git reset --hard\n  - 加入全部到索引: git add .\n  - 加入單一檔案進索引: git add 檔案名\n    - 若要取消全部索引狀態: git reset HEAD 或 git reset\n    - 取消單筆: git reset HEAD 檔案名 或 git reset 檔案名\n  - git commit -m (版本訊息)\n    - 若想修改剛剛"最新"的 commit message: git commit --amend -m 想修改的訊息\n  - git push (遠端位置或名稱(origin)) (分支名稱)\n  \n<hr id="user-content-merge" style="height: 2px;">\n\n### <a href="#user-content-top" >合併分支(含遠端)</a>\n  - 先切換到主分支: git checkout [主要分支]\n  - 多人合作時需先更新主要分支: git pull origin [主要分支]\n  - 將分支合併到主分支: git merge [分支]\n  - 將主分支資訊上傳至遠端: git push origin [主要分支]\n  - 刪除遠端分支: \n    - 先刪除本地分支: git branch -d [分支]\n    - 將刪除分支資訊上傳到遠端: git push origin :[分支]\n  - 若合併碰到錯誤情況\n    - 到該檔案進行編修\n    - 加入修改: git add . \n    - 確認修改: git commit \'merge哪些東西\'\n    - 合併專案: git merge [分支]\n    - 上傳更新: git push origin [主要分支]\n    \n<hr id="user-content-gitignore" style="height: 2px;">\n\n### <a href="#user-content-top" >gitignore</a>\n  - 直接使用記事本新增即可(utf-8編碼存取)\n    - 或使用終端機創建: touch .gitignore\n  - 可以觀看個程式語言需要忽略的檔案: [gitignore](https://github.com/github/gitignore)\n  - 忽略整個資料夾: 資料夾名/\n  - 忽略類似附檔名檔案: *.副檔名\n  - 若忽略發生錯誤使用指令矯正:\n  ```txt\n  git rm -r --cached .\n  git add .\n  git commit -m "fixed untracked files"\n  ```\n\n<hr id="user-content-branch" style="height: 2px;">\n\n### <a href="#user-content-top" >git branch 常用指令</a>\n  - 查看所有遠端分支: git branch -r\n    - 結束: q\n  - 查看所有分支: git branch -a\n    - 結束: q\n  - 查看本地所有分支與所在分支: git branch\n  - 刪除分支: git branch -d [分支名稱]\n  - 新增 [新分支] 於 [主分支] 底下 : git branch [新分支] [主分支]\n    - 主分支可加可不加，但需在主分支底下 \n\n<hr id="user-content-remote" style="height: 2px;">\n\n### <a href="#user-content-top" >git remote 常用指令</a>\n  - 重設遠端分支網址: git remote set-url [遠端位置名稱] [url]\n  - 改變遠端位置名稱: git remote rename [原名稱] [修改名稱]\n  - 查看有哪些遠端位置(使用 git clone 附有 origin): git remote -v\n  - 新增遠端位置: git remote add [名稱(origin)] [網址]\n  - 本地更新遠端所有資訊與分支: git remote update origin --prune\n\n<hr id="user-content-tag" style="height: 2px;">\n\n### <a href="#user-content-top" >git tag (git 標籤)</a>\n  - 在此版本新增標籤: git tag 標籤名稱(git tag v1)\n  - 新增詳細標籤: git tag -am \'敘述\' 標籤名稱(git tag \'update xxxx\' v1)\n  - 切換到此標籤版本: git checkout v1(標籤名稱)\n  - 查看所有標籤: git tag\n  - 查看所有詳細標籤內容: git tag -n\n    - 若沒有設定標籤內容則會自帶當初此版本commit敘述內容\n  - 刪除標籤: git tag -d v1(標籤名稱)\n\n<hr id="user-content-stash" style="height: 2px;">\n\n### <a href="#user-content-top" >git stash (git 暫存)</a>\n  - 暫存當前版本進度: git stash\n    - (Untracked 狀態的檔案預設沒辦法被 Stash，需額外使用 -u)\n    - 使用完會恢復到未更改的版本(git status 會發現 nothing to commit)\n  - 還原最新的暫存(最新暫存會刪除): git stash pop\n    - 還原指定版本暫存: git stash pop stash@{2}\n  - 不刪除暫存並套用分支上: git stash apply stash@{2} or git stash apply\n  - 清除最新的暫存: git stash drop\n    - 刪除指定暫存: git stash drop stash@{0}\n  - 清除全部暫存: git stash clear\n  - 查看目前所有暫存: git stash list\n\n<hr id="user-content-other" style="height: 2px;">\n\n### <a href="#user-content-top" >其他使用指令</a>\n  - 切換至該版本紀錄\n    - git checkout (commit前4碼，可由git log觀看)\n    - 復原則直接切換到該分支即可\n  - 救回不小心刪除的檔案\n    - git checkout xxx.txt: 將 xxx.txt 的檔案回復到上一次的Commit的狀態\n    - git checkout HEAD~2 xxx.txt:將回復到兩個版本以前的 xxx.txt\n    - git checkout . :將檔案回復到上一次Commit的狀態\n  - git blame index.html:查看該檔案修改的所有紀錄\n  - git reflog:查看移動HEAD移動歷程(狀態每當你的HEAD有移動~他就會在這邊記上一筆)\n',d=Object(i["w"])(!0),m=Object(i["w"])(!1),l=Object(i["w"])(!0),p=Object(i["w"])(!1),b=Object(i["w"])(""),f={name:"GitNote",components:{Loading:h["a"]},setup:function(){return Object(i["p"])(Object(o["a"])(regeneratorRuntime.mark((function t(){var n,e;return regeneratorRuntime.wrap((function(t){while(1)switch(t.prev=t.next){case 0:d.value&&(n=a()({html:!0,linkify:!0,typographer:!0,highlight:function(t,n){return c.a.highlight(t,{language:n}).value}}),e=n.render("".concat(u)),b.value=e,setTimeout((function(){d.value=!1,setTimeout((function(){l.value=!1,p.value=!0,setTimeout((function(){m.value=!0}),100)}),500)}),1e3));case 1:case"end":return t.stop()}}),t)})))),{showLoading:d,showContent:m,displayLoading:l,displayContent:p,htmlContent:b}}};e("10f9");f.render=g;n["default"]=f},d1ff:function(t,n,e){}}]);
//# sourceMappingURL=gitNote.e9fc42a9.js.map