{"version":3,"sources":["webpack:///./src/views/JSNote.vue?2a36","webpack:///./src/views/JSNote.vue","webpack:///./src/assets/md/JS.md","webpack:///./src/views/JSNote.vue?474d"],"names":["displayLoading","class","displayContent","htmlContent","showLoading","showContent","name","components","Loading","setup","value","mdConfig","html","linkify","typographer","highlight","str","lang","language","use","result","render","setTimeout"],"mappings":"mIAAA,W,yICCA,4BAKU,EAAAA,gB,iBALV,eAMI,GANJ,MACKC,MAAK,C,iBAA6B,c,gBAAqC,gB,mBAD5E,sBAaU,EAAAC,gB,iBANR,eASM,OAhBR,MAQKD,MAAK,C,uCAA8D,c,gBAAqC,gB,CAOzG,eAAsD,OAAjDA,MAAM,gBAAgB,UAAQ,EAAAE,a,2BAfvC,uB,kGCDe,83lGD4BXC,EAAc,gBAAI,GAClBC,EAAc,gBAAI,GAClBL,EAAiB,gBAAI,GACrBE,EAAiB,gBAAI,GACnBC,EAAc,eAAI,IAET,GACbG,KAAM,SACNC,WAAY,CAAEC,UAAA,MACdC,MAHa,WAiCX,OA7BA,eAAS,wCAAC,sGACJL,EAAYM,QACRC,EAAW,IAAG,CAClBC,MAAM,EACNC,SAAS,EACTC,aAAa,EAEbC,UALkB,SAKPC,EAAKC,GACd,OAAO,IAAKF,UAAUC,EAAK,CAACE,SAAUD,IAAOP,SAE9CS,IAAI,QACDC,EAAST,EAASU,OAAT,UAAmB,IAClClB,EAAYO,MAAQU,EAEpBE,YAAW,WAETlB,EAAYM,OAAQ,EACpBY,YAAW,WAETtB,EAAeU,OAAQ,EACvBR,EAAeQ,OAAQ,EACvBY,YAAW,WAETjB,EAAYK,OAAQ,IACnB,OACF,OACF,MA1BG,4CA6BH,CACLN,cACAC,cACAL,iBACAE,iBACAC,iB,UEnEN,EAAOkB,OAASA,EAED","file":"js/jsNote.9c88ceae.js","sourcesContent":["export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./JSNote.vue?vue&type=style&index=0&id=2df14b8a&lang=scss\"","<template>\r\n  <Loading\r\n    :class=\"{\r\n      'content--hide': !showLoading,\r\n      'content--show': showLoading,\r\n    }\"\r\n    v-if=\"displayLoading\"\r\n  />\r\n  <div\r\n    :class=\"{\r\n      'markdown-content': true,\r\n      'content--hide': !showContent,\r\n      'content--show': showContent,\r\n    }\"\r\n    v-if=\"displayContent\"\r\n  >\r\n    <div class=\"markdown-body\" v-html=\"htmlContent\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from \"vue\";\r\nimport md from \"markdown-it\";\r\nimport md_copy from \"../utils/mdCopy\";\r\nimport hljs from \"highlight.js\";\r\nimport Loading from \"../components/Loading\";\r\nimport data from \"!raw-loader!../assets/md/JS.md\";\r\n\r\nlet showLoading = ref(true);\r\nlet showContent = ref(false);\r\nlet displayLoading = ref(true);\r\nlet displayContent = ref(false);\r\nconst htmlContent = ref(\"\");\r\n\r\nexport default {\r\n  name: \"JSNote\",\r\n  components: { Loading },\r\n  setup() {\r\n    onMounted(async () => {\r\n      if (showLoading.value) {\r\n        const mdConfig = md({\r\n          html: true,\r\n          linkify: true,\r\n          typographer: true,\r\n          // 針對特定語言顯示文字突出效果\r\n          highlight (str, lang) {\r\n            return hljs.highlight(str, {language: lang}).value;\r\n          },\r\n        }).use(md_copy);\r\n        const result = mdConfig.render(`${data}`);\r\n        htmlContent.value = result;\r\n\r\n        setTimeout(() => {\r\n          // 等待 v-if 效果\r\n          showLoading.value = false;\r\n          setTimeout(() => {\r\n            // 等待loading動畫結束\r\n            displayLoading.value = false;\r\n            displayContent.value = true;\r\n            setTimeout(() => {\r\n              // 等待 v-if 效果\r\n              showContent.value = true;\r\n            }, 100);\r\n          }, 500);\r\n        }, 1000);\r\n      }\r\n    });\r\n    return {\r\n      showLoading,\r\n      showContent,\r\n      displayLoading,\r\n      displayContent,\r\n      htmlContent,\r\n    };\r\n  },\r\n};\r\n</script>\r\n<style lang=\"scss\">\r\n@import \"../style/md.scss\";\r\n.content--hide {\r\n  opacity: 0;\r\n}\r\n\r\n.content--show {\r\n  opacity: 1;\r\n}\r\n</style>\r\n","export default \"## JS 筆記\\n<a id=\\\"user-content-top\\\"></a>\\n\\n### 目錄\\n<details>\\n<summary style=\\\"cursor: pointer;\\\">&nbsp;語法與表達式 </summary>\\n\\n- [變量與數據類型](#user-content-variable-datatype)\\n  - [變量](#user-content-variable-datatype)\\n  - [輸出語句](#user-content-output-statement)\\n  - [ECMAScript & JS 關係](#user-content-ecmascript-js)\\n  - [字串與拼接](#user-content-string-splicing)\\n  - [數值](#user-content-number)\\n  - [undefined & null](#user-content-undefined-null)\\n  - [typeof](#user-content-typeof)\\n  - [數據類型轉換](#user-content-datatype-convert)\\n  - [數據類型表](#user-content-datatype-table)\\n- [表達式與操作符](#user-content-expressions-operators)\\n  - [陳述式與表達式差異](#user-content-expressions-operators)\\n  - [運算符](#user-content-operator)\\n  - [Math函數](#user-content-math)\\n\\n</details>\\n<details>\\n<summary style=\\\"cursor: pointer;\\\">&nbsp;流程控制與數組</summary>\\n\\n- [流程控制](#user-content-process-control)\\n  - [判斷語句](#user-content-process-control)\\n  - [循環語句](#user-content-loop)\\n- [數組](#user-content-array)\\n  - [創建數組](#user-content-array)\\n  - [取得與更改數組項](#user-content-modify)\\n  - [數組去重](#user-content-de-duplication)\\n  - [slice 方法](#user-content-slice)\\n  - [頭尾操作(push、unshift、pop、shift)](#user-content-pups)\\n  - [splice 方法](#user-content-splice)\\n  - [concat 方法](#user-content-concat)\\n  - [indexOf 與 includes 方法](#user-content-indexof-includes)\\n  - [join 方法](#user-content-join)\\n  - [reverse 方法](#user-content-reverse)\\n  - [sort 方法](#user-content-sort)\\n  - [二維數組](#user-content-two-dimensional)\\n</details>\\n<details>\\n<summary style=\\\"cursor: pointer;\\\">&nbsp;函數、DOM、BOM</summary>\\n\\n- [函數](#user-content-function)\\n  - [作用域與變量](#user-content-function)\\n  - [函數優先提升](#user-content-function-promotion)\\n  - [函數的使用](#user-content-function-use)\\n  - [閉包](#user-content-closure)\\n  - [IIFE](#user-content-iife)\\n- [DOM](#user-content-dom)\\n  - [簡介](#user-content-dom)\\n  - [onload 使用](#user-content-onload)\\n  - [常用訪問節點方法](#user-content-get-element)\\n  - [nodeType 常用屬性值](#user-content-node-type)\\n  - [節點屬性](#user-content-node-attributes)\\n  - [節點操作](#user-content-node-operate)\\n  - [節點自定義屬性](#user-content-node-customize)\\n  - [事件監聽](#user-content-event-listener)\\n    - [表單](#user-content-event-listener)\\n    - [頁面](#user-content-event-listener-page)\\n    - [鼠標](#user-content-event-listener-mouse)\\n    - [鍵盤](#user-content-event-listener-keybored)\\n    - [on 與 addEventListener](#user-content-event-listener-on-add)\\n    - [事件委託](#user-content-event-listener-entrust)\\n  - [異步語句](#user-content-async-statment)\\n- [BOM](#user-content-bom)\\n  - [簡介](#user-content-bom)\\n  - [History 對象](#user-content-history)\\n  - [Location 對象](#user-content-location)\\n  - [Navigator 對象](#user-content-navigator)\\n  - [offsetTop 屬性](#user-content-offsettop)\\n</details>\\n<details>\\n<summary style=\\\"cursor: pointer;\\\">&nbsp;基於對象、正則表達式</summary>\\n\\n- [基於對象](#user-content-object-based)\\n  - [簡介](#user-content-object-based)\\n  - [關於對象](#user-content-about-object)\\n  - [構造函數與對象](#user-content-constructor-object)\\n  - [原型原型鏈](#user-content-object-prototype)\\n  - [上下文規則與使用](#user-content-object-context)\\n  - [call 與 apply](#user-content-call-apply)\\n  - [Date 對象](#user-content-object-date)\\n  - [Math 對象](#user-content-object-math)\\n- [正則表達式](#user-content-regexp)\\n  - [創建與使用](#user-content-regexp)\\n  - [元字符](#user-content-metacharacter)\\n  - [方括號表示法](#user-content-square-brackets)\\n  - [字串相關方法](#user-content-string-regexp)\\n  - [量詞](#user-content-measure-word)\\n</details>\\n<details>\\n<summary style=\\\"cursor: pointer;\\\">&nbsp;ES6 第一部分</summary>\\n\\n- [常數與變數](#user-content-const-let)\\n- [模板字符串](#user-content-template-literals)\\n- [箭頭函數](#user-content-arrow-function)\\n- [解構賦值](#user-content-destructuring-assignment)\\n- [對象與函數的提升](#user-content-object-function-promote)\\n- [剩餘參數](#user-content-rest-parameter)\\n- [展開運算符](#user-content-spread-operator)\\n- [Set 物件](#user-content-set-object)\\n- [Map 物件](#user-content-map-object)\\n- [Iterator 與 for-of 循環](#user-content-iterator-for-of)\\n- [Symbol](#user-content-symbol)\\n- [新增的對象方法](#user-content-object-assign)\\n  - [Object.assign](#user-content-object-assign)\\n  - [Object.keys、Object.values、Object.entries](#user-content-object-keys-values-entries)\\n- [新增的字符串方法](#user-content-string-includes)\\n  - [includes](#user-content-string-includes)\\n  - [padStart、padEnd](#user-content-string-padstart-padend)\\n  - [trimStart、trimEnd](#user-content-string-trimstart-trimend)\\n- [新增的數組方法](#user-content-array-includes)\\n  - [includes](#user-content-array-includes)\\n  - [Array.from](#user-content-array-from)\\n  - [find & findIndex](#user-content-array-find-findindex)\\n</details>\\n<details>\\n<summary style=\\\"cursor: pointer;\\\">&nbsp;ES6 第二部分</summary>\\n\\n- [Promise](#user-content-promise-introduce)\\n  - [簡介](#user-content-promise-introduce)\\n  - [基本用法](#user-content-promise-basic-use)\\n  - [實例方法](#user-content-promise-instance-function-then)\\n    - [then](#user-content-promise-instance-function-then)\\n    - [catch](#user-content-promise-instance-function-catch)\\n    - [finally](#user-content-promise-instance-function-finally)\\n  - [構造函數方法](#user-content-promise-constructor-function-resolve)\\n    - [Promise.resolve](#user-content-promise-constructor-function-resolve)\\n    - [Promise.reject](#user-content-promise-constructor-function-reject)\\n    - [Promise.all](#user-content-promise-constructor-function-all)\\n    - [Promise.race](#user-content-promise-constructor-function-race)\\n    - [Promise.allSettled](#user-content-promise-constructor-function-allsettled)\\n    - [Promise.any](#user-content-promise-constructor-function-any)\\n    - [注意事項](#user-content-promise-constructor-function-notice)\\n  - [應用範例](#user-content-promise-example)\\n- [Class](#user-content-class)\\n  - [簡介](#user-content-class)\\n  - [定義形式](#user-content-class-definition-form)\\n  - [屬性與方法](#user-content-class-property-function)\\n  - [私有屬性與方法](#user-content-class-private-property-function)\\n  - [extends](#user-content-class-extends)\\n  - [super](#user-content-class-super)\\n</details>\\n\\n<hr id=\\\"user-content-variable-datatype\\\" style=\\\"height: 4px;\\\">\\n\\n### 語法與表達式\\n#### <a href=\\\"#user-content-top\\\" >變量與數據類型</a>\\n#### <a href=\\\"#user-content-top\\\" >變量</a>\\n```html\\n<script>\\n  /*\\n    變量宣告方式('myValue'可替換其他數據類型)\\n    變量名只能用 字母、數字、底線、$ 組成並且不能用 數字 開頭\\n          不能用 關鍵字 與 保留字\\n          並且區分大小寫\\n    變量名盡量使用駝峰式命名法: exampleLikeThis\\n  */\\n  var name = 'myValue'\\n\\n  // 變量提升\\n  // 執行代碼前,JS有預解析階段,會預讀所有變量的\\\"定義\\\"\\n  // 變量提升只會讀取定義但不會讀取賦值(所以第一個會輸出undefined)\\n  console.log(a);// undefined\\n  console.log(typeof a);// undefined\\n  var a = 123;\\n  console.log(a); // 123\\n  // 上面等價於下面\\n  var a;\\n  console.log(a);// undefined\\n  console.log(typeof a);// undefined\\n  a = 123;\\n  console.log(a); // 123\\n</script>\\n```\\n\\n<hr id=\\\"user-content-output-statement\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\" >輸出語句</a>\\n```js\\n// 裡面 'value' 可替換其他數據類型\\n// 彈出視窗\\nalert('value');\\n/*\\n  控制台輸出\\n  控制台是一種REPL環境\\n  read(讀) => eval(執行) => print(打印) => loop(循環:回到read)\\n*/\\nconsole.log('value');\\n```\\n\\n<hr id=\\\"user-content-ecmascript-js\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\" >ECMAScript & JS 關係</a>\\n- ECMAScript: JS 的標準化規範\\n- JS: ECMAScript 的實現\\n\\n<hr id=\\\"user-content-string-splicing\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\" >字串與拼接</a>\\n```js\\nvar a = 10;\\nvar str = '我買了' + a + '顆蘋果';\\nconsole.log(str);// 我買了10顆蘋果\\nconsole.log(str.length) // 8\\n\\n// 若charAt超過該字符串長度則輸出''\\nconsole.log(str.charAt(2)) //0為開始算到2 => 了\\n\\n// substring(a, b) 從a位到b位但不包含b位(省略b則擷取至末端)，a與b可對調 str.substring(0,3) = str.substring(3,0))\\nconsole.log(str.substring(0,3)) //我買了\\nconsole.log(str.substring(-1,3)) //我買了(若a為負數則視為0)\\nconsole.log(str.substring(6,10)) //蘋果(若b超過長度則擷取至末端)\\nconsole.log(str.substring(6)) //蘋果\\n\\n// substr(a, b) 從a位開始長度為b的字串(省略b則擷取至末端)\\n// a可以為負數，則會從最後一位開始往前數\\n// 當b為負數時，返回空字符串\\nconsole.log(str.substr(0,2)) // 我買\\nconsole.log(str.substr(0)) // 我買了10顆蘋果\\n\\n// 當有負數時(若往前數到字串末端則只擷取到末端)\\nconsole.log('我買了10顆蘋果'.substr(-2, 5))// 蘋果\\nconsole.log('123456'.substr(-4, 2)) //34(於第-4位往前數2位)\\nconsole.log('123456'.substr(-2, 2)) //56(於第-2位往前數2位)\\n\\n/*\\n  slice(a,b) 與 substring(a,b) 類似從a位到b位但不包含b位\\n  但 slice a與b可以為負數且a必須小於b\\n*/ \\nconsole.log('123456'.slice(5, 2)) //''\\nconsole.log('123456'.slice(-5, -2)) //234\\nconsole.log('123456'.slice(-5))//23456\\n\\nconsole.log('aBc'.toUpperCase())//ABC\\nconsole.log('aBc'.toLowerCase())//abc\\n\\nconsole.log('abcdef'.indexOf('de'))//3\\nconsole.log('abcdef'.indexOf('g'))//找不到則為-1\\n```\\n\\n<hr id=\\\"user-content-number\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\" >數值</a>\\n```js\\n// e 代表 10的次方\\nconsole.log(3e4) //30000\\nconsole.log(.3e5) // 0.3x100000=30000\\nconsole.log(3e-4) // 0.0003\\nconsole.log(-3e4) // -30000\\n\\n// 2進制:0b\\nconsole.log(0b1111) //15\\n\\n// 8進制:0\\nconsole.log(017) //15\\n\\n// 16進制:0x\\nconsole.log(0xf) //15\\n\\n// 其他特殊運算\\nconsole.log(0/0) //NaN\\nconsole.log('1'-'2') //NaN\\nconsole.log(typeof NaN) //Number\\nconsole.log(NaN == NaN) //false\\n\\n/*\\n  Infinity 是無限大\\n  非零數字除以0，會是Infinity或-Infinity\\n  Infinity 是一個數字類型\\n*/\\nconsole.log(typeof Infinity)// Number\\n```\\n\\n<hr id=\\\"user-content-undefined-null\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\" >undefined & null</a>\\n```js\\n// undefined 是值也是類型(默認值)\\nconsole.log(typeof undefined)// undefined\\n// null: 空對象，若要將 對象、數組、事件監聽 銷毀可以設為 null\\nconsole.log(typeof null)// object\\n```\\n\\n<hr id=\\\"user-content-typeof\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\" >typeof</a>\\n- 用來檢測變量的數據類型\\n- 返回值有 ```undefined、Null、Boolean、Number、String、Object```\\n- 使用方法有兩種：typeof 變量 和 typeof(變量)\\n  ```js\\n  var a = 123;\\n  var b = 'test';\\n\\n  console.log(typeof a);// number\\n  console.log(typeof b);// string\\n  ```\\n\\n<hr id=\\\"user-content-datatype-convert\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">數據類型轉換</a>\\n- 以下為轉換範例\\n  ```js\\n  Number('123');// 123\\n  Number('123.4');// 123.4\\n  Number('123年');// NaN\\n  Number('2e3');// 2000\\n  Number('');// 0\\n  Number(true);// 1\\n  Number(false);// 0\\n  Number(undefined);// NaN\\n  Number(null);// 0\\n\\n  // 將字串轉為整數(無條件捨去)\\n  parseInt('3.14')// 3\\n  parseInt('3.14是圓周率')// 3(.以後都去掉)\\n  parseInt('圓周率是3.14')// NaN(非數字開頭)\\n  parseInt('3.99')// 3\\n  parseInt('33m44.99')// 33(非數字以後都去掉)\\n  parseInt(3.99)// 3\\n  parseInt('200px')// 200\\n\\n  parseFloat('3.14')// 3.14\\n  parseFloat('3.14是圓周率')// 3.14\\n  parseFloat('圓周率是3.14')// NaN(非數字開頭)\\n  parseFloat('3.99')// 3.99\\n\\n  String(123) // '123'\\n  String(123.4)// '123.4'\\n  String(2e3)// '2000'\\n  String(NaN)// 'NaN'\\n  String(Infinity)// 'Infinity'\\n  String(0xf)// '15'(會被轉成10進制)\\n  String(true);// 'true'\\n  String(false);// 'false'\\n  String(undefined);// 'undefined'\\n  String(null);// 'null'\\n\\n  (6).toString();// '6'\\n  var a = 6;\\n  a.toString();// '6'\\n  true.toString();// 'true'\\n  NaN.toString();// 'NaN'\\n\\n  Boolean(123);// true\\n  Boolean(0);// false\\n  Boolean(NaN);// false\\n  Boolean(Infinity);// true\\n  Boolean(-Infinity);// true\\n  Boolean('');// false\\n  Boolean('abc');// true\\n  Boolean('false');// true\\n  Boolean(undefined);// false\\n  Boolean(null);// false\\n  ```\\n\\n<hr id=\\\"user-content-datatype-table\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">數據類型表</a>\\n| 類型 | typeof檢測值 | 範例 |\\n| :-- | :-- | :-- |\\n| 數字類型 | number | 1 |\\n| 字串類型 | string | 'test' |\\n| 布爾類型 | boolean | true false |\\n| undefined類型 | undefined | undefined |\\n| null類型 | object | null |\\n\\n<hr id=\\\"user-content-expressions-operators\\\" style=\\\"height: 4px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">表達式與運算符</a>\\n#### <a href=\\\"#user-content-top\\\">陳述式與表達式差異</a>\\n- 陳述式\\n  - 執行程式碼單詞或片段,主要特徵在於```但不會回傳結果```\\n  - 比如```宣告``` ```流程控制``` ```迴圈```\\n- 表達式\\n  - 特徵在於```會回傳結果```\\n  - 比如```變數``` ```運算子``` ```正規表達式```\\n\\n<hr id=\\\"user-content-operator\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">運算符</a>\\n- 運算順序: ```NOT !``` > ```算術運算符``` > ```關係運算符``` > ```邏輯運算符```\\n- 算術運算符\\n  - ```加 +``` ```減 -``` ```乘 *``` ```除 /``` ```取餘 %```\\n  ```js\\n  /*\\n    IEEE754 小數點運算問題\\n    有時有精度問題所以需要用 toFixed(a)函數\\n    a代表保留小數點後多少位\\n    會輸出為字串,所以需要額外轉換成數字\\n  */\\n  console.log(0.1+0.2)//0.30000000000000004\\n  console.log(Number((0.1+0.2).toFixed(2)))\\n  ```\\n- 關係運算符\\n  - ```大於 >``` ```小於 <``` \\n  - ```大於等於 >=``` ```小於等於 <=``` \\n  - ```等於 ==``` ```不等於 !=```\\n  - ```全等於 ===``` ```不全等於 !==```\\n  ```js\\n  1 == true;// true\\n  1 === true;// false\\n  0 == false;// true\\n  0 === false;// false\\n  0 == undefined;// false\\n  0 === undefined;// false\\n  null == undefined;// true\\n  null === undefined;// false\\n  ```\\n- 邏輯運算符\\n  - 依運算順序排列: ```NOT !``` ```AND &&``` ```OR ||```\\n  ```js\\n  // NOT !\\n  !true;// false\\n  !false;// true\\n  !0;// true\\n  !undefined;// true\\n  !'';// true\\n  !'test';// false\\n  !!true;//true \\n  !!0;// false\\n  !!'';// false\\n  !!'test';// true\\n  \\n  // AND &&\\n  // 先判斷真假再判斷值\\n  3 && 6;// 6\\n  undefined && 15;// undefined\\n  15 && undefined;// undefined\\n  null && 2;// null\\n  '' && 16;// ''\\n  NaN && undefined;// NaN\\n\\n  // OR ||\\n  3 || 6;// 3\\n  0 || 6;// 6\\n  null || undefined;// undefined\\n  'a' || 'b';// 'a'\\n  NaN || null;// null\\n\\n  !true || true;// true\\n  3 && 4 || 5 && 6;// 4\\n  ```\\n- 賦值運算符\\n  - ```賦值 =```\\n  - ```快捷賦值 += -= *= /= %=```\\n  - ```自增 ++```\\n  - ```自減 --```\\n  ```js\\n  // 快捷賦值\\n  var a = 6;\\n  a *= 2;// 12\\n  a += 3;// 15\\n  a /= 3;// 5\\n  a %= 2;// 1\\n\\n  // 自增自減\\n  // 先加在賦值\\n  var a = 3;\\n  var b = ++a;\\n  console.log(b);// 4\\n  console.log(a);// 4\\n  // 賦值後再加\\n  var a = 3;\\n  var b = a++;\\n  console.log(b);// 3\\n  console.log(a);// 4\\n  ```\\n- isNaN 函數\\n  ```js\\n  // isNaN 函數可以用來判斷變量是否為NaN\\n  // 原理:只要傳入Number()後的結果是NaN就會得到true\\n  isNaN(NaN);// true\\n  isNaN(5);// false\\n  isNaN(undefined);// true\\n  isNaN('3');// true\\n  isNaN(null);// false\\n  ```\\n\\n<hr id=\\\"user-content-math\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">Math函數</a>\\n```js\\n/*\\n  Math.ceil 向上取整\\n  Math.floor 向下取整\\n*/\\nconsole.log(Math.ceil(2.4))// 3\\nconsole.log(Math.floor(2.4))// 2\\n// 冪與開根號\\nconsole.log(Math.pow(2,3))//8: 2的3次方\\nconsole.log(Math.sqrt(81))//81開根號=9\\nconsole.log(Math.sqrt(-81))//NaN\\n// 取亂數\\nconsole.log(Math.random())\\n// 取 a到b 之間的隨機整數\\nconsole.log(parseInt(Math.random()*(b-a+1))+a)\\n```\\n\\n<hr id=\\\"user-content-process-control\\\" style=\\\"height: 4px;\\\">\\n\\n### 流程控制與數組\\n#### <a href=\\\"#user-content-top\\\">流程控制</a>\\n#### <a href=\\\"#user-content-top\\\">判斷語句</a>\\n- if 語句\\n  - [詳細請看 MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else)\\n  - 包含 ```if、else if、else```\\n  ```js\\n  if (condition1)\\n   statement1\\n  else if (condition2)\\n    statement2\\n  else if (condition3)\\n    statement3\\n  else\\n    statementN\\n  ```\\n- switch 語句\\n  - [詳細請看 MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch)\\n  ```js\\n  switch (expression) {\\n    case value1:\\n      //Statements executed when the\\n      //result of expression matches value1\\n      [break;]\\n    case value2:\\n      //Statements executed when the\\n      //result of expression matches value2\\n      [break;]\\n    ...\\n    case valueN:\\n      //Statements executed when the\\n      //result of expression matches valueN\\n      [break;]\\n    [default:\\n      //Statements executed when none of\\n      //the values match the value of the expression\\n      [break;]]\\n  }\\n  ```\\n- 三元運算符\\n  ```js\\n  var ans = age >= 18 ? '成年人' : '未成年人';\\n  ```\\n\\n<hr id=\\\"user-content-loop\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">循環語句</a>\\n- while 語句\\n  - [詳細請看 MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while)\\n  ```js\\n  while (condition){\\n    statement\\n  }\\n  ```\\n- do-while 語句\\n  - [詳細請看 MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/do...while)\\n  ```js\\n  do{\\n    statement\\n  }while (condition);\\n  ```\\n- for 語句\\n  - [詳細請看 MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for)\\n  ```js\\n  for ([initialization]; [condition]; [final-expression]){\\n    statement\\n  }\\n  ```\\n\\n<hr id=\\\"user-content-array\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">數組</a>\\n#### <a href=\\\"#user-content-top\\\">創建數組</a>\\n```js\\n// 方法1\\nvar arr1 = [33, 44, 55, 66];\\n// 方法2\\nvar arr2 = new Array(33, 44, 55, 66);\\n// 方法3\\nvar arr3 = new Array(4);\\n```\\n\\n<hr id=\\\"user-content-modify\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">取得與更改數組項</a>\\n```js\\n// 取得數組項\\nvar arr = ['A', 'B', 'C', 'D'];\\nconsole.log(arr[0]);// A\\nconsole.log(arr[4]);// undefined\\nconsole.log(arr[-1]);// undefined\\nconsole.log(arr.length);// 4\\nconsole.log(arr[arr.length - 1]);// D\\n// 更改數組項\\nvar arr = ['1', '2', '3', '4', '5'];\\narr[6] = 'A';\\nconsole.log(arr);//(7) [\\\"1\\\", \\\"2\\\", \\\"3\\\", \\\"4\\\", \\\"5\\\", empty, \\\"A\\\"]\\n```\\n\\n<hr id=\\\"user-content-de-duplication\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">數組去重</a>\\n```js\\n// 原數組\\nvar arr = [1, 1, 1, 2, 2, 3, 3, 3, 2, 1];\\n// 结果數組\\nvar result = [];\\n// 遍歷原数组\\nfor (var i = 0; i < arr.length; i++) {\\n  // 判断是否已在结果數組，若不在就加入\\n  // includes 為用来判断該項是否已在數組中\\n  if (!result.includes(arr[i])) {\\n      result.push(arr[i]);\\n  }\\n}\\n```\\n\\n<hr id=\\\"user-content-slice\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">slice 方法</a>\\n```js\\n// 不會更改原數組只會返回\\nvar arr = ['A', 'B', 'C', 'D', 'E', 'F'];\\nvar child_arr1 = arr.slice(2, 5);\\nvar child_arr2 = arr.slice(2);// 沒寫第二個參數則預設到最後一項\\nvar child_arr3 = arr.slice(2, -1);// = arr.slice(2, 5)，-1 = 最後一項(往回數)\\nconsole.log(child_arr1);// [\\\"C\\\", \\\"D\\\", \\\"E\\\"]\\nconsole.log(child_arr2);// [\\\"C\\\", \\\"D\\\", \\\"E\\\", \\\"F\\\"]\\nconsole.log(child_arr3);// [\\\"C\\\", \\\"D\\\", \\\"E\\\"]\\n```\\n\\n<hr id=\\\"user-content-pups\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">頭尾操作(push、unshift、pop、shift)</a>\\n```js\\n/*\\n  push() 把新的參數添加到數組的尾部，返回值是數組的新長度\\n  unshift() 把新的參數添加到數組的最前面，返回值是數組的新長度\\n  pop() 刪除數組中的最後一個元素，返回值是被刪除的那個元素\\n  shift() 刪除數組中的第一個元素，返回值是被刪除的那個元素\\n*/\\n\\n// push()\\nvar arr = [22, 33, 44, 55];\\narr.push(66);\\narr.push(77, 88, 99);\\nconsole.log(arr);// [22, 33, 44, 55, 66, 77, 88, 99]\\n// ***********************************\\n// pop()\\nvar arr = [22, 33, 44, 55];\\nvar item = arr.pop();// 刪除最後一項並返回最後一項\\nconsole.log(arr);// [22, 33, 44]\\nconsole.log(item);// 55\\n// ***********************************\\n// unshift()\\nvar arr = [22, 33, 44, 55];\\narr.unshift(11);// 在首項前面新增一項\\narr.unshift(0);\\nconsole.log(arr);// [ 0, 11, 22, 33, 44, 55]\\n\\n// ***********************************\\n// shift()\\nvar arr = [22, 33, 44, 55];\\nvar item = arr.shift();// 刪除首項並返回首項\\nconsole.log(arr);// [33, 44, 55]\\nconsole.log(item);// 22\\n```\\n\\n<hr id=\\\"user-content-splice\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">splice 方法</a>\\n```js\\n// 1\\nvar arr = [0, 1, 2, 3];\\narr.splice(2, 1);// 若第二個參數後面不寫則直接刪除\\nconsole.log(arr);// [0, 1, 3]\\n// 2\\nvar arr = [0, 1, 2, 3, 4, 5];\\nvar items = arr.splice(3, 0, 66, 77, 88, 99);\\nvar items2 = arr.splice(3, 2, 66, 77, 88, 99);\\nconsole.log(arr);// [0, 1, 2, 66, 77, 88, 99, 88, 99, 3, 4, 5]\\nconsole.log(items);// []\\nconsole.log(items2);// [66, 77] <= 會返回數組包含被刪除的項\\n```\\n\\n<hr id=\\\"user-content-concat\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">concat 方法</a>\\n```js\\n// 合併多個數組(不改變數組本身)\\nvar arr1 = [1, 2, 3];\\nvar arr2 = [4, 5, 6];\\nvar arr3 = [7, 8, 9];\\nvar arr = arr1.concat(arr2, arr3);\\nconsole.log(arr);// [1, 2, 3, 4, 5, 6, 7, 8, 9]\\nconsole.log(arr1);// [1, 2, 3]\\n```\\n\\n<hr id=\\\"user-content-indexof-includes\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">indexOf 與 includes 方法</a>\\n```js\\n/*\\n  indexOf方法皆是以\\\"===\\\"做判斷\\n  若有兩個參數則\\n  第一個參數: 查找的項目\\n  第二個參數: 從該點位置開始查找項目\\n*/\\n[0, 1, 2, 3, 4, 5].indexOf(6);// -1\\n[0, 1, 2, 3, 4, 5, 2].indexOf(2);// 返回第一個出現的位置:2\\n[0, 1, 2, 3, 4, 5].indexOf(3, 4);// -1\\n\\n// includes方法\\n[0, 1, 2, 3, 4, 5].includes(6);// false\\n```\\n\\n<hr id=\\\"user-content-join\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">join 方法</a>\\n```js\\n[0, 1, 2, 3, 4, 5].join();// 等同於 toString\\n[0, 1, 2, 3, 4, 5].toString();// '0,1,2,3,4,5'\\n[0, 1, 2, 3, 4, 5].join('-');// '0-1-2-3-4-5'\\n[0, 1, 2, 3, 4, 5].join('');// '012345'\\n```\\n\\n<hr id=\\\"user-content-reverse\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">reverse 方法</a>\\n```js\\n[0, 1, 2, 3, 4, 5].reverse();// [5, 4, 3, 2, 1, 0]\\n// 將字串反轉\\n'012345'.split('').reverse().join();// '5,4,3,2,1,0'\\n'012345'.split('').reverse().join('');// '543210'\\n```\\n\\n<hr id=\\\"user-content-sort\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">sort 方法</a>\\n```js\\nvar arr = [33, 22, 11, 55];\\n/*\\n  a, b 分別為靠前靠後的項\\n  若需要交換位置則返回正值,否則返回負值\\n*/\\narr.sort(function (a, b) {\\n    return b - a;\\n});\\n\\nconsole.log(arr);// [55, 33, 22, 11]\\n```\\n\\n<hr id=\\\"user-content-two-dimensional\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">二維數組</a>\\n```js\\n// 數組包含多個一維數組\\nvar matrix = [\\n  [11, 33, 55],\\n  [22, 33, 44],\\n  [36, 49, 52],\\n  [56, 10, 23]\\n];\\n```\\n\\n<hr id=\\\"user-content-function\\\" style=\\\"height: 4px;\\\">\\n\\n### 函數、DOM、BOM\\n#### <a href=\\\"#user-content-top\\\">函數</a>\\n#### <a href=\\\"#user-content-top\\\">作用域與變量</a>\\n```js\\n// 範例1\\nvar a = 1;\\nvar b = 2;\\nfunction fun() {\\n  // 查看函數內部是否有該變量若無則查找全局變量\\n  c = 3;// 函數內不加var則轉變為全局變量\\n  c++;\\n  a++;// 函數內部查無a變量則以全局變量a為主角\\n  var b = 4;\\n  b++;\\n  console.log(b);// 5\\n}\\nfun();\\nconsole.log(a);// 2\\nconsole.log(b);// 2\\nconsole.log(c);// 可以訪問到變量c:4\\n\\n// 範例2(遮蔽效應)\\nvar m = 1;\\nfunction fun() {\\n  m++;\\n  console.log(m);// undefined + 1 = NaN\\n  var m = 4; \\n  console.log(m);// 4\\n}\\nfun();\\nconsole.log(m);// 1\\n\\n// 範例3(作用域)\\nvar a = 10;\\nvar b = 20;\\nfunction fun() {\\n  var c = 30;\\n  function inner() {\\n    var a = 40;\\n    var d = 50;\\n    // 從裡到外尋找變量\\n    console.log(a, b, c, d);// 40 20 30 50\\n  }\\n  inner();\\n}\\nfun();\\n```\\n\\n<hr id=\\\"user-content-function-promotion\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">函數優先提升</a>\\n```js\\n// 函數會被提升至最上方\\nfun();// B\\n\\nvar fun = function () {\\n  console.log('A');\\n};\\n\\nfunction fun() {\\n  console.log('B');\\n}\\n\\nfun();// A\\n```\\n\\n<hr id=\\\"user-content-function-use\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">函數的使用</a>\\n```js\\n// 1.函數內可定義參數\\nfunction add(a, b, c) {\\n  var sum = a + b + c;\\n  console.log(sum);\\n}\\n// 定義函數需被呼叫才會執行\\nadd(4, 5, 5);// 14\\nadd(2, 2);// NaN\\nadd(6, 3, 2, 4);// 11\\n\\n// 2.如果 return 後面沒有返回值，默認返回 undefined\\nfunction sum(a, b) {\\n  return a + b;\\n}\\nvar result = sum(3, 4);\\nconsole.log(result);// 7\\n\\n// 3.arguments\\n/*\\n  arguments 類似數組(對象)，但並非真正的數組(對象)\\n  arguments.length 可以獲得參數的數量\\n  arguments[0] 括號裡面放索引可以取得參數值 \\n*/\\n// 計算參數總和\\nfunction fun() {\\n  var sum = 0;\\n  for (var i = 0; i < arguments.length; i++) {\\n    sum += arguments[i];\\n  }\\n  console.log('參數和=' + sum);\\n}\\n```\\n\\n<hr id=\\\"user-content-closure\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">閉包</a>\\n```js\\n// 1.封裝函數來使用私有變量\\nfunction fun() {\\n  // 定義局部(私有)變量\\n  var a = 0;\\n  return {\\n    getA: function () {\\n      return a;\\n    },\\n    add: function () {\\n      a++;\\n    },\\n    pow: function () {\\n      a *= 2;\\n    }\\n  };\\n}\\nvar obj = fun();\\nconsole.log(obj.getA());// 0\\n// 操作私有變量\\nobj.add();\\nobj.add();\\nobj.add();\\nconsole.log(obj.getA());// 3\\nobj.pow();\\nconsole.log(obj.getA());// 6\\n\\n// 2.內部函數呼叫\\n// 創建一個函數\\nfunction fun() {\\n    // 定義局部變量\\n    var name = 'test';\\n    // 輸出局部變量\\n    return function () {\\n        console.log(name);\\n    };\\n}\\n// 獲得內部函數，使用變量inn接收\\nvar inn = fun();\\n// 定義全局變量\\nvar name = 'ABC';\\n// 執行inn函數，相當於在fun函數的外部，执行了内部函数\\ninn();// test\\n\\n// 3.閉包的記憶性\\nfunction createCheckTemp(standardTemp) {\\n  function checkTemp(n) {\\n    if (n <= standardTemp) {\\n      console.log('體溫正常');\\n    } else {\\n      console.log('體溫偏高');\\n    }\\n  }\\n  return checkTemp;\\n}\\n// 以 37.1 度為標準\\nvar checkTemp_A = createCheckTemp(37.1);\\n// 以 37.3 度為標準\\nvar checkTemp_B = createCheckTemp(37.3);\\ncheckTemp_A(37.2);// 體溫偏高\\ncheckTemp_B(37.2);// 體溫正常\\n```\\n\\n<hr id=\\\"user-content-iife\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">IIFE</a>\\n- 用處\\n  - 1.可以避免裡面的變數影響到全域\\n  - 2.JavaScript 引擎看到即立刻轉譯該 function\\n- 變量賦值\\n  ```js\\n  (function () {\\n      var name = \\\"Barry\\\";\\n  })();\\n  console.log(name);// Uncaught ReferenceError: name is not defined\\n\\n  var result = (function () {\\n      var name = \\\"Barry\\\";\\n      return name;\\n  })();\\n  // Immediately creates the output:\\n  console.log(result); // \\\"Barry\\\"\\n  ```\\n- 全局轉換局部變量\\n  ```js\\n  var arr = [];\\n  for (var i = 0; i < 5; i++) {\\n    //使用IIFE將全局變量輸入至函數裡面作為局部變量使用\\n    //若不使用IIFE則全部輸出都為5\\n    (function(i){\\n        arr.push(function () {\\n            console.log(i);\\n        });\\n    })(i);\\n  }\\n  arr[0]();\\n  arr[1]();\\n  arr[2]();\\n  arr[3]();\\n  arr[4]();\\n  ```\\n\\n<hr id=\\\"user-content-dom\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">DOM</a>\\n#### <a href=\\\"#user-content-top\\\">簡介</a>\\n- DOM ( Document Object Model，文檔對象模型 )\\n- 是 JS 操作 HTML 文檔的接口\\n- 特點為將文檔表示為節點樹\\n\\n<hr id=\\\"user-content-onload\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">onload 使用</a>\\n```html\\n<head>\\n  <script>\\n    // 通常js會寫在html後面,若要寫在前面則使用 window.onload\\n    // 給 window 對象添加 onload 事件監聽。\\n    // onload 表示頁面都加載完畢。\\n    window.onload = function () {\\n      // 得到盒子1(取得第一個id元素)\\n      var box1 = document.getElementById('box1');\\n      // 得到盒子2\\n      var box2 = document.getElementById('box2');\\n\\n      console.log(box1);\\n      console.log(box2);\\n      // 輸出class名\\n      console.log(box1.className);\\n      // 可以替換class名\\n      box1.className = 'test1'\\n      console.log(box1.className);\\n    };\\n  </script>\\n</head>\\n\\n<body>\\n  <div id=\\\"box1\\\" class=\\\"box1\\\">我是盒子1</div>\\n  <div id=\\\"box2\\\">我是盒子2</div>\\n</body>\\n```\\n\\n<hr id=\\\"user-content-get-element\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">常用訪問節點方法</a>\\n| 語法 | 功能 | 兼容性 |\\n| :-- | :-- | :-- |\\n| ```document.getElementById()``` | 通過 ```id``` 得到元素 | IE6 |\\n| ```document.getElementsByTagName()``` | 通過 ```標籤名``` 得到元素數組 | IE6 |\\n| ```document.getElementsByClassName()``` | 通過 ```類名``` 得到元素數組 | IE9 |\\n| ```document.querySelector()``` | 通過 ```選擇器``` 得到元素 | IE9，IE8部分兼容 |\\n| ```document.querySelectorAll()``` | 通過 ```選擇器``` 得到元素數組 | IE9，IE8部分兼容 |\\n\\n- 範例\\n  ```js\\n  // 先得到box1(取得第一個id元素)\\n  var box1 = document.getElementById('box1');\\n  // 得到box1中的p標籤的數組\\n  var ps_inbox1 = box1.getElementsByTagName('p');\\n  // 若不指定則取得全部p元素\\n  var p = document.getElementsByTagName('p');\\n\\n  // 只能得到頁面上的一個元素(有多個則取第一個)\\n  // 使用css語法\\n  var the_p = document.querySelector('#box p:nth-child(1)');\\n\\n  // 返回一個元素數組 NodeList\\n  var lis_inlist1 = document.querySelectorAll('#list1 li');\\n  ```\\n\\n<hr id=\\\"user-content-node-type\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">nodeType 常用屬性值</a>\\n| 屬性值 | 節點類型 |\\n| :-- | :-- |\\n| 1 | 元素節點(如 ```<p>```) |\\n| 3 | 文本節點 |\\n| 8 | 註釋節點 |\\n| 9 | document節點 |\\n| 10 | DTD節點 |\\n\\n- 使用方式\\n  ```js\\n  var box = document.getElementById('box');\\n  var para = document.getElementById('para');\\n\\n  // 該節點屬性值\\n  console.log(box.nodeType);\\n  // 第一個子節點屬性值\\n  console.log(box.firstChild.nodeType);\\n  ```\\n\\n<hr id=\\\"user-content-node-attributes\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">節點屬性</a>\\n| 關係 | 所有節點 | 只考慮元素節點 |\\n| :-- | :-- | :-- |\\n| 子節點 | childNodes | children |\\n| 父節點 | parentNode | 一樣 |\\n| 第一個子節點 | firstChild | firstElementChild |\\n| 最後一個子節點 | lastChild | lastElementChild |\\n| 前面一個兄弟節點 | previousSibling | previousElementSibling |\\n| 後面一個兄弟節點 | nextSibling | nextElementSibling |\\n\\n- 使用方式\\n  ```js\\n  var box = document.getElementById('box');\\n  var para = document.getElementById('para');\\n\\n  // 所有子節點\\n  console.log(box.childNodes);\\n  // 所有的元素子節點（IE9開始兼容）\\n  console.log(box.children);\\n  // 若裡面標籤有id則可以直接調用\\n  console.log(box.children.para);\\n  // 第一個子節點\\n  console.log(box.firstChild);\\n  // 第一個元素子節點（IE9開始兼容）\\n  console.log(box.firstElementChild);\\n  // 最後一個子節點\\n  console.log(box.lastChild);\\n  // 最後一個元素子節點（IE9開始兼容）\\n  console.log(box.lastElementChild);\\n  // 父節點\\n  console.log(para.parentNode);\\n  // 前一個兄弟節點\\n  console.log(para.previousSibling);\\n  // 前一個元素兄弟節點（IE9開始兼容）\\n  console.log(para.previousElementSibling);\\n  // 後一個兄弟節點\\n  console.log(para.nextSibling);\\n  // 後一个元素兄弟節點（IE9開始兼容）\\n  console.log(para.nextElementSibling);\\n  ```\\n<hr id=\\\"user-content-node-operate\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">節點操作</a>\\n- 創建與移動節點\\n  ```js\\n  var oBox = document.getElementById('box');\\n  var oPs = oBox.getElementsByTagName('p');\\n  // 創建節點\\n  var oP = document.createElement('p');\\n  // 設置文字\\n  oP.innerText = '我是新来的';\\n  // 移動節點:連同後代一起移動\\n  // appendChild:增加至父標籤的最後\\n  oBox.appendChild(oP);\\n  // insertBefore(a,b):將a元素插入在b元素之前\\n  oBox.insertBefore(oP, oPs[0]);\\n  ```\\n\\n- 克隆節點\\n  ```js\\n  var box1 = document.getElementById('box1');\\n  var box2 = document.getElementById('box2');\\n  var theul = box1.getElementsByTagName('ul')[0];\\n  // true代表後代節點都會被克隆,若不要深克隆則寫cloneNode()\\n  var new_ul = theul.cloneNode(true);\\n  box2.appendChild(new_ul);\\n  ```\\n\\n- 刪除節點\\n  ```js\\n  var box = document.getElementById('box');\\n  var the_first_p = box.getElementsByTagName('p')[0];\\n  // 必須由父親刪除(會連同裡面後代一起刪除)\\n  box.removeChild(the_first_p);\\n  ```\\n\\n- 更改節點內容\\n  ```js\\n  var oBox = document.getElementById('box');\\n  var oBox2 = document.getElementById('box2');\\n  /*\\n    innerHTML 與 innerText: \\n    獲取元素的開始和結束標籤之間的內容\\n    也可以通過innerHTML重新設置元素中的內容\\n  */\\n  // 下面兩個只差在是否取得含html標籤內容\\n  console.log(oBox2.innerHTML)// 123 <p>456</p>789\\n  console.log(oBox2.innerText)// 123 456 789\\n  ```\\n\\n- 更改節點css樣式\\n  ```js\\n  // 使用 style 更改節點內容樣式\\n  var oBox = document.getElementById('box');\\n  oBox.style.fontSize = '50px';\\n  ```\\n\\n- 更改非特殊節點屬性\\n  ```js\\n  var box = document.getElementById('box');\\n  box.setAttribute('data-n', 10);\\n  var n = box.getAttribute('data-n');\\n  console.log(n);// 10\\n  ```\\n\\n- 更改特殊節點屬性\\n  ```html\\n  <img src=\\\"image.jpg\\\" id=\\\"pic\\\">\\n  <a href=\\\"https://www.google.com/\\\" id=\\\"link\\\">google</a>\\n\\n  <script>\\n    var oPic = document.getElementById('pic');\\n    // setAttribute 也可以替換(只是通常是用在非w3c標準屬性)\\n    // oPic.setAttribute('src','image2.jpg');\\n    oPic.src = 'image2.jpg';\\n\\n    var oLink = document.getElementById('link');\\n    oLink.href = 'https://github.com/';\\n    oLink.innerText = 'github';\\n  </script>\\n  ```\\n\\n<hr id=\\\"user-content-node-customize\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">節點自定義屬性</a>\\n- 簡介\\n  ```txt\\n  HTML5 添加 data-n 方式來自定義屬性，n可以換成自定義屬性名\\n  使用這樣的結構可進行數據存放，並且方便好管理\\n  ```\\n\\n- 定義方式\\n  - html 標籤\\n    ```html\\n    <h2 data-weather=\\\"rain\\\"></h2>\\n    <!-- 若有多重名詞組成則用 - 分開 -->\\n    <h2 data-number-two=\\\"2\\\"></h2>\\n    ```\\n  - js\\n    ```js\\n    var h2 = document.querySeletor('h2');\\n    h2.dataset.weather = \\\"rain\\\";\\n    // 若有多重名詞則用駝峰命名法書寫\\n    h2.dataset.numberTwo = '2';\\n    ```\\n\\n- 讀取自定義屬性\\n  - js\\n    ```html\\n    <h2 data-weather=\\\"rain\\\" data-number-two=\\\"2\\\"></h2>\\n    <script>\\n      var h2 = document.querySeletor('h2');\\n      console.log(h2.dataset.weather);// rain\\n      console.log(h2.dataset.numberTwo);// 2\\n    </script>\\n    ```\\n  - css\\n    ```html\\n    <style>\\n      h2[data-number-two=\\\"2\\\"]{\\n        color: green;\\n      }\\n    </style>\\n    <h2 data-weather=\\\"rain\\\" data-number-two=\\\"2\\\"></h2>\\n    ```\\n\\n<hr id=\\\"user-content-event-listener\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">事件監聽</a>\\n#### <a href=\\\"#user-content-top\\\">表單</a>\\n- 常用事件監聽\\n\\n  | 事件名 | 事件描述 |\\n  | :-- | :-- |\\n  | onchange | 當用戶改變內容(onchange => onblur) |\\n  | onfocus | 當元素獲得焦點 |\\n  | onblur | 當元素失去焦點 |\\n  | onsubmit | 當表單被提交 |\\n  | onreset | 當表單被重置 |\\n  | oninput | 當用戶修改內容 |\\n\\n- 範例\\n  ```html\\n  <form id=\\\"myform\\\">\\n    <p>\\n      姓名：\\n      <input type=\\\"text\\\" name=\\\"nameField\\\">\\n    </p>\\n    <p>\\n      年齡：\\n      <input type=\\\"text\\\" name=\\\"ageField\\\">\\n    </p>\\n    <p>\\n      <input type=\\\"submit\\\">\\n      <input type=\\\"reset\\\">\\n    </p>\\n  </form>\\n\\n  <script>\\n    var myform = document.getElementById('myform');\\n    var nameField = myform.nameField;\\n    var ageField = myform.ageField;\\n\\n    nameField.onchange = function () {\\n      console.log('已經修改完姓名');\\n    };\\n\\n    nameField.oninput = function () {\\n      console.log('正在修改姓名');\\n    };\\n\\n    nameField.onfocus = function () {\\n      console.log('姓名框得到焦點');\\n    }\\n\\n    nameField.onblur = function () {\\n      console.log('姓名框失去焦點');\\n    }\\n\\n    myform.onsubmit = function () {\\n      alert('正在嘗試提交表單');\\n    }\\n\\n    myform.onreset = function () {\\n      console.log('表單被重置');\\n    }\\n  </script>\\n  ```\\n\\n<hr id=\\\"user-content-event-listener-page\\\" style=\\\"height: 1px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">頁面</a>\\n- 常用事件監聽\\n\\n  | 事件名 | 事件描述 |\\n  | :-- | :-- |\\n  | onload | 當頁面或圖像完成加載 |\\n  | onunload | 當用戶退出頁面 |\\n\\n<hr id=\\\"user-content-event-listener-mouse\\\" style=\\\"height: 1px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">鼠標</a>\\n- 常用事件監聽\\n\\n  | 事件名 | 事件描述 |\\n  | :-- | :-- |\\n  | onclick | 鼠標```單擊```某個對象 |\\n  | ondblclick | 鼠標```雙擊```某個對象 |\\n  | onmousedown | 鼠標在某個對象被```按下``` |\\n  | onmouseup | 鼠標在某個對象被```鬆開``` |\\n  | onmousemove | 鼠標在某個對象```移動``` |\\n  | onmouseenter | 鼠標```進入```某個對象(相似 onmouseover ) |\\n  | onmouseleave | 鼠標```離開```某個對象(相似 onmouseout ) |\\n\\n- 取得鼠標位置\\n\\n  | 事件名 | 事件描述 |\\n  | :-- | :-- |\\n  | clientX | 鼠標指針對於```瀏覽器```的```水平```座標(含滾動內容) |\\n  | clientY | 鼠標指針對於```瀏覽器```的```垂直```座標(含滾動內容) |\\n  | pageX | 鼠標指針對於```整張網頁```的```水平```座標(不含滾動內容) |\\n  | pageY | 鼠標指針對於```整張網頁```的```垂直```座標(不含滾動內容) |\\n  | offsetX | 鼠標指針對於```事件元素```的```水平```座標(到區塊的邊界) |\\n  | offsetY | 鼠標指針對於```事件元素```的```垂直```座標(到區塊的邊界) |\\n\\n- 範例\\n  ```js\\n  // 畫出一個區塊\\n  var oBox = document.getElementById('box');\\n  // 顯示座標\\n  var oInfo = document.getElementById('info');\\n  // 以區塊做標準，若超過區塊外則座標不更新\\n  oBox.onmousemove = function (e) {\\n    oInfo.innerHTML = \\n      'offsetX/Y：' + e.offsetX + ',' + e.offsetY + '<br>'\\n      + 'clientX/Y：' + e.clientX + ',' + e.clientY + '<br>'\\n      + 'pageX/Y：' + e.pageX + ',' + e.pageY;\\n  };\\n  ```\\n\\n<hr id=\\\"user-content-event-listener-keybored\\\" style=\\\"height: 1px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">鍵盤</a>\\n- 常用事件監聽\\n\\n  | 事件名 | 事件描述 |\\n  | :-- | :-- |\\n  | onkeypress | 當鍵盤按鍵按下(無法識別系統按鍵如箭頭鍵) |\\n  | onkeydown | 當鍵盤按鍵按下(可識別系統鍵並先於onkeypress觸發) |\\n  | onkeyup | 當鍵盤按鍵被鬆開 |\\n\\n- charCode 字符碼\\n  - ```e.charCode``` 常用於 ```onkeypress``` 事件\\n\\n  | 字符 | 字符碼 |\\n  | :-- | :-- |\\n  | 數字 0 ~ 9 | 48 ~ 57 |\\n  | 大寫字母 A-Z | 65 ~ 90 |\\n  | 小寫字母 a-z | 97 ~ 122 |\\n\\n- keyCode 鍵碼\\n  - ```e.keyCode``` 常用於 ```onkeydown```與```onkeyup``` 事件\\n\\n  | 按鍵 | 鍵碼 |\\n  | :-- | :-- |\\n  | 數字 0 ~ 9 | 48 ~ 57 |\\n  | 不區分大小寫 A-Z | 65 ~ 90 |\\n  | 方向鍵(左、上、右、下) | 37、38、39、40 |\\n  | Enter | 13 |\\n  | 空白鍵 | 32 |\\n\\n- 範例\\n  ```html\\n  <input type=\\\"text\\\" id=\\\"field1\\\">\\n  <h1 id=\\\"info1\\\"></h1>\\n  <input type=\\\"text\\\" id=\\\"field2\\\">\\n  <h1 id=\\\"info2\\\"></h1>\\n\\n  <script>\\n    var oField1 = document.getElementById('field1');\\n    var oInfo1 = document.getElementById('info1');\\n    var oField2 = document.getElementById('field2');\\n    var oInfo2 = document.getElementById('info2');\\n\\n    // 注意onkeypress不會監測系統鍵(如shift}\\n    oField1.onkeypress = function (e) {\\n      oInfo1.innerText = '你输入的字符的字符码是' + e.charCode;\\n    };\\n\\n    oField2.onkeydown = function (e) {\\n      oInfo2.innerText = '你按下的按键的键码是' + e.keyCode;\\n    };\\n  </script>\\n  ```\\n\\n<hr id=\\\"user-content-event-listener-on-add\\\" style=\\\"height: 1px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">on與addEventListener</a>\\n- 冒泡 與 捕獲事件\\n  - 捕獲事件由 ```外面``` 到 ```裡面``` 依序觸發\\n  - 冒泡事件由 ```裡面``` 到 ```外面``` 依序觸發\\n  - 先捕獲後冒泡\\n    ```txt\\n    假設有三個區域\\n    由外到內分別為 box1、box2、box3\\n    若點擊 box3 區域則順序為\\n    box1捕獲 > box2捕獲 > box3捕獲 > \\n    box3冒泡 > box2冒泡 > box1冒泡\\n    ```\\n  - 冒泡比如水波紋向外傳遞，捕獲則相反\\n- onxxx 事件\\n  - 為 DOM0級事件監聽\\n  - 只會監聽到冒泡事件\\n  - 後面會取代前面有同元素同樣的on事件\\n- addEventListener 事件\\n  - 為 DOM2級事件監聽\\n  - 相同事件不會被覆蓋\\n  - onxxx 事件不用加上 on，如 ```onclick => click```\\n  - 第二個參數 \\n    true：監聽捕獲階段\\n    false：監聽冒泡階段\\n  - 範例\\n    ```js\\n    var oBox2 = document.getElementById('box2');\\n    oBox2.addEventListener('click', function() {\\n      console.log('click');\\n    }, false);\\n    ```\\n- stopPropagation 阻止事件傳播\\n  ```js\\n  oBtn.onclick = function (e) {\\n    // 阻止事件繼續傳播\\n    e.stopPropagation();\\n    console.log('我是按鈕');\\n  };\\n\\n  oBox.addEventListener('click', function(e) {\\n    // 阻止事件繼續傳播\\n    e.stopPropagation();\\n    console.log('我是盒子');\\n  }, true);\\n  ```\\n- preventDefault 阻止預設功能觸發\\n  ```js\\n  var oField = document.getElementById('field');\\n  oField.onkeypress = function (e) {\\n    console.log(e.charCode);\\n    if (!(e.charCode >= 48 && e.charCode <= 57 || e.charCode >= 97 && e.charCode <= 122)) {\\n      /*\\n        若使用者不是輸入\\n        數字 0~9，字符碼 48 ~ 57\\n        小寫字母 a~z，字符碼 97 ~ 122\\n        則輸入框不會出現該字碼文字\\n      */\\n      e.preventDefault();\\n    }\\n  };\\n  ```\\n\\n<hr id=\\\"user-content-event-listener-entrust\\\" style=\\\"height: 1px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">事件委託</a>\\n- 使用時機\\n  - 需要批量增加監聽事件，使用委託可減少內存開銷\\n  - 當有動態元素上元素樹時，會自動具有事件監聽功能\\n- target 與 currentTarget\\n  - target：觸發事件最早的元素，即\\\"事件源元素\\\"\\n  - currentTarget：事件處理程序附加到的元素(this)\\n- 範例\\n  ```html\\n  <button id=\\\"btn\\\">按我创建一个新列表项</button>\\n  <ul id=\\\"list\\\">\\n    <li>列表项</li>\\n    <li>列表项</li>\\n    <li>列表项</li>\\n  </ul>\\n  <script>\\n    var oList = document.getElementById('list');\\n    var oBtn = document.getElementById('btn');\\n\\n    // onmouseenter 會使該DOM節點觸發自己的事件並無冒泡\\n    // 若換成 onmouseenter 就會一次全部變成紅色\\n    oList.onmouseover = function (e) {\\n      // 避免觸發ul一次變紅\\n      e.currentTarget.style.color = '';\\n      // e.target表示使用者真正點擊的元素\\n      e.target.style.color = 'red';\\n    };\\n\\n    oBtn.onclick = function () {\\n      // 創建新的li元素\\n      var oLi = document.createElement('li');\\n      // 加入內容\\n      oLi.innerText = '我是新来的';\\n      // 上文檔樹\\n      oList.appendChild(oLi);\\n    };\\n  </script>\\n  ```\\n\\n<hr id=\\\"user-content-async-statment\\\" style=\\\"height: 1px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">異步語句</a>\\n- setInterval 與 clearInterval\\n  - setInterval \\n    - 設定每隔一段時間執行函數(無限循環)\\n    - 可以接收多個參數並按順序傳入函數\\n  - clearInterval\\n    - 解除定時器\\n  - 範例\\n    ```js\\n    var a = 0;\\n    // 無設定參數\\n    setInterval(function () {\\n      console.log(++a);\\n    }, 1000);\\n    // 設定參數\\n    var timer = setInterval(function (b, c) {\\n      console.log(b);// 88\\n      console.log(c);// 66\\n    }, 1000, 88, 66);\\n    // 解除定時器\\n    clearInterval(timer);\\n    ```\\n- setTimeout 與 clearTimeout\\n  - setTimeout\\n    - 隔一段時間後執行函數(只執行一次)\\n    - 一樣可以接收多個參數並按順序傳入函數\\n  - clearTimeout\\n    - 解除定時器\\n    - 只有未執行函數時才有作用\\n  - 範例\\n    ```js\\n    var btn1 = document.getElementById('btn1');\\n    var btn2 = document.getElementById('btn2');\\n    var timer;\\n\\n    btn1.onclick = function () {\\n      timer = setTimeout(function () {\\n        console.log('你好');\\n      }, 2000);\\n    }\\n\\n    btn2.onclick = function () {\\n      clearTimeout(timer);\\n    }\\n    ```\\n- 函數節流鎖\\n  - 確保函數執行中途不會再次執行\\n  - 常使用在動畫或輪播圖\\n  - 範例\\n    ```js\\n    var lock = true;\\n    function needToLock(){\\n      // 如果關閉狀態則不執行\\n      if(!lock) return;\\n      // 鎖住\\n      lock = false;\\n      // 一秒過後開鎖\\n      setTimeout(function(){\\n        lock = true;\\n      }, 1000);\\n    }\\n    ```\\n\\n<hr id=\\\"user-content-bom\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">BOM</a>\\n#### <a href=\\\"#user-content-top\\\">簡介</a>\\n- BOM(Browser Object Model)為瀏覽器對象模型\\n- 核心為window對象，全局變量與函數皆包含在內\\n- 窗口尺寸相關屬性\\n  - ```innerWidth``` 窗口內寬(含滾動條)\\n  - ```innerHeight``` 窗口內高(含滾動條)\\n  - ```outerWidth``` 窗口外寬(含滾動條與瀏覽器邊框)\\n  - ```outerHeight``` 窗口外高(含滾動條與瀏覽器邊框)\\n  - ```document.documentElement.clientWidth``` 窗口內寬(不含滾動條)\\n  - ```document.documentElement.clientHeight``` 窗口內高(不含滾動條)\\n  - ```scrollTop``` 與 ```scrollY``` 代表已捲動的長度\\n    - ```document.documentElement.scrollTop``` 可讀可寫\\n    - ```window.scrollY``` 只能讀取\\n    - 常用寫法\\n      ```js\\n      var scrollTop = \\n          window.scrollY || \\n          document.documentElement.scrollTop;\\n      ```\\n- resize 事件\\n  - 當窗口改變大小時觸發\\n  - 範例\\n    ```js\\n    window.onresize = function () {\\n      var root = document.documentElement;\\n      console.log(\\n        '窗口改變尺寸了',\\n        root.clientWidth,\\n        root.clientHeight\\n      );\\n    };\\n    ```\\n- scroll 事件\\n  - 當窗口滾動時觸發\\n  - 範例\\n    ```js\\n    window.onscroll = function () {\\n      console.log('窗口捲動了', window.scrollY);\\n    };\\n    ```\\n- hasOwnProperty 查看屬性是否存在\\n  ```js\\n  var a = 3;\\n  console.log(window.hasOwnProperty('a')); // true\\n  console.log(window.a);  // 3\\n  ```\\n\\n<hr id=\\\"user-content-history\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">History 對象</a>\\n- window.history 對象提供操作瀏覽器會話歷史的接口\\n- 常用功能如下\\n  - ```history.back()``` 等於瀏覽器回退按鈕\\n  - ```history.go(-1)``` 等同於 ```history.back()```\\n- 範例\\n  ```js\\n  /*\\n    go(-1)表示加载上一個頁面\\n    go(1)表示加載下一個頁面\\n    back()表示加载上一個頁面\\n  */\\n  var btn = document.getElementById('btn');\\n  btn.onclick = function () {\\n    // history.back();\\n    history.go(-1);\\n  };\\n  ```\\n\\n<hr id=\\\"user-content-location\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">Location 對象</a>\\n- window.location 標示當前所在網址\\n- 可透過該屬性賦值使瀏覽器跳轉\\n  - ```window.location = 'https://www.google.com';```\\n  - ```window.location.href = 'https://www.google.com';```\\n- search 屬性\\n  - 可以取得get請求的查詢參數\\n  - 範例\\n    ```js\\n    // 若網址為: https://www.google.com?a=1&b=2\\n    console.log(window.location.search);// \\\"?a=1&b=2\\\"\\n    ```\\n\\n<hr id=\\\"user-content-navigator\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">Navigator 對象</a>\\n- navigator 對象具有使用者此次活動的瀏覽器相關屬性與標識\\n- 有以下幾個常用屬性\\n  - ```navigator.language``` 瀏覽器設定的語系\\n  - ```navigator.cookieEnabled``` 瀏覽器cookie功能是否開啟\\n  - ```navigator.javaEnabled()``` 瀏覽器是否允許 Java 程式\\n  - ```navigator.appName``` 瀏覽器官方名稱\\n  - ```navigator.appVersion``` 瀏覽器版本\\n  - ```navigator.userAgent``` 瀏覽器完整的版本資訊\\n  - ```navigator.platform``` 用戶操作系統\\n  - ```navigator.vendor``` 瀏覽器廠商名稱\\n\\n<hr id=\\\"user-content-offsettop\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">offsetTop 屬性</a>\\n- 計算該元素到上邊界的距離\\n- 若父層有定位則計算到父元素的邊界\\n- 範例\\n  ```html\\n  <style>\\n    #box {\\n      width: 400px;\\n      height: 400px;\\n      margin: 60px auto;\\n      border: 4px solid red;\\n    }\\n\\n    ul {\\n      padding-top: 10px;\\n    }\\n\\n    li {\\n      padding-top: 10px;\\n    }\\n\\n    #para {\\n      width: 80px;\\n      height: 80px;\\n      background-color: orange;\\n    }\\n  </style>\\n  </head>\\n\\n  <body>\\n    <div id=\\\"box\\\">\\n      <ul>\\n        <li>\\n          <p id=\\\"para\\\"></p>\\n        </li>\\n      </ul>\\n    </div>\\n    <script>\\n      var para = document.getElementById('para');\\n      // 計算top值\\n      // 若 #box  加 position 屬性則輸出 20\\n      //        沒加 position 屬性則輸出 84\\n      console.log(para.offsetTop);\\n    </script>\\n  </body>\\n  ```\\n\\n<hr id=\\\"user-content-object-based\\\" style=\\\"height: 4px;\\\">\\n\\n### 基於對象、正則表達式\\n#### <a href=\\\"#user-content-top\\\">基於對象</a>\\n#### <a href=\\\"#user-content-top\\\">簡介</a>\\n- 面向對象與基於對象差別\\n  - 基於對象(object-based)\\n    - 基於對象的語言支持對象和封裝的使用。\\n    - 它們不支持繼承或多態性或兩者。\\n    - 基於對象的語言不支持內置對象。\\n  - 面向對象(object-oriented)\\n    - 面向對象語言支持 Oops 的所有特性，包括繼承和多態。\\n    - 它們支持內置對象。\\n\\n<hr id=\\\"user-content-about-object\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">關於對象</a>\\n- 對象基本使用\\n  ```js\\n  var xiaoming = {\\n    name: '小明',\\n    age: 12,\\n    sex: '男',\\n    hobbies: ['足球', '编程'],\\n    // 不符合命名規範須以引號包裹\\n    'favorite-book': '舒克和贝塔'\\n  };\\n\\n  console.log(xiaoming.name);// 小明\\n  console.log(xiaoming.age);// 12\\n  console.log(xiaoming.sex);// 男\\n  console.log(xiaoming.hobbies);// (2) ['足球', '编程']\\n  // 不符合命名規範須用方括號取值\\n  console.log(xiaoming['favorite-book']);\\n\\n  var key = 'sex';\\n  // 如果用變量來呼叫對象則須用方括號\\n  console.log(xiaoming[key]);\\n  // 對象是引用類型值\\n  // 例子1\\n  var obj1 = {\\n    a: 1, b: 2, c: 3\\n  };\\n  var obj2 = {\\n    a: 1, b: 2, c: 3\\n  };\\n  console.log(obj1 == obj2); // false\\n  console.log(obj1 === obj2);// false\\n  console.log({} == {});     // false\\n  console.log({} === {});    // false\\n  // 例子2\\n  var obj3 = {\\n    a: 10\\n  };\\n  var obj4 = obj3;\\n  obj3.a++;\\n  console.log(obj4);// {a: 11}\\n  ```\\n\\n- 包裝類\\n  - 讓基本類型值可以從它們的構造函數prototype上獲得方法\\n  - 範例\\n    ```js\\n    var a = new Number(123);\\n    var b = new String('test');\\n    var c = new Boolean(true);\\n\\n    // 包裝後會變為對象\\n    console.log(typeof a);// object\\n    console.log(typeof b);// object\\n    console.log(typeof c);// object\\n    console.log(5 + a);// 128\\n    console.log(b.slice(0, 2));// 'te'\\n    console.log(c && true);// true\\n\\n    var d = 123;\\n    console.log(d.__proto__ == Number.prototype);// true\\n    var e = 'test';\\n    console.log(e.__proto__ == String.prototype);// true\\n\\n    // 查看自己是否擁有該方法\\n    console.log(String.prototype.hasOwnProperty('toLowerCase'));// true\\n    console.log(String.prototype.hasOwnProperty('slice'));// true\\n    console.log(String.prototype.hasOwnProperty('substr'));// true\\n    console.log(String.prototype.hasOwnProperty('substring'));// true\\n    ```\\n\\n- 對象方法\\n  ```js\\n  // 設置對象的方法\\n  var xiaoming = {\\n    name: '小明',\\n    age: 12,\\n    sex: '男',\\n    sayHello: function () {\\n      console.log(this.sex);\\n    },\\n    sleep: function () {\\n      console.log('sleep');\\n    }\\n  };\\n  // 調用對象的方法\\n  xiaoming.sayHello();\\n  ``` \\n\\n- 淺克隆與深克隆\\n  - 淺克隆\\n    ```js\\n    var obj1 = {\\n      a: 1,\\n      b: 2,\\n      c: [44, 55, 66]\\n    };\\n\\n    // 實現淺克隆\\n    var obj2 = {};\\n    for (var k in obj1) {\\n      obj2[k] = obj1[k];\\n    }\\n    console.log(obj1.c == obj2.c);// true 證明了數組為同一個對象\\n    ```\\n  - 深克隆\\n    ```js\\n    function deepClone(o) {\\n      var result\\n      // 判断是對象還是數組\\n      if (Array.isArray(o)) {\\n        // 數組\\n        result = [];\\n        for (var i = 0; i < o.length; i++) {\\n          result.push(deepClone(o[i]));\\n        }\\n      } else if (typeof o == 'object') {\\n        // 因為typeof數組會顯示object，所以要先判斷是否為數組才能判斷對象)\\n        result = {};\\n        for (var k in o) {\\n          result[k] = deepClone(o[k]);\\n        }\\n      } else {\\n        // 基本类型值\\n        result = o;\\n      }\\n      return result;\\n    }\\n    ```\\n\\n- 對象屬性新增修改與刪除\\n  ```js\\n  var obj = {\\n    a: 10,\\n    b: 20\\n  };\\n\\n  // 修改屬性\\n  obj.b = 40;\\n  obj.b++;\\n  console.log(obj.b);\\n\\n  // 新增屬性\\n  obj.c = 60;\\n  console.log(obj);\\n\\n  // 删除屬性\\n  delete obj.a;\\n  console.log(obj);\\n  ```\\n\\n<hr id=\\\"user-content-constructor-object\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">構造函數與對象</a>\\n```js\\n// 通常習慣將首字母大寫的函數定義為構造函數(方便辨認)\\nfunction People(name, age, sex) {\\n  this.name = name;\\n  this.age = age;\\n  this.sex = sex;\\n  this.sayHello = function () {\\n    console.log('你好，我是' + this.name);\\n  };\\n  // 不管有無return都會返回 this(對象)\\n}\\n// 用new關鍵字初始創建對象:{}\\nvar test1 = new People('小明', 12, '男');\\n// {name: '小明', age: 12, sex: '男', sayHello: ƒ}\\nconsole.log(test1);\\ntest1.sayHello();\\n```\\n\\n<hr id=\\\"user-content-object-prototype\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">原型原型鏈</a>\\n- prototype的使用與省內存\\n  ```js\\n  // 若方法寫在函數本身裡面則實例化一個對象就會多佔一次內存\\n  function People(name, age, sex) {\\n    this.name = name;\\n    this.age = age;\\n    this.sex = sex;\\n  }\\n  // 將方法寫在原型上就不會因實例化而佔內存\\n  People.prototype.sayHello = function () {\\n    console.log('你好，我是' + this.name);\\n  }\\n  People.prototype.growup = function () {\\n    this.age++;\\n  }\\n  // 也可以往原型上新增屬性\\n  People.prototype.nationality = '美國';\\n  var test1 = new People('小明', 12, '男');\\n  var test2 = new People('小红', 11, '女');\\n  // 查找該屬性是否存在\\n  'nationality' in test1;// true\\n\\n  // 因函數為引用類型可以觀察是否調用同一個方法\\n  // 若方法放在函數內部會因實例化而調用該實例方法: false\\n  console.log(test1.sayHello === test2.sayHello);//true\\n  console.log(test1.__proto__.sayHello === test2.__proto__.sayHello);// true\\n  ```\\n\\n- 實現繼承\\n  ```js\\n  // 創建父類\\n  function People(name, age, sex) {\\n    this.name = name;\\n    this.age = age;\\n    this.sex = sex;\\n  }\\n  // 將方法寫在原型上就不會因實例化而佔內存\\n  People.prototype.sayHello = function () {\\n    console.log('你好，我是' + this.name);\\n  }\\n  People.prototype.sleep = function () {\\n    console.log(this.name + '睡覺，zzzzz');\\n  };\\n  // 子類(須含有父類所有參數，若漏掉其中一個就使用父類prototype方法會抱錯)\\n  function Student(name, age, sex, school, studentNumber) {\\n    this.name = name;\\n    this.age = age;\\n    this.sex = sex;\\n    this.school = school;\\n    this.studentNumber = studentNumber;\\n  }\\n  // ***用子類原型繼承父類(繼承不需填參數)***\\n  Student.prototype = new People();\\n  // 覆寫（override）父類方法\\n  Student.prototype.sayHello = function () {\\n    console.log('你好我是' + this.name);\\n  }\\n  // 實例化\\n  var test = new Student('test', 29, '男', '學校', 100556);\\n  // 呼叫使用父類方法\\n  test.sleep();// test睡覺，zzzzz\\n  // 另外若有填參數，創建的Student對象也不會使用\\n  Student.prototype = new People('test2',20,'yyy');\\n  var test = new Student();\\n  test.sleep();// undefined睡覺，zzzzz\\n  test.__proto__.sleep();// test2睡覺，zzzzz\\n\\n  /*\\n    整體繼承流程\\n    1.創建父類(父類的prototype若無繼承則為object)\\n    2.創建父類實例\\n    3.創建子類\\n    4.將子類的prototype指向父類實例(形成繼承)\\n\\n    以上完成會形成以下關係\\n    子類實例.__proto__ 等於 父類實例\\n    子類實例.__proto__.constructor 等於 子類\\n    子類.prototype 等於 父類實例\\n    子類.prototype.constructor 等於 子類\\n    子類實例.__proto__ 等於 子類.prototype\\n  */\\n  ```\\n\\n- 原型鏈終點\\n  ```js\\n  function People(name, age) {\\n    this.name = name;\\n    this.age = age;\\n  }\\n  var test = new People('test', 12);\\n  console.log(test.__proto__.__proto__ === Object.prototype);// true\\n  // 透過Object原型查找可發現無上層繼承\\n  console.log(Object.prototype.__proto__);// null\\n  ```\\n\\n- hasOwnProperty方法 與 in關鍵字 使用\\n  ```js\\n  function People(name, age, sex) {\\n    this.name = name;\\n    this.age = age;\\n    this.sex = sex;\\n  }\\n  // 往原型上加入nationality屬性\\n  People.prototype.nationality = '美國';\\n  var test = new People('test', 12, '男');\\n\\n  // hasOwnProperty 只會尋找自己是否含有該屬性不含原型屬性\\n  console.log(test.hasOwnProperty('name'));// true\\n  console.log(test.hasOwnProperty('age'));// true\\n  console.log(test.hasOwnProperty('sex'));// true\\n  console.log(test.hasOwnProperty('nationality'));// false\\n\\n  // in 會尋找自己與原型是否含有該屬性\\n  console.log('name' in test);// true\\n  console.log('age' in test);// true\\n  console.log('sex' in test);// true\\n  console.log('nationality' in test);// true\\n  ```\\n\\n<hr id=\\\"user-content-object-context\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">上下文規則與使用</a>\\n- 上下文規則1\\n  - ```對象.方法()``` 上下文是 ```此對象```\\n  - 範例\\n    ```js\\n    function fun(){\\n      return this.a + this.b;\\n    }\\n    var a = 1;\\n    var b = 2;\\n    var obj = {\\n      a: 3,\\n      b: 3,\\n      fun: fun\\n    }\\n    console.log(obj.fun());// 6 => obj.a + obj.b\\n    ```\\n\\n- 上下文規則2\\n  - ```函數()``` 上下文是 ```window對象```\\n  - 範例\\n    ```js\\n    function fun(){\\n      return this.a + this.b;\\n    }\\n    var a = 1;\\n    var b = 2;\\n    var obj = {\\n      a: 3,\\n      b: fun(),\\n      fun: fun\\n    }\\n    console.log(obj.b);// 3 => window.a + window.b \\n    ```\\n\\n- 上下文規則3\\n  - ```數組或類數組argument[index]()``` 上下文是 ```此數組(類數組)```\\n  - 範例\\n    ```js\\n    var arr = ['A','B','C',function(){console.log(this[0])}];\\n    console.log(arr[3]());// 'A'\\n    ```\\n- 上下文規則4\\n  - ```IIFE (function(){})()``` 上下文是 ```window對象```\\n  - 範例\\n    ```js\\n    var a = 1;\\n    var obj = {\\n      a: 2,\\n      fun: (function(){\\n        var a = this.a;\\n        console.log(this.a);// 1 => window.a\\n        return function(){\\n          console.log(a);// 1 => 閉包特性\\n        }\\n      })()\\n    }\\n    ```\\n\\n- 上下文規則5\\n  - ```setTimeout setInterval``` 上下文是 ```window對象```\\n  - 範例\\n    ```js\\n    var a = 1;\\n    setTimeout(function(){\\n      var a = 2;\\n      console.log(this.a);// 1\\n      console.log(a);// 2\\n    },1000)\\n    ```\\n\\n- 上下文規則6\\n  - ```Dom元素.onclick=function(){} ``` 上下文是 ```Dom元素```\\n  - 範例\\n    ```html\\n    <div id=\\\"test\\\">test</div>\\n    <script>\\n      var test = document.getElementById(\\\"test\\\");\\n      test.onclick = function(){\\n        console.log(this);// <div id=\\\"test\\\">test</div>\\n      }\\n    </script>\\n    ```\\n\\n<hr id=\\\"user-content-call-apply\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">call 與 apply</a> \\n```js\\nfunction sum(b1, b2) {\\n  console.log(this.c + this.m + this.e + b1 + b2);\\n};\\n\\nvar xiaoming = {\\n  c: 100,\\n  m: 90,\\n  e: 80\\n};\\n\\n// call & apply 都可以帶入上下文\\nsum.call(xiaoming, 3, 5);// call 需要使用逗號\\nsum.apply(xiaoming, [3, 5]);// apply 需要使用數組\\n```\\n\\n<hr id=\\\"user-content-object-date\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">Date 對象</a>\\n- 創建日期對象\\n  ```js\\n  // 參數不加則取得今天此时此刻的日期对象\\n  var d1 = new Date();\\n  // Mon Oct 04 2021 17:20:18 GMT+0800 (台北標準時間)\\n  console.log(d1);\\n  console.log(typeof d1);// object\\n  // 得到六月一日\\n  var d2 = new Date(2020, 5, 1);      // 不算時區\\n  var d3 = new Date('2020-06-01');    // 算時區，8點\\n  // Mon Jun 01 2020 00:00:00 GMT+0800 (台北標準時間)\\n  console.log(d2);\\n  // Mon Jun 01 2020 08:00:00 GMT+0800 (台北標準時間)\\n  console.log(d3);\\n  ```\\n\\n- 日期對象方法\\n  ```js\\n  var d = new Date();\\n  console.log('日期', d.getDate());// 1~31\\n  console.log('星期', d.getDay());// 0~6(0=星期天)\\n  console.log('年份', d.getFullYear());\\n  console.log('月份', d.getMonth() + 1);// 1~12\\n  console.log('小時', d.getHours());// 0~23\\n  console.log('分鐘', d.getMinutes());// 0~59\\n  console.log('秒數', d.getSeconds());// 0~59\\n  ```\\n\\n- 時間戳\\n  ```js\\n  // 日期對象\\n  var d = new Date();\\n  // 取得時間戳的兩種方法。時間戳表示1970年1月1日距離此時的毫秒數\\n  var timestamp1 = d.getTime();// 精确到毫秒\\n  var timestamp2 = Date.parse(d);// 精确到秒，顯示毫秒，但最後三位一定是000\\n  // 將时间戳變回日期對象\\n  var dd = new Date(1601536565000);\\n  // Thu Oct 01 2020 15:16:05 GMT+0800 (台北標準時間)\\n  console.log(dd);\\n  console.log(dd.getFullYear());// 2020\\n  ```\\n\\n<hr id=\\\"user-content-object-math\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">Math 對象</a> \\n- 四捨五入\\n  ```js\\n  console.log(Math.round(3.49));// 3\\n  console.log(Math.round(3.51));// 4\\n  // 進位到小數點後面第二位\\n  var a = 3.7554;\\n  console.log(Math.round(a * 100) / 100);// 3.76\\n  ```\\n\\n- 隨機數\\n  ```js\\n  // 0 ~ 1(包含 0，不包含1)\\n  console.log(Math.random());\\n  // 如果要生成[a, b]之内的整數，就要使用公式\\n  // parseInt(Math.random() * (b - a + 1)) + a\\n  // [3, 8]\\n  console.log(parseInt(Math.random() * 6) + 3);\\n  ```\\n\\n- 最大與最小數\\n  ```js\\n  console.log(Math.max(44, 55, 33, 22));// 55\\n  console.log(Math.min(44, 55, 33, 22));// 22\\n  var arr = [3, 4, 4, 3, 2, 2, 1, 3, 5, 7, 4, 3];\\n  console.log(Math.max.apply(null, arr));// 7\\n  ```\\n\\n<hr id=\\\"user-content-regexp\\\" style=\\\"height: 4px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">正則表達式</a> \\n#### <a href=\\\"#user-content-top\\\">創建與使用</a>\\n- 創建表達式\\n  ```js\\n  // 創建正則表達式方法1(能用1則用1)\\n  // ^:代表開始 $:代表結束 \\\\d:代表數字 {6}:代表量詞\\n  var regexp1 = /^\\\\d{6}$/;\\n  // 創建正則表達式方法2(因為字符串內部反斜線需要兩個才能正常顯示)\\n  var regexp2 = new RegExp('^\\\\\\\\d{6}$');\\n  var str = '555666';\\n  // 正則表達式為引用類型值 regexp1 不等於 regexp2\\n  console.log(regexp1 === regexp2);// false\\n  console.log(typeof regexp1);// object\\n  ```\\n\\n- 相關方法\\n  - 修飾符\\n    - 修飾符也叫標誌 ```flags``` 可以使用來進行高級搜索\\n    - 說明\\n\\n    | 修飾符 | 意義 |\\n    | :-- | :-- |\\n    | ```i``` | 不區分大小寫搜索 |\\n    | ```g``` | 全局搜索 |\\n  - ```test()```\\n    - 測試某字符串是否匹配正則表達式，返回布林值\\n    - 範例\\n    ```js\\n    var regexp1 = /^\\\\d{6}$/;\\n    var str = '555666';\\n    console.log(regexp1.test(str));// true\\n    ```\\n  - ```exec()```\\n    - 根據正則表達式，在字符串中查找，返回數組或null\\n    - 範例\\n    ```js\\n    var str = 'abc123def456ghi789';\\n    // 若不加g則正則表達式不會記錄已搜索到哪\\n    var regexp = /\\\\d+/g;// +表示盡可能多的匹配\\n    // 使用循環語句来循環執行exec，尋找所有匹配結果\\n    var result;\\n    // null=false\\n    while (result = regexp.exec(str)) {\\n      console.log(result);\\n      /*\\n        ['123', index: 3, input: 'abc123def456ghi789', groups: undefined]\\n        ['456', index: 9, input: 'abc123def456ghi789', groups: undefined]\\n        ['789', index: 15, input: 'abc123def456ghi789', groups: undefined]\\n      */\\n    }\\n    console.log(result);// null\\n    ```\\n\\n<hr id=\\\"user-content-metacharacter\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">元字符</a> \\n- 說明\\n  | 元字符 | 功能 |\\n  | :-- | :-- |\\n  | ```\\\\d``` | 匹配一個數字 |\\n  | ```\\\\D``` | 匹配一個非數字 |\\n  | ```\\\\w``` | 匹配一個單字字符(字母、數字或底線) |\\n  | ```\\\\W``` | 匹配一個非單字字符 |\\n  | ```\\\\s``` | 匹配一個空白字符(空格、制表符、換行符) |\\n  | ```.```| 任意字符 |\\n\\n- 範例\\n  ```js\\n  // 1：某格式為：123-4567-890，使用正則表達式檢查某字符串是否符合此格式\\n  // 正則表達式\\n  var regexp1 = /^\\\\d\\\\d\\\\d-\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d\\\\d$/;\\n  // 待測試的字符串\\n  var str1 = '444-5555-000';\\n  console.log(regexp1.test(str1));\\n\\n  // 2：某格式為：□□□-□□□□-□□□，其中□表示字母數字或者底線，使用正則表達式檢查某字符串是否符合此格式\\n  // 正則表達式\\n  var regexp2 = /^\\\\w\\\\w\\\\w-\\\\w\\\\w\\\\w\\\\w-\\\\w\\\\w\\\\w$/;\\n  // 待測試的字符串\\n  var str2 = 'abc-__ab-123';\\n  console.log(regexp2.test(str2));\\n\\n  // 3：某格式為：123.45^67#89，使用正則表達式檢查某字符串是否符合此格式\\n  // 通常在不確定是否為特殊字符時,在前面加入反斜槓以保證不具特殊意義\\n  var regexp3 = /^\\\\d\\\\d\\\\d\\\\.\\\\d\\\\d\\\\^\\\\d\\\\d\\\\#\\\\d\\\\d$/;\\n  // 待测试的字符串\\n  var str3 = '666.66^66#66';\\n  console.log(regexp3.test(str3));\\n  ```\\n\\n<hr id=\\\"user-content-square-brackets\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">方括號表示法</a>\\n- 說明\\n  - 短橫 ```-``` 代表字符範圍\\n  - ```^``` 代表否定\\n\\n  | 元字符 | 等價的方括號表示法 |\\n  | :-- | :-- |\\n  | ```\\\\d``` | ```[0-9]``` |\\n  | ```\\\\D``` | ```[^0-9]``` |\\n  | ```\\\\w``` | ```[A-Za-z0-9_]``` |\\n  | ```\\\\W``` | ```[^A-Za-z0-9_]``` |\\n\\n- 範例\\n  ```js\\n  // 某格式為：第1位是一個字母，b表示本科生，y表示研究生，後面是7位数字，用正則表達式表示：\\n  // 測試字符串\\n  var str1 = 'm4444555';\\n  // 用正則表達式檢查\\n  console.log(/^[by]\\\\d{7}$/.test(str1));\\n\\n  // *******************************************\\n  // 驗證某字符串是否是5位字母，大小寫均可\\n  var str2 = 'abcde';\\n  var str3 = 'abcd5';\\n  console.log(/^[a-zA-Z]{5}$/.test(str2));\\n  console.log(/^[a-zA-Z]{5}$/.test(str3));\\n\\n  // 驗證某字符串是否是5位，僅由小寫字母、點構成\\n  var str4 = 'mnp..';\\n  var str5 = 'mnp.#';\\n  console.log(/^[a-z\\\\.]{5}$/.test(str4));\\n  console.log(/^[a-z\\\\.]{5}$/.test(str5));\\n\\n  // 驗證某字符串為4位小寫字母，且最後一位不能是m\\n  var str6 = 'abcd';\\n  var str7 = 'abcm';\\n  var str8 = 'ab1c';\\n  // 直接排除小寫英文裡面的m\\n  console.log(/^[a-z]{3}[a-ln-z]$/.test(str6));\\n  console.log(/^[a-z]{3}[a-ln-z]$/.test(str7));\\n  console.log(/^[a-z]{3}[a-ln-z]$/.test(str8));\\n  ```\\n\\n<hr id=\\\"user-content-string-regexp\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">字串相關方法</a>\\n- 說明\\n\\n  | 方法 | 簡介 |\\n  | :-- | :-- |\\n  | ```search()``` | 根據正則表達式進行匹配<br>返回首次匹配的索引，若無則返回-1 |\\n  | ```match()``` | 根據正則表達式進行匹配<br>返回一個數組，若無則返回null |\\n  | ```replace()``` | 使用替換字符串替換匹配到的字符串<br>可以使用正則表達式 |\\n  | ```split()``` | 分隔字串為數組<br>可以使用正則表達式 |\\n\\n- 範例\\n  ```js\\n  var str = 'abc123def4567ghi89';\\n  // search()方法 返回找到的第一個下標，若找不到則返回-1\\n  // 像indexOf()但不能用正則表達式\\n  var result1 = str.search(/\\\\d+/g);\\n  var result2 = str.search(/m/g);\\n  console.log(result1);// 3\\n  console.log(result2);// -1\\n\\n  // match()方法，返回查找到的數組，找不到就是null\\n  var result3 = str.match(/\\\\d+/g);\\n  console.log(result3);// [\\\"123\\\", \\\"4567\\\", \\\"89\\\"]\\n\\n  // replace()方法，進行替換; \\n  // 下面的+號是指將盡可能多的小寫字母轉換成*,若不寫+號將會把每一個小寫字母都換成*\\n  // +表示盡可能多連續匹配小寫字母\\n  var result4 = str.replace(/[a-z]+/g, '*');      \\n  console.log(result4);// *123*4567*89\\n\\n  // split()方法，進行字符串拆為數組\\n  var result5 = str.split(/\\\\d+/g);\\n  console.log(result5);// [\\\"abc\\\", \\\"def\\\", \\\"ghi\\\", \\\"\\\"]\\n  ```\\n\\n<hr id=\\\"user-content-measure-word\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">量詞</a>\\n- 說明\\n\\n  | 量詞 | 意義 |\\n  | :-- | :-- |\\n  | ```*``` | 匹配前一個表達式0次或多次，等價於 ```{0,}``` |\\n  | ```+``` | 匹配前一個表達式1次或多次，等價於 ```{1,}``` |\\n  | ```?``` | 匹配前一個表達式0次或1次，等價於 ```{0,1}``` |\\n  | ```{n}``` | n是一個正整數，匹配前一個字符剛好出現n次 |\\n  | ```{n,}``` | n是一個正整數，匹配前一個字符至少出現n次 |\\n  | ```{n,m}``` | n與m都是整數，匹配前一個字符至少n次最多m次 |\\n\\n- 範例\\n  ```js\\n  // 驗證字符串是否符合規則：11位數字，並且以1開頭\\n  var str1 = '13812345678';\\n  var str2 = '138123456789';\\n  var str3 = '38123456789';\\n  var regexp1 = /^1\\\\d{10}$/;\\n  console.log(regexp1.test(str1));\\n  console.log(regexp1.test(str2));\\n  console.log(regexp1.test(str3));\\n\\n  /*\\n    驗證字符串是否符合規則：\\n    以字母開頭，中間為任意位數字（最少1位）構成，以字母结尾\\n  */\\n  var str4 = 'a123123123b';\\n  var str5 = 'abcd';\\n  var str6 = 'a1b';\\n  var regexp2 = /^[a-zA-Z]\\\\d+[a-zA-Z]$/;\\n  console.log(regexp2.test(str4));\\n  console.log(regexp2.test(str5));\\n  console.log(regexp2.test(str6));\\n\\n  /*\\n    驗證某字符串是否符合規則：\\n    以www.開頭，中間為任意位的字符（字母數字或底線，至少一位），\\n    最後以.com结尾，也可以.com.cn结尾\\n  */\\n  var str7 = 'www.google.com';\\n  var str8 = 'www.sina.com.cn';\\n  var str9 = 'www.news.cn';\\n  var regexp3 = /^www\\\\.\\\\w+\\\\.com(\\\\.cn)?$/;//()代表這整串字符串 ?代表可有可無\\n  console.log(regexp3.test(str7));\\n  console.log(regexp3.test(str8));\\n  console.log(regexp3.test(str9));\\n  ```\\n\\n<hr id=\\\"user-content-const-let\\\" style=\\\"height: 4px;\\\">\\n\\n### ES6 第一部分\\n#### <a href=\\\"#user-content-top\\\">常數與變數</a>\\n#### const、let、var\\n- ```const``` 為聲明常量，一旦初始化，就不能重新赋值\\n  - 為了初始化後不希望重新賦值的情況設計的\\n  - 一旦聲明，就需立即初始化，無法留到以後賦值\\n  - 允許在不重新赋值的情况下修改它的值(引用類型)\\n  - 建議都先用 ```const``` 若需要重新賦值再改使用 ```let```\\n- ```var、let``` 為聲明變量，一旦初始化後，可以重新赋值\\n- 三者區別\\n  - 重複聲明\\n    - ```var``` 允許\\n    - ```let、const``` 不允许\\n  - 變量提升\\n    - ```var``` 會提升聲明到當前作用域的頂部\\n    - ```let、const``` 不會提升\\n    - 可以養成良好的習慣，先聲明後使用\\n  - 作用域\\n    - ```var``` 沒有塊級作用域\\n    - ```let、const``` 有塊級作用域\\n    - 會自動綁定該作用域，不受到外部作用域的影響\\n  - window 對象\\n    - ```var``` 聲明的變量，透過 ```function``` 聲明的函數，會自動變成 window 對象的屬性與方法\\n    - ```let、const``` 不會變成 window 對象\\n\\n<hr id=\\\"user-content-template-literals\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">模板字符串</a>\\n- 可透過樣板字面值來使用多行字串及字串內插功能\\n- 注意事項\\n  - 凡最终可以得出一個值的就可透過 ```${}``` 注入\\n  - 所有的空格、換行或縮進都會保留在輸出之中\\n- 範例\\n  ```js\\n  const age = 18;\\n  const introduce = `今年${age}歲`\\n  console.log(introduce);// 今年18歲\\n  ```\\n\\n<hr id=\\\"user-content-arrow-function\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">箭頭函數</a>\\n- 主要為簡化函數表達式\\n- 適用於非方法的函式，但不能被用作建構式\\n- 結構\\n  - ``` const/let 函數名 = 參數 => 函數體```\\n- 注意事項\\n  - 單個參數可以省略小括號\\n    - ```const add = x => { return x + 1; };```\\n  - 無參數或多個參數不能省略小括號\\n    - ```const add = () => { return 1 + 1; };```\\n    - ```const add = (x, y) => { return x + y; };```\\n  - 單行函數體可同時省略大括號和return\\n    - ```const add = (x, y) => x + y;```\\n  - 箭頭函數沒有自己的 ```this``` 對象(會往上一層找 ```this``` 對象)\\n    - 相當於嚴格模式 ```use strict``` 下的一般函數\\n  - 箭頭函數中沒有 ```arguments```\\n\\n<hr id=\\\"user-content-destructuring-assignment\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">解構賦值</a>\\n- 主要為解析某數據結構並方便取得結構中資料\\n- 數組或類數組(如```arguments```)的解構賦值\\n  - 依結構匹配實例\\n    ```js\\n    // 依索引值的完成赋值\\n    const [a, b, c] = [1, 2, 3];\\n    console.log(a, b, c);// 1 2 3\\n\\n    // 若不取該索引內容，可用逗號跳過\\n    const [a, [, , b], c] = [1, [2, 4, 5], 3];\\n    console.log(a, b, c);// 1 5 3\\n\\n    // 交換變量的值\\n    let x = 1;\\n    let y = 2;\\n    [x, y] = [y, x];\\n    console.log(x, y);// 2 1\\n    ```\\n  - 使用默認值實例\\n    - 若默認值為表達式，則為惰性求值\\n    - 當數組成員```嚴格等於(===)undefined```，對應的默認值才會生效\\n      ```js\\n      // 基本用法\\n      const [a = 1, b = 2] = [];\\n      console.log(a, b);// 1 2\\n\\n      // 生效條件範例\\n      const [a = 1, b = 2] = [3, null];\\n      console.log(a, b);// 3 null\\n\\n      /*\\n        默認值表達式為惰性求值\\n        先解構，若取值不到再去執行表達式\\n      */\\n      const func = () => {\\n        console.log('did');\\n        return 2;\\n      };\\n      const [x = func()] = [];// did\\n      console.log(x);// 2\\n      ```\\n- 對象的解構賦值\\n  - 依属性名完成赋值\\n    ```js\\n    // 若名稱與屬性名相同可省略名稱(下面兩行相等)\\n    const { age, username } = { username: 'test', age: 18 };\\n    const { age: age, username: username } = { username: 'test', age: 18 };\\n\\n    // 取別名\\n    const { age: age, username: uname } = { username: 'test', age: 18 };\\n    console.log(age, uname);// 18 test\\n    ```\\n  - 使用默認值實例\\n    - 若默認值為表達式，則為惰性求值\\n    ```js\\n    const { username = 'ZhangSan', age = 0 } = { username: 'test' };\\n    console.log(username, age);// test 0\\n    ```\\n  - 在已聲明的變量用於對象的解構賦值，則賦值需在小括號內進行\\n    ```js\\n    let x = 2;\\n    ({ x } = { x: 1 });// 瀏覽器會誤認{}為區塊非對象\\n    console.log(x);// 1\\n    ```\\n- 其他類型的解構賦值\\n  - 字符串的解構賦值\\n    ```js\\n    // 數組形式的解構賦值\\n    const [a, b, , , c] = 'hello';\\n    console.log(a, b, c);// h e o\\n\\n    // 對象形式的解構賦值\\n    const { 0: a, 1: b, length } = 'hello';\\n    console.log(a, b, length);// h e 5\\n    ```\\n  - 數值(或布林值)的解構賦值\\n    ```js\\n    // 會先將等號右邊轉為對象\\n    // = new Number(123);\\n    const { toString:b } = 123;\\n    console.log(b);// ƒ toString() { [native code] }\\n    ```\\n  - undefined 和 null 無法解構賦值\\n    ```js\\n    const { toString } = undefined;// Cannot destructure property 'toString'\\n    const { toString } = null;// Cannot destructure property 'toString'\\n    ```\\n\\n<hr id=\\\"user-content-object-function-promote\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">對象與函數的提升</a>\\n- 對象的簡潔表示法\\n  - 屬性簡潔表示法\\n    ```js\\n    // key值若與變量或常量名一樣，可只寫一個\\n    const age = 18;\\n    const person = {\\n      // age: age\\n      age\\n    };\\n    console.log(person);\\n    ```\\n  - 方法簡潔表示法\\n    ```js\\n    // 可以省略冒號和function關鍵字\\n    const person = {\\n      // speak: function () {}\\n      speak() {}\\n    };\\n    console.log(person);\\n    ```\\n- 函數的默認參數\\n  - 函數調用時沒有傳參數才使用默認參數\\n  - 注意事項\\n    - 不傳參數或傳undefined作為參數，默認值才會生效\\n    - 與前面相同默認值為表達式時是惰性求值的\\n    - 設置默認參數建議從最右邊開始(傳的參數較少時會讀取默認值)\\n    ```js\\n    const multiply = (x, y = 1) => x * y;\\n    console.log(multiply(2));// 2\\n\\n    const multiply2 = (x = 1, y) => x * y;\\n    console.log(multiply2(2));// NaN\\n    console.log(multiply2(2, undefined));// NaN\\n    ```\\n  - 經典範例(結合默認參數與解構賦值)\\n    ```js\\n    /*\\n      1.利用解構賦值特性方便調用屬性\\n      2.利用默認值特性給予該對象沒值時的默認值\\n      3.為避免傳進去的參數非對象,所以預設先給一個空對象(={})\\n        再利用第2點與第1點特性使用解構賦值給予對象屬性與默認值\\n    */\\n    const logUser = \\n    ({ username = 'test', age = 0, sex = 'male' } = {}) =>\\n    console.log(username, age, sex);\\n    logUser();// test 0 male\\n    ```\\n\\n<hr id=\\\"user-content-rest-parameter\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">剩餘參數</a>\\n- 表示不確定數量的參數，並將其視為一個數組\\n- 即使沒有多餘的參數，剩餘參數也會是一個空數組\\n- 注意事項\\n  - 箭頭函數的參數即使只有一個剩餘參數，也不能省略括號\\n    ```js\\n    // 不能省略小括號\\n    // 建議使用剩餘參數取代arguments\\n    const add = (...args) => {};\\n    ```\\n  - 剩餘參數只能為最後一個參數，之後不能再有其他參數，否則報錯\\n    ```js\\n    const add = (x, y, ...args) => {\\n      console.log(args);\\n    };\\n    ```\\n- 範例\\n  ```js\\n  // 搭配解構賦值\\n  // 數組\\n  const [num, ...args] = [1, 2, 3, 4];\\n  console.log(args);// (3) [2, 3, 4]\\n  // 對象\\n  const { x, y, ...z } = { a: 3, x: 1, y: 2, b: 4 };\\n  console.log(z);// {a: 3, b: 4}\\n  ```\\n\\n<hr id=\\\"user-content-spread-operator\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">展開運算符</a>\\n- 將可迭代的陣列或字串展開成多個元素\\n- 如果是物件的話則展開成多個key-value\\n- 數組展開範例\\n  ```js\\n  // 以前無展開運算符做法(因為Math.min()只能依序放入參數)\\n  console.log(Math.min.apply(null,[3, 1, 2]));\\n  // 現在做法\\n  console.log(Math.min(...[3, 1, 2]));\\n  // 相當於\\n  console.log(Math.min(3, 1, 2));\\n  // 合併數組\\n  const a = [1, 2];\\n  const b = [3];\\n  const c = [4, 5];\\n  console.log([1, ...b, 2, ...a, ...c, 3]);// (8) [1, 3, 2, 1, 2, 4, 5, 3]\\n  // 字串展開成數組\\n  console.log(...'test');// t e s t\\n  // 類數組轉換為數組\\n  function func() {\\n    console.log([...arguments]);\\n  }\\n  ```\\n- 對象展開範例\\n  - 對象不能直接展開，需在 ```{}``` 中展开\\n  - 在合併對象時，後者會覆蓋前者相同屬性\\n    ```js\\n    const apple = {\\n      color: '红色',\\n      shape: '球形',\\n      taste: '甜'\\n    };\\n    const pen = {\\n      color: '黑色',\\n      shape: '圆柱形',\\n      use: '寫字'\\n    };\\n    console.log({ ...apple, ...pen });\\n    // {color: '黑色', shape: '圆柱形', taste: '甜', use: '寫字'}\\n    ```\\n  - 非對象展開\\n    - 會自動轉換成對象，將其屬性羅列出來\\n    ```js\\n    console.log({ ...1 });// {}\\n    console.log({ ...undefined });// {}\\n    console.log({ ...null });// {}\\n    console.log({ ...true });// {}\\n    // 若是字符串，會自動轉換一個類似數組對象\\n    console.log({ ...'test' });// {0: \\\"t\\\", 1: \\\"e\\\", 2: \\\"s\\\", 3: \\\"t\\\"}\\n    ```\\n\\n<hr id=\\\"user-content-set-object\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">Set 物件</a>\\n- Set為一系列無序、無重複值的數據集合\\n- 類似數組不能像數組一樣通過字面量的方式創建 ```const s = new Set();```\\n- Set 對重複值的判斷基本遵循嚴格相等(===)，並且定義 NaN 等於 NaN\\n- 使用時機\\n  - 數組或字符串去重時\\n  - 無須訪問內部指定項，只需要遍歷時\\n  - 需使用 Set 提供的方法和屬性時\\n- Set 可傳入的參數\\n  - 數組\\n    ```js\\n    const s = new Set([1, 2, 1]);\\n    console.log(s);// Set(2) {1, 2}\\n    ```\\n  - 字符串\\n    ```js\\n    console.log(new Set('hi'));// Set(2) {'h', 'i'}\\n    ```\\n  - arguments\\n    ```js\\n    function func() {\\n      console.log(new Set(arguments));\\n    }\\n    func(1, 2, 1);// Set(2) {1, 2}\\n    ```\\n  - NodeList\\n    ```html\\n    <body>\\n      <p>1</p>\\n      <p>2</p>\\n      <p>3</p>\\n      <script>\\n        // Set(3) {p, p, p}\\n        console.log(new Set(document.querySelectorAll('p')));\\n      </script>\\n    </body>\\n    ```\\n  - Set\\n    ```js\\n    const s = new Set([1, 2, 1]);\\n    // 複製set\\n    console.log(new Set(s) === s);//false (引用類型)\\n    console.log(s);// Set(2) {1, 2}\\n    ```\\n- Set 屬性與方法\\n  - size 屬性\\n    ```js\\n    const s = new Set();\\n    s.add(1).add(2).add(2);\\n    console.log(s);// Set(2) {1, 2}\\n    console.log(s.size);// 2\\n    ```\\n  - add 方法\\n    ```js\\n    const s = new Set();\\n    s.add(1).add(2).add(2);\\n    console.log(s);// Set(2) {1, 2}\\n    ```\\n  - has 方法\\n    ```js\\n    const s = new Set();\\n    s.add(1).add(2).add(2);\\n    console.log(s.has(1));// true\\n    console.log(s.has(3));// false\\n    ```\\n  - delete 方法\\n    - delete 不存在的成員，不會報錯也不會輸出\\n    ```js\\n    const s = new Set();\\n    s.add(1).add(2).add(2);\\n    s.delete(1);\\n    s.delete(3);\\n    console.log(s);// Set(1) {2}\\n    ```\\n  - clear 方法\\n    ```js\\n    const s = new Set();\\n    s.add(1).add(2).add(2);\\n    s.clear();\\n    console.log(s);// Set(0) {size: 0}\\n    ```\\n  - forEach 方法\\n    - 第一個參數是回調函數，第二個參數指定了回調函數中this對象\\n    - 若回調函數是箭頭函數，則第二個參數不會影響該函數內的this指向\\n    - 會按照成員添加集合的順序遍歷\\n    ```js\\n    s.forEach( function (value, key, set) {\\n      // Set 中 value = key、set = s\\n      console.log(value, key, set === s);\\n      // 若為 function 則輸出 document(要回傳的對象)\\n      // 若為 箭頭函數 則輸出 window (因為該函數在全局定義)\\n      console.log(this);// #document\\n    }, document);\\n    ```\\n- 範例\\n  ```html\\n  <body>\\n    <p>1</p>\\n    <p>2</p>\\n    <p>3</p>\\n    <script>\\n      // 數組去重\\n      console.log([...new Set([1, 2, 1])]);// [1, 2]\\n      // 字符串去重\\n      console.log([...new Set('abbacbd')].join(''));// abcd\\n      // 遍歷\\n      const s = new Set(document.querySelectorAll('p'));\\n      s.forEach(function (elem) {\\n        elem.style.color = 'red';\\n        elem.style.backgroundColor = 'yellow';\\n      });\\n    </script>\\n  </body>\\n  ```\\n\\n<hr id=\\\"user-content-map-object\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">Map 物件</a>\\n- Map 是鍵值對的集合\\n- Map 判断键名是否相同基本遵循嚴格相等(===)，並且定義 NaN 等於 NaN\\n- 使用時機\\n  - 需要 key -> value 結構，或字符串以外的值做key\\n  - 模拟現實實體時，建議才使用對象\\n- Map 和對象的區别\\n  - 對象一般用字符串當鍵\\n  - Map 可將以下都作為鍵\\n    - 基本數據類型：number、string、boolean、undefined、null\\n    - 引用數據類型：對象（[]、{}、函数、Set、Map 等）\\n    ```js\\n    const m = new Map();\\n    m.set('name', 'test');\\n    m.set(true, 'true');\\n    m.set({}, 'object');\\n    m.set(new Set([1, 2]), 'set');\\n    m.set(undefined, 'undefined');\\n    /*\\n      {\\n        \\\"name\\\" => \\\"test\\\",\\n        true => \\\"true\\\",\\n        {…} => \\\"object\\\",\\n        Set(2) => \\\"set\\\",\\n        undefined => \\\"undefined\\\"\\n      }\\n    */\\n    console.log(m);\\n    ```\\n- Map 可傳入的參數\\n  - 二維數組，必须體現鍵和值\\n    ```js\\n    console.log(\\n      new Map([\\n        ['name', 'test'],\\n        ['age', 18]\\n      ])\\n    );// {\\\"name\\\" => \\\"test\\\", \\\"age\\\" => 18}\\n    ```\\n  - Set，必须體現鍵和值\\n    ```js\\n    const s = new Set([\\n      ['name', 'test'],\\n      ['age', 18]\\n    ]);\\n    console.log(new Map(s));// {\\\"name\\\" => \\\"test\\\", \\\"age\\\" => 18}\\n    console.log(s);// {Array(2), Array(2)}\\n    ```\\n  - Map\\n    ```js\\n    // 複製了一个新Map\\n    const m1 = new Map([\\n      ['name', 'test'],\\n      ['age', 18]\\n    ]);\\n    console.log(m1);// {\\\"name\\\" => \\\"test\\\", \\\"age\\\" => 18}\\n    const m2 = new Map(m1);\\n    console.log(m2, m2 === m1);// {\\\"name\\\" => \\\"test\\\", \\\"age\\\" => 18} false\\n    ```\\n- Map 屬性與方法\\n  - size 屬性\\n    ```js\\n    const m = new Map();\\n    m.set('age', 18).set(true, 'true').set('age', 20);\\n    console.log(m.size);// 2\\n    ```\\n  - set 方法\\n    - 添加的新成员，鍵若已存在，後添加的鍵值會覆蓋前面的\\n    ```js\\n    const m = new Map();\\n    m.set('age', 18).set(true, 'true').set('age', 20);\\n    console.log(m);// Map(2) {'age' => 20, true => 'true'}\\n    ```\\n  - get 方法\\n    - 獲取不存在的成員，返回 ```undefined```\\n    ```js\\n    const m = new Map();\\n    m.set('age', 18).set(true, 'true').set('age', 20);\\n    console.log(m.get('true'));// undefined\\n    console.log(m.get(true));// true\\n    ```\\n  - has 方法\\n    ```js\\n    const m = new Map();\\n    m.set('age', 18).set(true, 'true').set('age', 20);\\n    console.log(m.has('age'));// true\\n    console.log(m.has('true'));// false\\n    ```\\n  - delete 方法\\n    - delete 不存在的成員，不會報錯也不會輸出\\n    ```js\\n    const m = new Map();\\n    m.set('age', 18).set(true, 'true').set('age', 20);\\n    m.delete('age');\\n    m.delete('name');\\n    console.log(m);// Map(1) {true => 'true'}\\n    ```\\n  - clear 方法\\n    ```js\\n    const m = new Map();\\n    m.set('age', 18).set(true, 'true').set('age', 20);\\n    m.clear();\\n    console.log(m);// Map(0) {size: 0}\\n    ```\\n  - forEach 方法\\n    - 第一個參數是回調函數，第二個參數指定了回調函數中this對象\\n    - 若回調函數是箭頭函數，則第二個參數不會影響該函數內的this指向\\n    ```js\\n    const m = new Map();\\n    m.set('age', 18).set(true, 'true').set('age', 20);\\n    m.forEach(function (value, key, map) {\\n      console.log(value, key, map === m);\\n      console.log(this);// #document\\n    }, document);\\n    ```\\n- 範例\\n  ```html\\n  <body>\\n    <p>1</p>\\n    <p>2</p>\\n    <p>3</p>\\n    <script>\\n      const [p1, p2, p3] = document.querySelectorAll('p');\\n      const m = new Map([\\n        [\\n          p1,\\n          {\\n            color: 'red',\\n            backgroundColor: 'yellow',\\n            fontSize: '40px'\\n          }\\n        ],\\n        [\\n          p2,\\n          {\\n            color: 'green',\\n            backgroundColor: 'pink',\\n            fontSize: '40px'\\n          }\\n        ],\\n        [\\n          p3,\\n          {\\n            color: 'blue',\\n            backgroundColor: 'orange',\\n            fontSize: '40px'\\n          }\\n        ]\\n      ]);\\n\\n      // 利用每一個元素與css屬性的對應關係做遍歷\\n      m.forEach((propObj, elem) => {\\n        for (const p in propObj) {\\n          elem.style[p] = propObj[p];\\n        }\\n      });\\n    </script>\\n  </body>\\n  ```\\n\\n<hr id=\\\"user-content-iterator-for-of\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">Iterator 與 for-of 循環</a>\\n- Iterator 迭代器\\n  - 何謂 Iterator\\n    ```txt\\n    Symbol.iterator（可遍历对象的生成方法） ->\\n    it（可遍历对象） -> it.next() ->...（直到 done 为 true）\\n    ```\\n  - 為何需要 Iterator\\n    - Iterator 是一個統一的遍歷方式\\n    - 遍歷數組：for 循環 和 forEach方法\\n    - 遍歷對象：for in 循環\\n  - 以下為常用到 Iterator 的場合\\n    - for-of\\n    - 展開運算符\\n    - 解構賦值\\n    - Set 和 Map 的構造函數\\n  - 範例\\n    ```js\\n    const it = [1, 2][Symbol.iterator]();\\n    console.log(it.next()); // {value: 1, done: false}\\n    console.log(it.next()); // {value: 2, done: false}\\n    console.log(it.next()); // {value: undefined, done: true}\\n    ```\\n- for-of 循環\\n  - 為 iterator 的封裝\\n  - 只會遍歷出 done 為 false 時對應的 value 值\\n  - 範例\\n    - keys() 得到可遍歷對象索引值\\n    - values() 得到可遍歷對象內容\\n    - entries() 得到可遍歷對象索引+內容组成的數組\\n    ```js\\n    const arr = [1, 2, 3];\\n    // 依序列出 1 2 3\\n    for (const item of arr) {\\n      console.log(item);\\n    }\\n\\n    // 與 break、continue 一起使用\\n    // 依序列出 1 3\\n    for (const item of arr) {\\n      if (item === 2) {\\n        continue;\\n      }\\n      console.log(item);\\n    }\\n\\n    // entries() 得到可遍歷對象索引+內容组成的數組\\n    // 並利用解構賦值解構\\n    for (const [index, value] of arr.entries()) {\\n      console.log(index, value);\\n    }\\n    ```\\n- 原生可遍歷對象\\n  - 何謂原生可遍歷對象\\n    ```txt\\n    只要有 Symbol.iterator 方法，\\n    並且此方法可生成可遍歷對象，就是可遍歷\\n    也就可使用 for-of 循環来遍歷\\n    ```\\n  - 原生可遍歷對象大致以下幾種\\n    - Array\\n    - String\\n    - Set\\n    - Map\\n    - Arguments\\n    - NodeList\\n  - 建立非原生可遍歷對象的for-of\\n    ```js\\n    // 創建一般對象\\n    const person = { sex: 'male', age: 18 };\\n    // 實現next方法並含 value & done 屬性 {next()} {value,done}\\n    person[Symbol.iterator] = () => {\\n      let index = 0;\\n      return {\\n        next() {\\n          index++;\\n          if (index === 1) {\\n            return {\\n              value: person.age,\\n              done: false\\n            };\\n          } else if (index === 2) {\\n            return {\\n              value: person.sex,\\n              done: false\\n            };\\n          } else {\\n            return {\\n              done: true\\n            };\\n          }\\n        }\\n      };\\n    };\\n    // 依序列出 18 male\\n    for (const item of person) {\\n      console.log(item);\\n    }\\n    ```\\n<hr id=\\\"user-content-symbol\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">Symbol</a>\\n- 為ES6引入的基本數據類型\\n- 主要用途是表示獨一無二的值，避免對象屬性被覆蓋\\n- 基本語法\\n  ```js\\n  // 創建 Symbol\\n  let test1 = Symbol();\\n  let test2 = Symbol();\\n  console.log(test1);// Symbol()\\n  console.log(test1 === test2);// false\\n  ```\\n- 新增 Symbol 變量的敘述\\n  - 增加 Symbol 的可讀性\\n  ```js\\n  // 創建並敘述該Symbol\\n  let test1 = Symbol('test1');\\n  let test2 = Symbol('test2');\\n  console.log(test1);// Symbol(test1)\\n  console.log(test2);// Symbol(test2)\\n  ```\\n- Symbol 屬性的遍歷\\n  - Symbol作為對象屬性時，不會出現在for-in、for-of循環中\\n  ```js\\n  let test1 = Symbol('test1');\\n  let test2 = Symbol('test2');\\n  let a = {\\n    name: 'test3',\\n    [test1]: 18,\\n    [test2]: function(){}\\n  }\\n  // 只會輸出 name\\n  for(const i in a){\\n    console.log(i);\\n  }\\n  ```\\n- Symbol.for()\\n  - 可以創建相同的Symbol\\n  ```js\\n  // 全局註冊以'test'為描述符的Symbol\\n  // 若裡面參數非字串則自動轉換成字串\\n  let test1 = Symbol.for('test');\\n  let test2 = Symbol.for('test');\\n  console.log(test1);// Symbol(test)\\n  console.log(test1 === test2);// true\\n  ```\\n- Symbol.keyFor()\\n  - 查詢全局註冊Symbol的描述符\\n  ```js\\n  let test1 = Symbol.for('test');\\n  let key = Symbol.keyFor(test1);\\n  console.log(key);// test\\n  ```\\n- Symbol 轉換其他類型值\\n  ```js\\n  let s1 = Symbol('test');\\n  let s2 = String(s1);\\n  let s3 = Boolean(s1);\\n  let s4 = Number(s1);\\n  console.log(s2);// Symbol(test)\\n  console.log(s3);// true\\n  console.log(s4);// Cannot convert a Symbol value to a number\\n  ```\\n\\n<hr id=\\\"user-content-object-assign\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">新增的對象方法</a>\\n#### <a href=\\\"#user-content-top\\\">Object.assign</a>\\n- 合併到第一個参數中，返回合併後的第一個參數對象\\n- 語法 ```Object.assign(目標對象, 源對象1, 源對象2,...): 目標對象```\\n- 若要返回一個新對象則第一個參數放入空對象\\n- 基本用法\\n  ```js\\n  const apple = {\\n    color: '红色',\\n    shape: '圓形',\\n    taste: '甜'\\n  };\\n  const pen = {\\n    color: '黑色',\\n    shape: '圓柱形',\\n    use: '寫字'\\n  };\\n  // 後面會覆蓋前面屬性的值\\n  // {color: \\\"黑色\\\", shape: \\\"圓柱形\\\", taste: \\\"甜\\\", use: \\\"寫字\\\"}\\n  console.log(Object.assign(apple, pen));\\n  console.log(apple === Object.assign(apple, pen));// true\\n  ```\\n- 注意事項\\n  - 基本數據會先轉換為對象在合併\\n    ```js\\n    console.log(Object.assign({}, undefined));// {}\\n    console.log(Object.assign({}, null));// {}\\n    console.log(Object.assign({}, 1));// {}\\n    console.log(Object.assign({}, true));// {}\\n    console.log(Object.assign({}, 'str'));// {0: \\\"s\\\", 1: \\\"t\\\", 2: \\\"r\\\"}\\n    ```\\n\\n<hr id=\\\"user-content-object-keys-values-entries\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">Object.keys、Object.values、Object.entries</a>\\n- 基本用法\\n  ```js\\n  const person = {\\n    name: 'test',\\n    age: 18\\n  };\\n\\n  console.log(Object.keys(person));// (2) ['name', 'age']\\n  console.log(Object.values(person));// (2) ['test', 18]\\n  console.log(Object.entries(person));// (2) [Array(2), Array(2)]\\n  ```\\n- 與數組方法的區別\\n  - 對象的 keys()、values()、entries() 是構造函數並返回數組\\n  - 數組的 keys()、values()、entries() 是實例方法並返回 Iterator\\n\\n<hr id=\\\"user-content-string-includes\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">新增的字符串方法</a>\\n#### <a href=\\\"#user-content-top\\\">includes</a>\\n- 用於判斷字符串中是否含有字符\\n- 第二個參數表示開始搜索的位置，默認為0\\n- 用法\\n  ```js\\n  // 判斷字符串中是否含有字符\\n  console.log('abc'.includes('a'));// true\\n  console.log('abc'.includes('ab'));// true\\n  console.log('abc'.includes('bc'));// true\\n  console.log('abc'.includes('ac'));// false\\n  // 第二個參數表示開始搜索的位置，默認為0\\n  console.log('abc'.includes('a'));// true\\n  console.log('abc'.includes('a', 0));// true\\n  console.log('abc'.includes('a', 1)); // false\\n  ```\\n\\n<hr id=\\\"user-content-string-padstart-padend\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">padStart、padEnd</a>\\n- 用於補全字符串長度\\n- ```padStart``` 往前補全字符串\\n- ```padEnd``` 往後補全字符串\\n- 注意事項\\n  - 若長度大於等於最大長度，會直接返回原字符串\\n  - 若補全的與原本的長度和超過最大長度，會截去部分的補全字符串\\n  - 如果省略第二個参数，默認使用空格補全長度\\n- 用法\\n  ```js\\n  // 補全字符串長度\\n  console.log('x'.padStart(5, 'ab'));// ababx\\n  console.log('x'.padEnd(5, 'ab'));// xabab\\n  console.log('x'.padEnd(4, 'ab'));// xaba\\n  // 長度大於等於最大長度，會直接返回原字符串\\n  console.log('xxx'.padStart(2, 'ab'));// xxx\\n  console.log('xxx'.padEnd(2, 'ab'));// xxx\\n  // 超過最大長度會截去部分的補全字符串\\n  console.log('abc'.padStart(10, '0123456789'));// 0123456abc\\n  console.log('abc'.padEnd(10, '0123456789'));// abc0123456\\n  // 如果省略第二個参数，默認使用空格補全長度\\n  console.log('x'.padStart(4));//    x\\n  console.log('x'.padEnd(4));// x   \\n  ```\\n\\n\\n<hr id=\\\"user-content-string-trimstart-trimend\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">trimStart、trimEnd</a>\\n- 清除字符串的首或尾空格，中間的空格不會清除\\n- 用法\\n  ```js\\n  const s = '  a b c  ';\\n  // 清除字串前面所有空格\\n  // trimStart = trimLeft\\n  console.log(s.trimStart());// a b c  \\n  console.log(s.trimLeft());// a b c  \\n  // 清除字串後面所有空格\\n  // trimEnd = trimRight\\n  console.log(s.trimEnd());//  a b c\\n  console.log(s.trimRight());//  a b c\\n  ```\\n\\n<hr id=\\\"user-content-array-includes\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">新增的數組方法</a>\\n#### <a href=\\\"#user-content-top\\\">includes</a>\\n- 判斷數組中是否有該成員\\n- 第二個參數為搜索的起始位置，默認為0\\n- 遵循嚴格相等(===)，並且 NaN 等於 NaN\\n- 基本用法\\n  ```js\\n  // 判斷數組中是否有該成員\\n  console.log([1, 2, 3].includes('2'));// false\\n  console.log([1, 2, 3].includes(2));// true\\n  // 第二個參數為搜索的起始位置，默認為0\\n  console.log([1, 2, 3].includes(2, 2));// false\\n  // 遵循嚴格相等(===)，並且 NaN 等於 NaN\\n  console.log([1, 2, NaN].includes(NaN));// true\\n  ```\\n\\n<hr id=\\\"user-content-array-from\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">Array.from</a>\\n- 將其他數據類型轉換成數組\\n- 第一個參數放入要轉換數組的數據\\n- 第二個參數放入函數用来對每個元素進行處理並將值放入返回的數組\\n- 第三個參數為function裡面的this對象(若為箭頭函數則無this對象)\\n- 以下條件皆可轉換成數組\\n  - 可遍歷的 ```Array、String、Set、Map、NodeList、arguments```\\n  - 擁有 length 属性的對象 ```const test = {a:1, b:2, c:3, length:3}```\\n- 用法\\n  ```js\\n  console.log(Array.from('str'));// (3) ['s', 't', 'r']\\n  // 第二個參數放入函數用来對每個元素進行處理\\n  console.log(Array.from('12', value => value * 2));// [2, 4]\\n  // 第三個參數為function裡面的this對象\\n  Array.from(\\n    '12',\\n    function (value) {\\n      console.log(this);// #document\\n      console.log(value);// 依序印出 1 2\\n    },\\n    document\\n  );\\n  ```\\n\\n<hr id=\\\"user-content-array-find-findindex\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">find & findIndex</a>\\n- ```find()```：滿足條件之後立即返回其值\\n- ```findIndex()```：滿足條件後立即返回其索引\\n- 第一個參數放入函數用来對每個元素進行判斷與回傳\\n  - 裡面函數參數依序為：內容值、索引值、數組對象\\n- 第二個參數為function裡面的this對象(若為箭頭函數則無this對象)\\n- 用法\\n  ```js\\n  const testArray = [1, 5, 10, 15];\\n  // find()\\n  console.log(\\n    testArray.find(function (value, index, arr) {\\n      console.log(testArray === arr);// true\\n      console.log(this);// #document\\n      console.log(value, index);// 輸出內容值與索引值\\n      return value > 9;\\n    }, document)\\n  );// 10，循環到10立即返回內容值\\n\\n  // findIndex()\\n  console.log(\\n    testArray.findIndex(function (value, index, arr) {\\n      console.log(testArray === arr);// true\\n      console.log(this);// #document\\n      console.log(value, index);// 輸出內容值與索引值\\n      return value > 9;\\n    }, document)\\n  );// 2，循環到10立即返回索引值\\n  ```\\n\\n<hr id=\\\"user-content-promise-introduce\\\" style=\\\"height: 4px;\\\">\\n\\n### ES6 第二部分\\n#### <a href=\\\"#user-content-top\\\">Promise</a>\\n#### <a href=\\\"#user-content-top\\\">簡介</a>\\n- ```Promise``` 是異步操作的解決方案\\n- 一般用来解決層層嵌套的 ```回調地獄``` 問題\\n- 回調地獄例子\\n  ```js\\n  // 每一次移動完成自動調用結束函數\\n  const move = (el, { x = 0, y = 0 } = {}, end = () => {}) => {\\n    el.style.transform = `translate3d(${x}px, ${y}px, 0)`;\\n    el.addEventListener(\\n      'transitionend',\\n      () => {\\n        end();\\n      },\\n      false\\n    );\\n  };\\n  const boxEl = document.getElementById('box');\\n  // 因每一次都需調用結束函數進行下一次移動而造成回調地獄\\n  document.addEventListener(\\n    'click',\\n    () => {\\n      move(boxEl, { x: 150 }, () => {\\n        move(boxEl, { x: 150, y: 150 }, () => {\\n          move(boxEl, { y: 150 }, () => {\\n            move(boxEl, { x: 0, y: 0 });\\n          });\\n        });\\n      });\\n    },\\n    false\\n  );\\n  ```\\n\\n<hr id=\\\"user-content-promise-basic-use\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">基本用法</a>\\n- 1.實例化構造函數生成實例對象\\n  ```js\\n  const p = new Promise(() => {});\\n  ```\\n- 2.```Promise``` 三種狀態\\n  - 實例化後是 ```pending（未完成）```\\n  - 執行 ```resolve```，變成 ```fulfilled(resolved)```，已成功\\n  - 執行 ```reject```，變成 ```rejected```，已失败\\n  ```js\\n  // resolve、reject 可以改名\\n  const p = new Promise((resolve, reject) => {\\n    // 通常reject會傳error\\n    reject(new Error('reason'));\\n  });\\n\\n  p.then(\\n    data => {\\n      // 會得到 resolve 的參數\\n      console.log('success', data);\\n    },\\n    err => {\\n      // 會得到 reject 的 err 參數\\n      console.log('error', err);\\n    }\\n  );\\n  console.log(p);// Promise\\n  ```\\n<hr id=\\\"user-content-promise-instance-function-then\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">實例方法</a>\\n#### <a href=\\\"#user-content-top\\\">then</a>\\n- ```resolved``` 時，執行 ```then``` 的第一個回調函數\\n- ```rejected``` 時，執行 ```then``` 的第二個回調函數\\n- 執行後返回值\\n  - 無返回則 ```return undefined``` 並返回成功狀態 Promise 對象\\n  - return 後面的數據，會用 Promise 包裝\\n- 範例  \\n  ```js\\n  const p = new Promise((resolve, reject) => {\\n    // resolve();\\n    reject();\\n  });\\n\\n  p.then(\\n    () => {\\n      // 當 resolve() 時執行該函數\\n    },\\n    () => {\\n      // 當 reject() 時執行該函數\\n\\n      // 若要返回錯誤狀態\\n      // return new Promise((resolve, reject) => {\\n      //   reject('reason');\\n      // });\\n\\n      // return 123;\\n      // 與以下代碼等價(若只有resolve則reject可省略)\\n      // return new Promise(resolve => {\\n      //  // 默认返回的永远都是成功状态的 Promise 对象\\n      //   resolve(123);\\n      // });\\n      return 123;\\n    }\\n  )\\n  .then(\\n    data => {\\n      console.log('success2', data);// 123\\n      // 等價於 return undefined;\\n      return new Promise(resolve => {\\n        resolve(undefined);\\n      });\\n    },\\n    err => {\\n      console.log('err2', err);\\n    }\\n  )\\n  .then(\\n    data => {\\n      console.log('success3', data);// undefined\\n    },\\n    err => {\\n      console.log('err3', err);\\n    }\\n  );\\n  ```\\n\\n<hr id=\\\"user-content-promise-instance-function-catch\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">catch</a>\\n- 專門用來處理 ```rejected``` 狀態\\n- 是 ```then``` 的特例 ```then(null, err => {});```\\n- 用法\\n  ```js\\n  new Promise((resolve, reject) => {\\n    reject('reason');\\n  }).then(data => {\\n    // 因為是reject所以第一個函數不會輸出\\n    // 並且無reject完後的執行函數所以會跳到catch\\n    console.log(data);\\n  })\\n  // .then(null, err => {\\n  //   console.log(err);\\n  // });\\n  // 注意!若沒發生錯誤則會執行下一個then並跳過catch\\n  .catch(err => {\\n    console.log(err);// reason\\n    // 也可以拋出錯誤\\n    throw new Error('reason');\\n  }).then(data => {\\n    console.log('test',data); \\n  }).catch(err => {\\n    console.log('err', err);// err Error: reason\\n  });\\n  ```\\n\\n<hr id=\\\"user-content-promise-instance-function-finally\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">finally</a>\\n- 不論是 resolve 或 reject 都會執行，不變化不會執行\\n- 是 ```then``` 的特例，\\n  - 不會取得參數並執行完函數後將前面的參數往後拋\\n  - 等價於以下\\n    ```js\\n    .then(\\n      result => {\\n        return result;\\n      },\\n      err => {\\n        return new Promise((resolve, reject) => {\\n          reject(err);\\n        });\\n      }\\n    )\\n    ```\\n- 通常用在最後執行結束的程式\\n- 用法\\n  ```js\\n  new Promise((resolve, reject) => {\\n    resolve(123);\\n    // reject('reason');\\n  })\\n  .finally(data => {\\n    // 若在中間也不會有任何的參數\\n    console.log(data);// undefined\\n  })\\n  .then(result =>{\\n    console.log(result);// 123\\n  })\\n  .catch(err => {});\\n  ```\\n\\n<hr id=\\\"user-content-promise-constructor-function-resolve\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">構造函數方法</a>\\n#### <a href=\\\"#user-content-top\\\">Promise.resolve</a>\\n- 為成功狀態 ```Promise``` 的一種簡寫形式\\n- 會先執行 ```resolve``` 括號內的東西\\n- 以下兩者等價相等\\n  ```js\\n  new Promise(resolve => resolve('foo'));\\n  // 簡寫\\n  Promise.resolve('foo');\\n  ```\\n- 一般參數(預設為成功狀態所以直接輸出)\\n  ```js\\n  Promise.resolve('foo').then(data => {\\n    console.log(data);// foo\\n  });\\n  ```\\n- ```Promise``` 作為參數\\n  - 會根據 ```resolve``` 括號內的 ```Promise 對象```的狀態變化來決定\\n  ```js\\n  const p1 = new Promise((resolve,reject) => {\\n    setTimeout(resolve, 1000, '執行了');\\n    // 上面等價於下面\\n    // setTimeout(() => {\\n    //   resolve('我执行了');\\n    // }, 1000);\\n  });\\n  Promise.resolve(p1).then(data => {\\n    console.log(data);// 執行了\\n  });\\n  // 等價於\\n  p1.then(data => {\\n    console.log(data);// 執行了\\n  });\\n  console.log(Promise.resolve(p1) === p1);// true\\n  ```\\n- ```then 方法對象``` 作為參數\\n  - 會轉為 ```Promise 對象```，並立即執行 ```thenable 對象```的 ```then 方法```\\n  ```js\\n  const thenable = {\\n    then(resolve, reject) {\\n      resolve('data');\\n    }\\n  };\\n  // Promise.resolve(thenable) 整個會轉為 Promise 對象\\n  // 轉完 Promise 對象後直接執行 then 方法\\n  // 若裡面觸發 reject 則會到 err \\n  Promise.resolve(thenable).then(\\n    data => console.log(data),// data\\n    err => console.log(err)\\n  );\\n  console.log(Promise.resolve(thenable));// Promise {<pending>}\\n  ```\\n\\n<hr id=\\\"user-content-promise-constructor-function-reject\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">Promise.reject</a>\\n- 為失敗狀態 ```Promise``` 的一種簡寫形式\\n- 以下兩者等價相等\\n  ```js\\n  new Promise((resolve, reject) => {\\n    reject('reason');\\n  });\\n  // 等價於\\n  Promise.reject('reason');\\n  ```\\n- 用法\\n  ```js\\n  const p1 = new Promise((resolve,reject) => {\\n    setTimeout(resolve, 1000, '執行了');\\n  });\\n  // 不管 resolve、reject 都會跳到catch(rejected)\\n  Promise.reject(p1)\\n  .then(data => console.log(data))\\n  .catch(err => {\\n    // 若 p1 狀態為 resolve 則會保持 promise 對象\\n    // 若 p1 狀態為 reject 則會輸出 \\\"執行了\\\"\\n    console.log(err);//Promise {<pending>}\\n    return err;// 將 p1 的 resolve promise 對象往後拋\\n  })\\n  .then(data => console.log(data));// 執行了\\n  ```\\n\\n<hr id=\\\"user-content-promise-constructor-function-all\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">Promise.all</a>\\n- 可觀測多個 ```Promise 實例對象```的狀態變化\\n- 傳入多個 ```Promise 實例```並包裝成一個 ```新的 Promise 實例```返回\\n- 所有實例狀態都變成 ```resolved```，最终狀態才會變成 ```resolved```\\n- 只要有一個變成 ```rejected```，最終狀態就變成 ```rejected```(只會輸出```第一個 rejected 結果```)\\n- 不管中間成功或失敗都會依序執行\\n- 參數若為空數組，最終狀態為 ```resolved```\\n  ```js\\n  const p = Promise.all([]);\\n  p.then(\\n    data => {\\n      console.log(data);// []\\n    }\\n  );\\n  ```\\n- 用法\\n  ```js\\n  const delay = ms => {\\n    return new Promise(resolve => {\\n      setTimeout(resolve, ms);\\n    });\\n  };\\n  const p1 = delay(1000).then(() => {\\n    console.log('p1 完成了');\\n    return 'p1';\\n  });\\n  const p2 = delay(2000).then(() => {\\n    console.log('p2 完成了');\\n    return 'p2';\\n  });\\n  const p = Promise.all([p1, p2]);\\n  p.then(\\n    data => {\\n      // 只有所有都成功時才會輸出\\n      console.log(data);// [\\\"p1\\\", \\\"p2\\\"]\\n    },\\n    err => {\\n      // 只要一個是失敗就直接輸出(並且只會輸出第一個失敗)\\n      console.log(err);\\n    }\\n  );\\n  ```\\n\\n<hr id=\\\"user-content-promise-constructor-function-race\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">Promise.race</a>\\n- 狀態取決於多個對象中第一個完成的 ```Promise 實例對象```\\n- 不管中間成功失敗都會依序執行\\n```js\\nconst delay = ms => {\\n  return new Promise(resolve => {\\n    setTimeout(resolve, ms);\\n  });\\n};\\nconst p1 = delay(1000).then(() => {\\n  return 'p1';\\n});\\nconst p2 = delay(2000).then(() => {\\n  return Promise.reject('reason');\\n});\\nconst racePromise = Promise.race([p1, p2]);\\nracePromise.then(\\n  data => {\\n    console.log(data);// 只會輸出第一個成功的:p1\\n  },\\n  err => {\\n    console.log(err);\\n  }\\n);\\n```\\n\\n<hr id=\\\"user-content-promise-constructor-function-allsettled\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">Promise.allSettled</a>\\n- 不管中途為成功或失敗永遠都是成功的\\n- 並會忠實地記錄所有 ```Promise 實例對象```的回傳\\n```js\\nconst delay = ms => {\\n  return new Promise(resolve => {\\n    setTimeout(resolve, ms);\\n  });\\n};\\nconst p1 = delay(1000).then(() => {\\n  return 'p1';\\n});\\nconst p2 = delay(2000).then(() => {\\n  return Promise.reject('p2');\\n});\\nconst allSettledPromise = Promise.allSettled([p1, p2]);\\nallSettledPromise.then(data => {\\n  console.log('success', data);\\n});\\n/*\\n  success (2) [{…}, {…}]\\n    0: {status: 'fulfilled', value: 'p1'}\\n    1: {status: 'rejected', reason: 'p2'}\\n    length: 2\\n    [[Prototype]]: Array(0)\\n*/\\n```\\n\\n<hr id=\\\"user-content-promise-constructor-function-any\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">Promise.any</a>\\n- 只有全部 ```Promise 實例對象```都是失敗，狀態才會轉變為失敗\\n- 只要有一個 ```Promise 實例對象```是成功\\n  - 則狀態轉變為成功\\n  - 取得該實例對象回傳(不再理會其他實例對象回傳)\\n  - 不管中間成功或失敗都會依序執行\\n  - 若同時則按照文檔流順序\\n- 可用在哪張圖片加載比較快就用哪張圖片\\n```js\\nconst delay = ms => {\\n  return new Promise(resolve => {\\n    setTimeout(resolve, ms);\\n  });\\n};\\nconst p1 = delay(1000).then(() => {\\n  return 'p1';\\n});\\nconst p2 = delay(2000).then(() => {\\n  return 'p2';\\n});\\nconst anyPromise = Promise.any([p1, p2]);\\nanyPromise.then(data => {\\n  console.log('success', data);\\n});\\n```\\n\\n<hr id=\\\"user-content-promise-constructor-function-notice\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">注意事項</a>\\n- ```Promise.all``` / ```race``` / ```allSettled``` 的參數問題\\n  - 若參數非 ```Promise 數組```，會將數組元素轉變成 ```Promise 對象```\\n  - 任何可遍歷的都可以作为參數\\n    - ```Array、String、Set、Map、NodeList、arguments```\\n  ```js\\n  Promise.all([1, 2, 3]).then(datas => {\\n    console.log(datas);// [1, 2, 3]\\n  });\\n  // 上下等價\\n  Promise.all([\\n    Promise.resolve(1),\\n    Promise.resolve(2),\\n    Promise.resolve(3)\\n  ]).then(datas => {\\n    console.log(datas);\\n  });\\n  ```\\n- ```Promise.all``` / ```race``` / ```allSettled``` 的錯誤處理\\n  - 錯誤一旦被個別處理，就不會再處理一遍\\n  - 若有多個錯誤，第一個錯誤若個別處理則會延續至第二個\\n  ```js\\n  const delay = ms => {\\n    return new Promise(resolve => {\\n      setTimeout(resolve, ms);\\n    });\\n  };\\n\\n  const p1 = delay(1000).then(() => {\\n    return Promise.reject('reason p1');\\n  })\\n  .catch(err => {});\\n\\n  const p2 = delay(2000).then(() => {\\n    return Promise.reject('reason p2');\\n  });\\n\\n  const allPromise = Promise.all([p1, p2]);\\n  allPromise\\n    .then(datas => {\\n      console.log(datas);\\n    })\\n  .catch(err => console.log(err));// reason p2\\n  ```\\n\\n<hr id=\\\"user-content-promise-example\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">應用範例</a>\\n```html\\n<body>\\n  <img\\n    src=\\\"https://one.jpg\\\"\\n    alt=\\\"\\\"\\n    id=\\\"img\\\"\\n  />\\n\\n  <script>\\n    // 異步加載圖片\\n    const loadImgAsync = url => {\\n      return new Promise((resolve, reject) => {\\n        const img = new Image();\\n        // 加載完時調用\\n        img.onload = () => {\\n          resolve(img);\\n        };\\n        // 加載錯誤時調用\\n        img.onerror = () => {\\n          reject(new Error(`Could not load image at ${url}`));\\n        };\\n        // 開始加載\\n        img.src = url;\\n      });\\n    };\\n\\n    const imgDOM = document.getElementById('img');\\n    loadImgAsync('https://two.jpg')\\n      .then(img => {\\n        // 如果加載成功則一秒鐘後替換掉原圖片\\n        setTimeout(() => {\\n          imgDOM.src = img.src;\\n        }, 1000);\\n      })\\n      .catch(err => {\\n        // 否則輸出失敗\\n        console.log(err);\\n      });\\n  </script>\\n</body>\\n```\\n\\n<hr id=\\\"user-content-class\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">Class</a>\\n#### <a href=\\\"#user-content-top\\\">簡介</a>\\n- 作為 JavaScript 現有原型程式(prototype-based)繼承的語法糖\\n- 使用更簡潔的語法來建立物件和處理繼承\\n- 類可看做是對象的模板，可以創建許多不同的對象\\n- 基本用法\\n  - 類名一般為大寫\\n  - 實例化時會執行構造方法，所以必須有構造方法，但可以不寫\\n  - 必須使用 ```new``` 關鍵字創建實例對象\\n    ```js\\n    // 類名一般為大寫\\n    class Person {\\n      // 實例化時會執行構造方法\\n      constructor(name, age) {\\n        // this 代表實例對象，定義的是屬性或方法\\n        // 一般在構造函數中定義屬性，方法不在裡面定義\\n        this.name = name;\\n        this.age = age;\\n        // this.speak = () => {};\\n      }\\n      // 所有實例的共享方法(在構造方法定義方法會佔內存)\\n      speak () {\\n        console.log('speak');\\n      }\\n    }\\n    // 必須使用 new 關鍵字創建實例對象\\n    const ls = new Person('LS', 28);\\n    ```\\n\\n<hr id=\\\"user-content-class-definition-form\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">定義形式</a>\\n- 聲明形式\\n  ```js\\n  class Person {\\n    constructor() {}\\n    speak() {}\\n  }\\n  // es5\\n  function Person(){}\\n  Person.prototype.speak = function (){}\\n  ```\\n- 表達式形式\\n  ```js\\n  const Person = class {\\n    constructor() {\\n      console.log('constructor');\\n    }\\n    speak() {}\\n  };\\n  // es5\\n  const Person = function () {};\\n  ```\\n- IIFE\\n  ```js\\n  // 立即執行的匿名類\\n  new class {\\n    constructor() {\\n      console.log('constructor');\\n    }\\n  }();\\n  // es5\\n  // 立即執行的匿名構造函數\\n  (function () {\\n    console.log('function');\\n  })();\\n  ```\\n\\n<hr id=\\\"user-content-class-property-function\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">屬性與方法</a>\\n- 實例屬性與方法\\n  ```js\\n  class Person {\\n    // 在class內可以直接定義屬性(但不能加const與let)\\n    age = 0;\\n    sex = 'male';\\n    // 建議還是使用建構式定義屬性(若與上面屬性重複則以建構式屬性為主)\\n    constructor(name, sex) {\\n      this.name = name;\\n      this.sex = sex;\\n    }\\n    /*\\n      實例方法就是值為函數的特殊屬性\\n      建議別使用此創建方式: getSex = function(){}\\n      因為每實例一個就會給予一個新的函數會占內存\\n    */\\n    getSex () {\\n      return this.sex;\\n    };\\n  }\\n  // 也可以直接定義新增屬性\\n  const p = new Person('test');\\n  p.heigh = 180;\\n  ```\\n- 靜態屬性與方法\\n  - 屬於該類的屬性與方法\\n  - 實例會調用實例的方法，類會調用類的方法\\n  - 若沒宣告靜態屬性 ```name``` 而直接調用則會輸出類名\\n  ```js\\n  class Person {\\n    // 定義實例屬性\\n    constructor(name) {\\n      this.name = name;\\n    }\\n    // 定義實例方法\\n    speak () {\\n      console.log(this.name)\\n      return this.name;\\n    };\\n\\n    // 定義類的屬性\\n    static name = 'test2';\\n    // 定義類的方法\\n    static speak() {\\n      console.log('可以說話');\\n      // this 指向類\\n      console.log(this);\\n    }\\n  }\\n  // 也可以在外宣告\\n  Person.height = 180;\\n\\n  const p = new Person('test');\\n  p.speak();// test\\n  Person.speak();// 可以說話 class Person {...}\\n  console.log(Person.name);// test2\\n  ```\\n\\n<hr id=\\\"user-content-class-private-property-function\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">私有屬性與方法</a>\\n- 一般屬性與方法是公開的，有被修改的可能，造成意想不到的錯誤\\n- 以下為常見的兩種解決方法\\n  - 第一種：開頭 ```_``` 表示私有\\n    ```js\\n    class Person {\\n      constructor(name) {\\n        this._name = name;\\n      }\\n\\n      speak() {\\n        console.log('speak');\\n      }\\n\\n      getName() {\\n        return this._name;\\n      }\\n    }\\n    ``` \\n  - 第二種：將私有屬性或方法移出類\\n    ```js\\n    (function () {\\n      let name = '';\\n      class Person {\\n        constructor(username) {\\n          name = username;\\n        }\\n\\n        speak() {\\n          console.log('speak');\\n        }\\n\\n        getName() {\\n          return name;\\n        }\\n      }\\n\\n      window.Person = Person;\\n    })();\\n    const p = new Person('Test');\\n    console.log(p.name);// undefined\\n    console.log(p.getName());// Test\\n    ``` \\n\\n<hr id=\\\"user-content-class-extends\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">extends</a>\\n- 子類使用 ```extends``` 關鍵字繼承父類\\n- 子類會繼承父類的全部屬性與方法\\n- 若子類與父類有一樣的屬性與方法則會覆蓋父類\\n  - 有個例外狀況：\\n    ```js\\n    // 若子類方法寫法為\\n    say(){}\\n    // 父類方法寫法為\\n    say = function(){}\\n    // 則子類調用 say 方法會使用父類 say 方法\\n    ```\\n- 範例\\n  ```js\\n  // 創建父類\\n  class Person {\\n    constructor(name, sex) {\\n      this.name = name;\\n      this.sex = sex;\\n\\n      this.say = function () {\\n        console.log('say');\\n      };\\n    }\\n\\n    speak() {\\n      console.log('speak');\\n    }\\n\\n    static speak() {\\n      console.log('static speak');\\n    }\\n  }\\n  Person.version = '1.0';\\n\\n  // 創建子類\\n  class Programmer extends Person {\\n    constructor(name, sex, feature) {\\n      // this 操作不能放在 super 前面\\n      super(name, sex);\\n      // this.feature = feature;\\n    }\\n    // 子類覆蓋父類的屬性與方法\\n    // 同名覆盖實例方法\\n    speak() {\\n      console.log('Programmer speak');\\n    }\\n    // 同名覆盖靜態方法\\n    static speak() {\\n      console.log('Programmer static speak');\\n    }\\n  }\\n  // 同名覆盖靜態屬性\\n  Programmer.version = '2.0';\\n\\n  const zs = new Programmer('zs', '男', '強');\\n  zs.say();// say\\n  zs.speak();// Programmer speak\\n  Programmer.speak();// Programmer static speak\\n  console.log(Programmer.version);// 2.0\\n  ```\\n\\n<hr id=\\\"user-content-class-super\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">super</a>\\n- 作為函數調用\\n  - 代表父類的構造方法，只能用在子類的構造方法中\\n  - ```super``` 雖然代表父類的構造方法，但父類內部的 ```this``` 指向子類的實例\\n  ```js\\n  class Person {\\n    constructor(name) {\\n      this.name = name;\\n      console.log(this);\\n    }\\n  }\\n\\n  class Programmer extends Person {\\n    constructor(name, sex) {\\n      super(name, sex);\\n    }\\n  }\\n  // 創建 Programmer 實例後，父類 super 會輸出 Programmer\\n  new Programmer();\\n  ```\\n- 作為對象使用\\n  -  ```super``` 代表父類的原型對象 ```父類.prototype```\\n  - 透過 ```super``` 調用父類的方法時，内部的 this 指向當前的子類實例\\n  - 在靜態方法中使用 ```super```\\n    - 指向父類，而非父类的原型對象(prototype)\\n    - 透過 ```super``` 調用父類方法時，内部的 ```this``` 指向子類非子類的實例\\n  ```js\\n  class Person {\\n    constructor(name) {\\n      this.name = name;\\n      console.log(this);\\n    }\\n\\n    speak() {\\n      console.log('speak');\\n      console.log(this);// 若是子類呼叫則輸出子類實例\\n    }\\n\\n    static speak() {\\n      console.log('Person speak');\\n      console.log(this);// 若是子類呼叫則輸出子類原型\\n    }\\n  }\\n\\n  class Programmer extends Person {\\n    constructor(name, sex) {\\n      super(name, sex);\\n      console.log(super.name);// undefined\\n    }\\n\\n    speak() {\\n      super.speak();// 呼叫父類實例方法\\n      console.log('Programmer speak');\\n    }\\n\\n    // 在靜態方法中使用 super\\n    static speak() {\\n      super.speak();// 呼叫父類靜態方法\\n      console.log('Programmer speak');\\n    }\\n  }\\n  new Programmer('test').speak();\\n  Programmer.speak();\\n  ```\\n\";","import { render } from \"./JSNote.vue?vue&type=template&id=2df14b8a\"\nimport script from \"./JSNote.vue?vue&type=script&lang=js\"\nexport * from \"./JSNote.vue?vue&type=script&lang=js\"\n\nimport \"./JSNote.vue?vue&type=style&index=0&id=2df14b8a&lang=scss\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}