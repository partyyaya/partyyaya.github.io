{"version":3,"sources":["webpack:///./src/views/TSNote.vue","webpack:///./src/assets/md/TS.md","webpack:///./src/views/TSNote.vue?8497","webpack:///./src/views/TSNote.vue?1ee8"],"names":["displayLoading","class","displayContent","htmlContent","showLoading","showContent","name","components","Loading","setup","value","mdConfig","html","linkify","typographer","highlight","str","lang","language","use","result","render","setTimeout"],"mappings":"0OACA,4BAKU,EAAAA,gB,iBALV,eAMI,GANJ,MACKC,MAAK,C,iBAA6B,c,gBAAqC,gB,mBAD5E,sBAaU,EAAAC,gB,iBANR,eASM,OAhBR,MAQKD,MAAK,C,uCAA8D,c,gBAAqC,gB,CAOzG,eAAsD,OAAjDA,MAAM,gBAAgB,UAAQ,EAAAE,a,2BAfvC,uB,kGCDe,gjXD4BXC,EAAc,gBAAI,GAClBC,EAAc,gBAAI,GAClBL,EAAiB,gBAAI,GACrBE,EAAiB,gBAAI,GACnBC,EAAc,eAAI,IAET,GACbG,KAAM,SACNC,WAAY,CAAEC,UAAA,MACdC,MAHa,WAiCX,OA7BA,eAAS,wCAAC,sGACJL,EAAYM,QACRC,EAAW,IAAG,CAClBC,MAAM,EACNC,SAAS,EACTC,aAAa,EAEbC,UALkB,SAKPC,EAAKC,GACd,OAAO,IAAKF,UAAUC,EAAK,CAACE,SAAUD,IAAOP,SAE9CS,IAAI,QACDC,EAAST,EAASU,OAAT,UAAmB,IAClClB,EAAYO,MAAQU,EAEpBE,YAAW,WAETlB,EAAYM,OAAQ,EACpBY,YAAW,WAETtB,EAAeU,OAAQ,EACvBR,EAAeQ,OAAQ,EACvBY,YAAW,WAETjB,EAAYK,OAAQ,IACnB,OACF,OACF,MA1BG,4CA6BH,CACLN,cACAC,cACAL,iBACAE,iBACAC,iB,UEnEN,EAAOkB,OAASA,EAED,gB,kCCPf","file":"js/tsNote.3bd78199.js","sourcesContent":["<template>\r\n  <Loading\r\n    :class=\"{\r\n      'content--hide': !showLoading,\r\n      'content--show': showLoading,\r\n    }\"\r\n    v-if=\"displayLoading\"\r\n  />\r\n  <div\r\n    :class=\"{\r\n      'markdown-content': true,\r\n      'content--hide': !showContent,\r\n      'content--show': showContent,\r\n    }\"\r\n    v-if=\"displayContent\"\r\n  >\r\n    <div class=\"markdown-body\" v-html=\"htmlContent\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from \"vue\";\r\nimport md from \"markdown-it\";\r\nimport md_copy from \"../utils/mdCopy\";\r\nimport hljs from \"highlight.js\";\r\nimport Loading from \"../components/Loading\";\r\nimport data from \"!raw-loader!../assets/md/TS.md\";\r\n\r\nlet showLoading = ref(true);\r\nlet showContent = ref(false);\r\nlet displayLoading = ref(true);\r\nlet displayContent = ref(false);\r\nconst htmlContent = ref(\"\");\r\n\r\nexport default {\r\n  name: \"TSNote\",\r\n  components: { Loading },\r\n  setup() {\r\n    onMounted(async () => {\r\n      if (showLoading.value) {\r\n        const mdConfig = md({\r\n          html: true,\r\n          linkify: true,\r\n          typographer: true,\r\n          // 針對特定語言顯示文字突出效果\r\n          highlight (str, lang) {\r\n            return hljs.highlight(str, {language: lang}).value;\r\n          },\r\n        }).use(md_copy);\r\n        const result = mdConfig.render(`${data}`);\r\n        htmlContent.value = result;\r\n\r\n        setTimeout(() => {\r\n          // 等待 v-if 效果\r\n          showLoading.value = false;\r\n          setTimeout(() => {\r\n            // 等待loading動畫結束\r\n            displayLoading.value = false;\r\n            displayContent.value = true;\r\n            setTimeout(() => {\r\n              // 等待 v-if 效果\r\n              showContent.value = true;\r\n            }, 100);\r\n          }, 500);\r\n        }, 1000);\r\n      }\r\n    });\r\n    return {\r\n      showLoading,\r\n      showContent,\r\n      displayLoading,\r\n      displayContent,\r\n      htmlContent,\r\n    };\r\n  },\r\n};\r\n</script>\r\n<style lang=\"scss\">\r\n@import \"../style/md.scss\";\r\n.content--hide {\r\n  opacity: 0;\r\n}\r\n\r\n.content--show {\r\n  opacity: 1;\r\n}\r\n</style>\r\n","export default \"## Typescript 筆記\\r\\n<a id=\\\"user-content-top\\\"></a>\\r\\n\\r\\n### 目錄\\r\\n<details open>\\r\\n<summary style=\\\"cursor: pointer;\\\">&nbsp;目錄清單 </summary>\\r\\n\\r\\n- [安裝開發環境](#user-content-install)\\r\\n- [基本數據類型](#user-content-basic-type)\\r\\n- [Array(數組) 與 Tuple(元組)](#user-content-array-tuple)\\r\\n- [Interface 接口](#user-content-interface)\\r\\n- [Function 函數](#user-content-function)\\r\\n- [類型推論、聯合類型、類型斷言](#user-content-type-inference-union-assertions)\\r\\n- [Class 類](#user-content-class)\\r\\n- [Class 實現 Interface 方法](#user-content-class-interface)\\r\\n- [Enums 枚舉](#user-content-enums)\\r\\n- [Generics 泛型](#user-content-generics)\\r\\n- [Type Aliases 類型別名](#user-content-type-aliases)\\r\\n- [聲明文件](#user-content-declaration-files)\\r\\n- [內置對象](#user-content-built-in-objects)\\r\\n\\r\\n</details>\\r\\n\\r\\n<hr id=\\\"user-content-install\\\" style=\\\"height: 4px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >安裝開發環境</a>\\r\\n#### 安裝 ```nvm```\\r\\n- 用途：```nvm``` 可切換 ```Node.js``` 版本環境，以方便各場合開發\\r\\n- 若先前有安裝 ```Node.js``` 會詢問是否一起管理該版本\\r\\n- [Windows 安裝](https://github.com/coreybutler/nvm-windows/releases)\\r\\n  - 選擇最新版本並下載 ```nvm-setup.zip```\\r\\n  - 解壓縮並執行 ```nvm-setup.exe``` 進行安裝即可\\r\\n- [Linux 安裝](https://github.com/nvm-sh/nvm#installing-and-updating)\\r\\n- 常用指令如下：\\r\\n  - 安裝特定版本的 ```nvm```：```nvm install 版本號```\\r\\n  - 列出已安裝清單：```nvm list```\\r\\n  - 切換到特定 ```Node.js``` 版本(已安裝的版本)：```nvm use v版本號```\\r\\n    - 必須使用系統管理員執行\\r\\n\\r\\n#### 安裝 ```Typescript```\\r\\n- 安裝全局環境：```npm install -g typescript```\\r\\n- 檢查是否已安裝：```tsc -v```\\r\\n- 產生初始設定檔：```tsc --init```\\r\\n  - 設定檔內可以註釋，並包含所有設定解釋\\r\\n- 編譯文件：```tsc fileName.ts```\\r\\n\\r\\n\\r\\n<hr id=\\\"user-content-basic-type\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >基本數據類型</a>\\r\\n- [文檔網址](https://www.typescriptlang.org/docs/handbook/2/everyday-types.html)\\r\\n- 基本類型有以下幾種：\\r\\n  - Boolean\\r\\n  - Null\\r\\n  - Undefined\\r\\n  - Number\\r\\n  - BigInt\\r\\n  - String\\r\\n  - Symbol\\r\\n  - Any(在未確定數據類型時可設定 Any:所有類型)\\r\\n- 宣告方式：```let test: boolean = true;```\\r\\n\\r\\n<hr id=\\\"user-content-array-tuple\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >Array(數組) 與 Tuple(元組)</a>\\r\\n- Array 宣告為固定一種數據類型的數組\\r\\n  - 宣告方式：```let arrOfNumbers: number[] = [1, 2, 3]```\\r\\n- Tuple 為在同一數組內有多種數據類型\\r\\n  - 宣告方式：```let test: [string, number] = ['test', 123]```\\r\\n\\r\\n<hr id=\\\"user-content-interface\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >Interface 接口</a>\\r\\n- [文檔網址](https://www.typescriptlang.org/docs/handbook/2/objects.html)\\r\\n- 宣告方式：\\r\\n  ```typescript\\r\\n  // 通常 Interface 首字母為大寫\\r\\n  interface Person {\\r\\n    // 只讀屬性，設定初始值後不能再做更改\\r\\n    readonly id: number;\\r\\n    name: string;\\r\\n    // 可選屬性，設定該參數可以不存在\\r\\n    age?: number;\\r\\n  }\\r\\n\\r\\n  let viking: Person = {\\r\\n    id: 1,\\r\\n    name: 'Viking'\\r\\n  }\\r\\n  ```\\r\\n\\r\\n<hr id=\\\"user-content-function\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >Function 函數</a>\\r\\n- [文檔網址](https://www.typescriptlang.org/docs/handbook/2/functions.html)\\r\\n- 宣告方式：\\r\\n  ```typescript\\r\\n  // z 為可選參數\\r\\n  function add(x: number, y: number, z?: number): number {\\r\\n    // z (number | undefined)\\r\\n    if (z) {\\r\\n      return x + y + z\\r\\n    } else {\\r\\n      return x + y\\r\\n    }\\r\\n  }\\r\\n  // 可將函數賦予描述函數\\r\\n  const add2: (x: number, y: number, z?:number) => number = add\\r\\n\\r\\n  // interface 描述函數類型\\r\\n  interface ISum {\\r\\n    (x: number, y: number): number\\r\\n  }\\r\\n  const sum = (x: number, y: number): number => {\\r\\n    return x + y\\r\\n  }\\r\\n  const sum2: ISum = sum\\r\\n\\r\\n  // 用變數描述函數類型\\r\\n  let sum: (x: number, y: number) => number;\\r\\n  let sum2: typeof sum;\\r\\n  ```\\r\\n\\r\\n<hr id=\\\"user-content-type-inference-union-assertions\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >類型推論、聯合類型、類型斷言</a>\\r\\n- [文檔網址](https://www.typescriptlang.org/docs/handbook/type-inference.html)\\r\\n- 宣告方式：\\r\\n  ```typescript\\r\\n  // 類型推論\\r\\n  // 在不同的條件裡面，會智能的縮小推論範圍，出錯的機率就降低了。\\r\\n  function getLength2(input: string | number): number {\\r\\n    if (typeof input === 'string') {\\r\\n      return input.length\\r\\n    } else {\\r\\n      return input.toString().length\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // 聯合類型\\r\\n  // 該變數可以是 數字 或 字串\\r\\n  let numberOrString: number | string \\r\\n  // 當步確定目前聯合類型目前是哪個類型時，只能訪問該聯合類型內所有類型共同的屬性與方法\\r\\n  numberOrString.length\\r\\n  numberOrString.toString()\\r\\n\\r\\n  // 類型斷言\\r\\n  // 用 as 告訴編譯器，請把它看作是一個 string 類型並可以用 string 的方法。\\r\\n  function getLength(input: string | number): number {\\r\\n    const str = input as string\\r\\n    if (str.length) {\\r\\n      return str.length\\r\\n    } else {\\r\\n      const number = input as number\\r\\n      return number.toString().length\\r\\n    }\\r\\n  }\\r\\n  ```\\r\\n\\r\\n<hr id=\\\"user-content-class\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >Class 類</a>\\r\\n- [Class 類](https://www.typescriptlang.org/docs/handbook/2/classes.html)\\r\\n  - 面相對象三大特點\\r\\n    - 封裝(Encapsulation)：隱藏對數據的操作，只暴露對外接口，通過對外提供的接口來訪問該對象\\r\\n    - 繼承(Inheritance)：子類繼承父類，除了擁有父類的所有特性外，可增加些更具體的特性\\r\\n    - 多態(Polymorphism)：由繼承而產生不同的類，同一個方法可以有不同的響應\\r\\n- [訪問修飾符](https://www.typescriptlang.org/docs/handbook/2/classes.html#member-visibility)\\r\\n  - public：修飾的屬性或方法是公有的，可在任何地方被訪問，默認所有的屬性和方法都是 public 的 \\r\\n  - private：修飾的屬性或方法是私有的，不能在聲明它的類的外部訪問 \\r\\n  - protected：修飾的屬性或方法是受保護的，它和 private 類似，區別是它在子類中也是允許被訪問的\\r\\n- 宣告方式：\\r\\n  ```typescript\\r\\n  class Animal {\\r\\n    // 設置屬性與數據類型\\r\\n    name: string;\\r\\n    // 必須與要賦予的屬性同數據類型\\r\\n    constructor(name: string) {\\r\\n      this.name = name\\r\\n    }\\r\\n    run() {\\r\\n      return `${this.name} is running`\\r\\n    }\\r\\n  }\\r\\n  const snake = new Animal('lily');\\r\\n\\r\\n  // 繼承的特性\\r\\n  class Dog extends Animal {\\r\\n    bark() {\\r\\n      return `${this.name} is barking`\\r\\n    }\\r\\n  }\\r\\n\\r\\n  const xiaobao = new Dog('xiaobao')\\r\\n  // 可調用繼承來的方法\\r\\n  console.log(xiaobao.run())\\r\\n  console.log(xiaobao.bark())\\r\\n\\r\\n  // 在子類的構造函數中，必須使用 super 調用父類的方法，否則報錯\\r\\n  class Cat extends Animal {\\r\\n    constructor(name) {\\r\\n      super(name)\\r\\n      console.log(this.name)\\r\\n    }\\r\\n    run() {\\r\\n      return 'Meow, ' + super.run()\\r\\n    }\\r\\n  }\\r\\n  const maomao = new Cat('maomao')\\r\\n  console.log(maomao.run())\\r\\n  ```\\r\\n\\r\\n<hr id=\\\"user-content-class-interface\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >Class 實現 Interface 方法</a>\\r\\n- [文檔網址](https://www.typescriptlang.org/docs/handbook/2/classes.html#implements-clauses)\\r\\n- 宣告方式：\\r\\n  ```typescript\\r\\n  interface Radio {\\r\\n    switchRadio(trigger: boolean): void;\\r\\n  }\\r\\n\\r\\n  interface Battery {\\r\\n    checkBatteryStatus(): void;\\r\\n  }\\r\\n\\r\\n  class Car implements Radio {\\r\\n    switchRadio(trigger: boolean) {\\r\\n      return 123\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // 可實現多個接口，中間只需用逗號隔開\\r\\n  class Cellphone implements Radio, Battery {\\r\\n    switchRadio() {\\r\\n    }\\r\\n    checkBatteryStatus() {\\r\\n\\r\\n    }\\r\\n  }\\r\\n  ```\\r\\n\\r\\n<hr id=\\\"user-content-enums\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >Enums 枚舉</a>\\r\\n- [文檔網址](https://www.typescriptlang.org/docs/handbook/enums.html)\\r\\n- 宣告方式：\\r\\n  ```typescript\\r\\n  // 範例1\\r\\n  enum Direction {\\r\\n    Up,\\r\\n    Down,\\r\\n    Left,\\r\\n    Right,\\r\\n  }\\r\\n  console.log(Direction.Up);// 0\\r\\n  // 枚舉會做反向映射\\r\\n  console.log(Direction[0]);// Up\\r\\n\\r\\n  // 範例2\\r\\n  enum Direction {\\r\\n    Up = 1,\\r\\n    Down,\\r\\n    Left,\\r\\n    Right,\\r\\n  }\\r\\n  console.log(Direction.Up);// 1\\r\\n  // 當其中一個設定數字時，枚舉將會照順序排下去\\r\\n  // 並且設定數組[數字]映射為該值\\r\\n  console.log(Direction[1]);\\r\\n\\r\\n  // 範例3\\r\\n  // 字符串枚舉\\r\\n  enum Direction {\\r\\n    Up = 'UP',\\r\\n    Down = 'DOWN',\\r\\n    Left = 'LEFT',\\r\\n    Right = 'RIGHT',\\r\\n  }\\r\\n  const value = 'UP'\\r\\n  if (value === Direction.Up) {\\r\\n    console.log('go up!')\\r\\n  }\\r\\n  ```\\r\\n\\r\\n<hr id=\\\"user-content-generics\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >Generics 泛型</a>\\r\\n- [文檔網址](https://www.typescriptlang.org/docs/handbook/2/generics.html)\\r\\n- 基本使用：\\r\\n  ```typescript\\r\\n  // 可設定參數與回傳值的數據類型相同\\r\\n  function echo<T>(arg: T): T {\\r\\n    return arg\\r\\n  }\\r\\n  const result = echo(123)\\r\\n\\r\\n  // 可以傳入多值\\r\\n  function swap<T, U>(tuple: [T, U]): [U, T] {\\r\\n      return [tuple[1], tuple[0]]\\r\\n  }\\r\\n  const result2 = swap(['string', 123])\\r\\n  ```\\r\\n\\r\\n- 泛型约束：\\r\\n  ```typescript\\r\\n  interface TestLength {\\r\\n    length: number;\\r\\n  }\\r\\n  // 通過繼承接口來約束是否該類型符合條件\\r\\n  function echoWithLength<T extends TestLength>(arg: T): T {\\r\\n      console.log(arg.length)\\r\\n      return arg\\r\\n  }\\r\\n\\r\\n  const result3 = echoWithLength({ length: 10 })\\r\\n  const result4 = echoWithLength([1, 2, 3])\\r\\n  ```\\r\\n- 泛型結合類、接口：\\r\\n  ```typescript\\r\\n  // 通過泛型可設定類別裡方法參數回傳的數據類型\\r\\n  class Queue<T> {\\r\\n    private data = [];\\r\\n    push(item: T) {\\r\\n      return this.data.push(item)\\r\\n    }\\r\\n    pop(): T {\\r\\n      return this.data.shift()\\r\\n    }\\r\\n  }\\r\\n  const queue = new Queue<number>()\\r\\n\\r\\n  // 泛型 和 接口\\r\\n  // 通過泛型可設定接口內參數的數據類型\\r\\n  interface KeyPair<T, U> {\\r\\n    key: T;\\r\\n    value: U;\\r\\n  }\\r\\n  let kp1: KeyPair<number, string> = { key: 1, value: \\\"str\\\"}\\r\\n  let kp2: KeyPair<string, number> = { key: \\\"str\\\", value: 123}\\r\\n  ```\\r\\n\\r\\n<hr id=\\\"user-content-type-aliases\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >Type Aliases 類型別名</a>\\r\\n- [文檔網址](https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#type-aliases)\\r\\n- 宣告方式：\\r\\n  ```typescript\\r\\n  // 給描述函數類型起別名\\r\\n  type PlusType = (x: number, y: number) => number\\r\\n  let sum2: PlusType\\r\\n\\r\\n  // 聯合類型\\r\\n  type StrOrNumber = string | number\\r\\n  let result2: StrOrNumber = '123'\\r\\n  result2 = 123\\r\\n\\r\\n  // 交叉類型(將多個接口裡的屬性加在一起)\\r\\n  // 若有重複屬性不同數據類型則會報錯(若一個為any類型，另一個為 number 數據類型，則最後選為 number 數據類型)\\r\\n  interface IName  {\\r\\n    name: string\\r\\n  }\\r\\n  type IPerson = IName & { age: number }\\r\\n  let person: IPerson = { name: 'hello', age: 12 }\\r\\n\\r\\n  // 字符串字面量\\r\\n  type Directions = 'Up' | 'Down' | 'Left' | 'Right'\\r\\n  let toWhere: Directions = 'Up'\\r\\n  ```\\r\\n\\r\\n<hr id=\\\"user-content-declaration-files\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >聲明文件</a>\\r\\n- 簡介：\\r\\n  ```txt\\r\\n  若 Typescript 專案需使用 JS 第三方庫時會無法直接引用，\\r\\n  這時就需要聲明文件來協助向 Typescript 解釋語句\\r\\n  通常聲明語句通常會放入 .d.ts 的文件裡\\r\\n  .d 代表聲明 .d.ts 代表只有適配 ts 的聲明\\r\\n  ```\\r\\n- [文檔網址1](https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html)\\r\\n- [文檔網址2](https://ts.xcatliu.com/basics/declaration-files.html)\\r\\n- [官方聲明文件庫](https://github.com/DefinitelyTyped/DefinitelyTyped/)\\r\\n- [官方搜索聲明庫](https://www.typescriptlang.org/dt/search?search=)\\r\\n\\r\\n<hr id=\\\"user-content-built-in-objects\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >內置對象</a>\\r\\n- [文檔網址](https://github.com/Microsoft/TypeScript/tree/main/src/lib)\\r\\n- ECMAScript 的内置对象\\r\\n  - Boolean\\r\\n  - Error\\r\\n  - Date\\r\\n  - RegExp\\r\\n  - 更多內置對象可參考 [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects)\\r\\n  - 宣告方式：\\r\\n    ```js\\r\\n    let b: Boolean = new Boolean(1);\\r\\n    let e: Error = new Error('Error');\\r\\n    let d: Date = new Date();\\r\\n    let r: RegExp = /[a-z]/;\\r\\n    ```\\r\\n- DOM 和 BOM 的内置对象\\r\\n  - Document\\r\\n  - HTMLElement\\r\\n  - Event\\r\\n  - NodeList\\r\\n  - 宣告方式：\\r\\n    ```js\\r\\n    let body: HTMLElement = document.body;\\r\\n    let div: NodeList = document.querySelectorAll('div');\\r\\n    ```\\r\\n- Utility Types 實用程序類型\\r\\n  - [文檔網址](https://www.typescriptlang.org/docs/handbook/utility-types.html)\\r\\n  - 該類型為幫助性的類型，提供一些方便的功能\\r\\n  - 範例：\\r\\n    ```js\\r\\n    // partial，它可以把傳入的類型都變成可選\\r\\n    interface Person {\\r\\n        name: string\\r\\n        age: number\\r\\n    }\\r\\n    let ming: Person = { name: 'viking', age: 20 }\\r\\n    type IPartial = Partial<Person>\\r\\n    let ming2: IPartial = {}\\r\\n\\r\\n    // Omit，它返回的類型可以忽略傳入類型的某個屬性\\r\\n    type IOmit = Omit<Person, 'name'>\\r\\n    let viking3: IOmit = { age: 20 }\\r\\n    ```\\r\\n\";","import { render } from \"./TSNote.vue?vue&type=template&id=2f1ad500\"\nimport script from \"./TSNote.vue?vue&type=script&lang=js\"\nexport * from \"./TSNote.vue?vue&type=script&lang=js\"\n\nimport \"./TSNote.vue?vue&type=style&index=0&id=2f1ad500&lang=scss\"\nscript.render = render\n\nexport default script","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./TSNote.vue?vue&type=style&index=0&id=2f1ad500&lang=scss\""],"sourceRoot":""}