{"version":3,"sources":["webpack:///./src/views/VueRouterNote.vue","webpack:///./src/assets/md/VueRouter.md","webpack:///./src/views/VueRouterNote.vue?45f2","webpack:///./src/views/VueRouterNote.vue?6d3d"],"names":["displayLoading","class","displayContent","htmlContent","showLoading","showContent","name","components","Loading","setup","value","mdConfig","html","linkify","typographer","highlight","str","lang","language","use","render","then","useHashChange"],"mappings":"wNACA,4BAKU,EAAAA,gB,iBALV,eAMI,GANJ,MACKC,MAAK,C,iBAA6B,c,gBAAqC,gB,mBAD5E,sBAaU,EAAAC,gB,iBANR,eASM,OAhBR,MAQKD,MAAK,C,uCAA8D,c,gBAAqC,gB,CAOzG,eAAsD,OAAjDA,MAAM,gBAAgB,UAAQ,EAAAE,a,2BAfvC,uB,0HCDe,m2ZD8BXC,EAAc,gBAAI,GAClBC,EAAc,gBAAI,GAClBL,EAAiB,gBAAI,GACrBE,EAAiB,gBAAI,GACnBC,EAAc,eAAI,IAET,GACbG,KAAM,gBACNC,WAAY,CAAEC,UAAA,MACdC,MAHa,WA2CX,OAvCA,eAAS,wCAAC,wGACJL,EAAYM,MADR,uBAEAC,EAAW,IAAG,CAClBC,MAAM,EACNC,SAAS,EACTC,aAAa,EAEbC,UALkB,SAKRC,EAAKC,GACb,OAAO,IAAKF,UAAUC,EAAK,CAAEE,SAAUD,IAAQP,SAEhDS,IAAI,QACPhB,EAAYO,MAAQC,EAASS,OAAT,UAAmB,IAXjC,SAaA,gBAAe,WAEnBhB,EAAYM,OAAQ,IACnB,KACAW,MAAK,WACJ,OAAO,gBAAe,WAEpBrB,EAAeU,OAAQ,EACvBR,EAAeQ,OAAQ,IACtB,QAEJW,MAAK,WACJ,OAAO,gBAAe,WAEpBhB,EAAYK,OAAQ,EAEpB,mBACC,QA9BD,6BAkCN,iBAlCM,4CAsCV,OAAAY,EAAA,QACO,CACLlB,cACAC,cACAL,iBACAE,iBACAC,iB,UE/EN,EAAOiB,OAASA,EAED,gB,oCCPf,W","file":"js/vueRouterNote.2404f694.js","sourcesContent":["<template>\r\n  <Loading\r\n    :class=\"{\r\n      'content--hide': !showLoading,\r\n      'content--show': showLoading,\r\n    }\"\r\n    v-if=\"displayLoading\"\r\n  />\r\n  <div\r\n    :class=\"{\r\n      'markdown-content': true,\r\n      'content--hide': !showContent,\r\n      'content--show': showContent,\r\n    }\"\r\n    v-if=\"displayContent\"\r\n  >\r\n    <div class=\"markdown-body\" v-html=\"htmlContent\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from \"vue\";\r\nimport { scrollToTargetId, timeoutPromise } from \"../utils\";\r\nimport useHashChange from \"../hooks/useHashChange\";\r\nimport md from \"markdown-it\";\r\nimport md_copy from \"../utils/mdCopy\";\r\nimport hljs from \"highlight.js\";\r\nimport Loading from \"../components/Loading\";\r\nimport data from \"!raw-loader!../assets/md/VueRouter.md\";\r\n\r\nlet showLoading = ref(true);\r\nlet showContent = ref(false);\r\nlet displayLoading = ref(true);\r\nlet displayContent = ref(false);\r\nconst htmlContent = ref(\"\");\r\n\r\nexport default {\r\n  name: \"VueRouterNote\",\r\n  components: { Loading },\r\n  setup() {\r\n    onMounted(async () => {\r\n      if (showLoading.value) {\r\n        const mdConfig = md({\r\n          html: true,\r\n          linkify: true,\r\n          typographer: true,\r\n          // 針對特定語言顯示文字突出效果\r\n          highlight(str, lang) {\r\n            return hljs.highlight(str, { language: lang }).value;\r\n          },\r\n        }).use(md_copy);\r\n        htmlContent.value = mdConfig.render(`${data}`);\r\n\r\n        await timeoutPromise(() => {\r\n          // 等待 v-if 效果\r\n          showLoading.value = false;\r\n        }, 1000)\r\n          .then(() => {\r\n            return timeoutPromise(() => {\r\n              // 等待loading動畫結束\r\n              displayLoading.value = false;\r\n              displayContent.value = true;\r\n            }, 500);\r\n          })\r\n          .then(() => {\r\n            return timeoutPromise(() => {\r\n              // 等待 v-if 效果\r\n              showContent.value = true;\r\n              // 若網址帶有 hashtag 直接進入頁面\r\n              scrollToTargetId();\r\n            }, 100);\r\n          });\r\n      } else {\r\n        // 若使用者前往其他筆記往並使用瀏覽器往前往後切換頁面帶有 hashtag\r\n        scrollToTargetId();\r\n      }\r\n    });\r\n    // 若在同個筆記切換 hash (#???)，則使用onhashchange監聽\r\n    useHashChange();\r\n    return {\r\n      showLoading,\r\n      showContent,\r\n      displayLoading,\r\n      displayContent,\r\n      htmlContent,\r\n    };\r\n  },\r\n};\r\n</script>\r\n<style lang=\"scss\">\r\n@import \"../style/md.scss\";\r\n.content--hide {\r\n  opacity: 0;\r\n}\r\n\r\n.content--show {\r\n  opacity: 1;\r\n}\r\n</style>\r\n","export default \"## Vue Router 筆記\\r\\n<a id=\\\"user-content-top\\\"></a>\\r\\n\\r\\n### 目錄\\r\\n<details open>\\r\\n<summary style=\\\"cursor: pointer;\\\">&nbsp;目錄清單 </summary>\\r\\n\\r\\n- [介紹與安裝](#user-content-introduce)\\r\\n- [基本使用](#user-content-basic-use)\\r\\n- [動態路由](#user-content-dynamic-route)\\r\\n- [捕獲所有路由與404錯誤路由](#user-content-all-notfound)\\r\\n- [嵌套路由](#user-content-nested-route)\\r\\n- [命名路由](#user-content-named-route)\\r\\n- [重定向與別名](#user-content-redirect-alias)\\r\\n- [編程式導航](#user-content-programmatic-navigation)\\r\\n- [命名視圖](#user-content-named-views)\\r\\n- [路由傳參數給組件](#user-content-routes-params-components)\\r\\n- [官方介紹創建路由與服務器配置方式](https://router.vuejs.org/zh/guide/essentials/history-mode.html)\\r\\n\\r\\n</details>\\r\\n\\r\\n<hr id=\\\"user-content-introduce\\\" style=\\\"height: 4px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >介紹與安裝</a>\\r\\n- 什麼是 ```Vue Router``` ?\\r\\n  ```txt\\r\\n  是 Vue.js 的官方路由，與 Vue.js 核心深度集成\\r\\n  可更方便依路徑的不同來切換視圖\\r\\n  ```\\r\\n- 安裝使用方式請查看[官網](https://router.vuejs.org/zh/installation.html)\\r\\n\\r\\n<hr id=\\\"user-content-basic-use\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >基本使用</a>\\r\\n- ```router-link``` 標籤：使用該組件進行導航\\r\\n  - 用 ```to``` 來指定鏈接\\r\\n  - 最終會被渲染成一個含指定鏈接 ```href``` 的 ```a``` 標籤 \\r\\n- ```router-view``` 標籤：將路徑匹配到組件渲染於該標籤位置\\r\\n- 範例代碼\\r\\n  ```html\\r\\n  <body>\\r\\n    <div id=\\\"app\\\">\\r\\n      <ul>\\r\\n        <li><router-link to=\\\"/\\\">Home</router-link></li>\\r\\n        <li><router-link to=\\\"/foo\\\">Foo</router-link></li>\\r\\n        <li><router-link to=\\\"/bar\\\">Bar</router-link></li>\\r\\n      </ul>\\r\\n      <router-view></router-view>\\r\\n    </div>\\r\\n\\r\\n    <script>\\r\\n      const { createRouter, createWebHistory, createWebHashHistory } = VueRouter\\r\\n      const { createApp } = Vue\\r\\n\\r\\n      // 在組件裡面藉由 this.$router 可取得 createRouter 的 router 對象\\r\\n      const Home = { template: `<div>home</div>` }\\r\\n      const Foo = { template: '<div>foo</div>' }\\r\\n      const Bar = { template: '<div>bar</div>' }\\r\\n\\r\\n      const router = createRouter({\\r\\n        history: createWebHistory(),\\r\\n        routes: [\\r\\n          { path: '/', component: Home },\\r\\n          { path: '/foo', component: Foo },\\r\\n          { path: '/bar', component: Bar },\\r\\n        ],\\r\\n      })\\r\\n\\r\\n      const app = createApp({})\\r\\n      app.use(router)\\r\\n      app.mount('#app')\\r\\n    </script>\\r\\n  </body>\\r\\n  ```\\r\\n\\r\\n<hr id=\\\"user-content-dynamic-route\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >動態路由</a>\\r\\n- [官網連結](https://router.vuejs.org/zh/guide/essentials/dynamic-matching.html)\\r\\n- 可用[正則表達式匹配路由](https://router.vuejs.org/zh/guide/essentials/route-matching-syntax.html)\\r\\n- 使用情境\\r\\n  ```txt\\r\\n  假設有一個 user 介面為全體 user 一起使用\\r\\n  則需判斷需要取得哪個 user 的資料\\r\\n  藉此動態路由就可以派上用場\\r\\n  ```\\r\\n- 使用方式\\r\\n  - 使用 ```:名稱```，在組件中使用 ```this.$route.params.名稱``` 便可取得 ```路徑參數```-名稱\\r\\n  - 若 ```/user/test``` 導到 ```/user/ming```，則組件會覆用及代表不會觸發生命週期函數，可用 ```watch``` 監聽 \\r\\n  ```js\\r\\n  const User = {\\r\\n    template: '<div>User</div>',\\r\\n  }\\r\\n\\r\\n  const routes = [\\r\\n    // 動態字段由冒號開始\\r\\n    // 如 /user/test 或 /user/ming 都會映射到此路由\\r\\n    { path: '/users/:id', component: User },\\r\\n  ]\\r\\n  ```\\r\\n- 使用案例\\r\\n  - 若要映射該使用者寫的第三篇文章，可以這樣設計\\r\\n  - 舉例\\r\\n    ```js\\r\\n    /*\\r\\n      若路徑為 /users/ming/articles/3\\r\\n      則 $route.params 為 { id: 'ming', articles: '3' }\\r\\n    */\\r\\n    const routes = [\\r\\n      { path: '/users/:id/articles/:articles', component: Article },\\r\\n    ]\\r\\n    ```\\r\\n\\r\\n<hr id=\\\"user-content-all-notfound\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >捕獲所有路由與404錯誤路由</a>\\r\\n- 使用時機：使用者輸入不存在路由時，將其捕獲並渲染指定頁面\\r\\n- 範例\\r\\n  ```js\\r\\n  const routes = [\\r\\n    // 將匹配所有內容並放在 $route.params.pathMatch 下\\r\\n    { path: '/:pathMatch(.*)*', name: 'NotFound', component: NotFound },\\r\\n    // 匹配以 /user- 開頭所有內容，並放在 $route.params.afterUser 下\\r\\n    { path: '/user-:afterUser(.*)', component: UserGeneric },\\r\\n  ]\\r\\n  ```\\r\\n\\r\\n<hr id=\\\"user-content-nested-route\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >嵌套路由</a>\\r\\n- 使用情景\\r\\n  ```txt\\r\\n  假設要在使用者頁面上\\r\\n  顯示該使用者不同的資料頁面，如 tab\\r\\n  這時可使用嵌套路由，方便切換渲染不同的組件\\r\\n  ```\\r\\n- 使用方式\\r\\n  ```js\\r\\n  // 設定嵌套組件渲染位置\\r\\n  const User = {\\r\\n    template: `\\r\\n      <div>\\r\\n        <h3>User {{ $route.params.id }}</h3>\\r\\n        <router-view></router-view>\\r\\n      </div>\\r\\n    `,\\r\\n  }\\r\\n  // 以 / 為開頭為根路徑\\r\\n  const routes = [\\r\\n    {\\r\\n      path: '/user/:id',\\r\\n      component: User,\\r\\n      children: [\\r\\n        { \\r\\n          // 當 /user/:id 匹配成功 \\r\\n          // 若沒有設定，<router-view> 內部則為空\\r\\n          // UserHome 將被渲染到 User 的 <router-view> 內部\\r\\n          path: '',\\r\\n          component: UserHome \\r\\n        },\\r\\n        {\\r\\n          // 當 /user/:id/profile 匹配成功 \\r\\n          // UserProfile 將被渲染到 User 的 <router-view> 內部\\r\\n          path: 'profile',\\r\\n          component: UserProfile,\\r\\n        },\\r\\n        {\\r\\n          // 當 /user/:id/posts 匹配成功 \\r\\n          // UserPosts 將被渲染到用戶的 <router-view> 內部\\r\\n          path: 'posts',\\r\\n          component: UserPosts,\\r\\n        },\\r\\n      ],\\r\\n    },\\r\\n  ]\\r\\n  ```\\r\\n\\r\\n<hr id=\\\"user-content-named-route\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >命名路由</a>\\r\\n- [官方介紹](https://router.vuejs.org/zh/guide/essentials/named-routes.html)\\r\\n- 藉由在路由上進行命名，可更簡潔明瞭的使用鏈接\\r\\n- 範例\\r\\n  ```js\\r\\n  // router\\r\\n  const routes = [\\r\\n    {\\r\\n      path: '/user/:username',\\r\\n      name: 'user',\\r\\n      component: User\\r\\n    }\\r\\n  ]\\r\\n\\r\\n  // 下面兩種都會導航到 /user/ming。\\r\\n  // params 裡面屬性將對應到路徑參數(:username)\\r\\n  // <router-link :to=\\\"{ name: 'user', params: { username: 'ming' }}\\\">Ming</router-link>\\r\\n  router.push({ name: 'user', params: { username: 'ming' } })\\r\\n  ```\\r\\n\\r\\n<hr id=\\\"user-content-redirect-alias\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >重定向與別名</a>\\r\\n- [官方介紹](https://router.vuejs.org/zh/guide/essentials/redirect-and-alias.html)\\r\\n- 重定向使用時機：通常為要修改路由時，讓使用者抵達正確頁面，並告訴使用者現在的正確路徑\\r\\n- 重定向使用方法：\\r\\n  - 使用 ```path```\\r\\n    ```js\\r\\n    // 當使用者呼叫 /home 時，重定向至 /\\r\\n    const routes = [{ path: '/home', redirect: '/' }]\\r\\n    ```\\r\\n  - 使用 ```name```\\r\\n    ```js\\r\\n    // 當使用者呼叫 /home 時，重定向至 /\\r\\n    const routes = [\\r\\n      // 可將此行放至 /home 後面\\r\\n      { path: '/', name: 'home' },\\r\\n      { path: '/home', redirect: { name: 'home' } }\\r\\n    ]\\r\\n    ```\\r\\n  - 使用函數\\r\\n    ```js\\r\\n    const routes = [\\r\\n      { \\r\\n        path: \\\"/settings\\\",\\r\\n        component: UserSettings,\\r\\n        children: [\\r\\n          {\\r\\n            path: \\\"emails\\\",\\r\\n            component: UserEmailsSubscriptions\\r\\n          }\\r\\n        ]\\r\\n      },\\r\\n      { \\r\\n        path: '/home',\\r\\n        redirect: to => {\\r\\n          return { path: '/settings/emails' }\\r\\n        }\\r\\n      }\\r\\n    ]\\r\\n    ```\\r\\n  - 使用相對路徑\\r\\n    ```js\\r\\n    const routes = [\\r\\n      { \\r\\n        path: \\\"/settings\\\",\\r\\n        component: UserSettings,\\r\\n        children: [\\r\\n          {\\r\\n            path: \\\"emails\\\",\\r\\n            component: UserEmailsSubscriptions\\r\\n          }\\r\\n        ]\\r\\n      },\\r\\n      // 會重定向到 /settings/emails\\r\\n      {\\r\\n        path: \\\"/settings/test2\\\",\\r\\n        redirect: (to) => {\\r\\n          return { path: \\\"emails\\\" };\\r\\n        }\\r\\n      }\\r\\n    ]\\r\\n    ```\\r\\n- 別名使用時機：初始設計時，方便讓使用者使用，渲染同頁面\\r\\n  - 與重定向的差別：重定向會導向原路由，別名則是在原路由上創建新名稱\\r\\n  - 重定向與別名無法共用在同路由，因為別名會被重定向後的路徑取代\\r\\n  - 使用方法：\\r\\n    ```js\\r\\n    // 當導到 /aliasTest 或 /settings/sendEmail 時，會渲染 /settings/emails 頁面\\r\\n    const routes = [\\r\\n      { \\r\\n        path: \\\"/settings\\\",\\r\\n        component: UserSettings,\\r\\n        children: [\\r\\n          {\\r\\n            path: \\\"emails\\\",\\r\\n            component: UserEmailsSubscriptions,\\r\\n            // 若單一別名可使用字串：alias: '/aliasTest'\\r\\n            alias: ['/aliasTest','sendEmail']\\r\\n          }\\r\\n        ]\\r\\n      },\\r\\n      { \\r\\n        // 當導到 /333 時，會渲染 /test/333 頁面\\r\\n        path: \\\"/test/:id\\\",\\r\\n        component: UserSettings,\\r\\n        alias: '/:id'\\r\\n      },\\r\\n      // 會重定向到 /settings/emails\\r\\n      {\\r\\n        path: \\\"/settings/test2\\\",\\r\\n        redirect: (to) => {\\r\\n          return { path: \\\"./emails\\\" };\\r\\n        }\\r\\n      }\\r\\n    ]\\r\\n    ```\\r\\n\\r\\n<hr id=\\\"user-content-programmatic-navigation\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >編程式導航</a>\\r\\n- 編程式導航：使 ```router``` 元件上功能也可在 ```JS``` 中使用\\r\\n- 導航到不同的 ```URL```：```router.push```\\r\\n  - 等同於 ```<router-link :to=\\\"...\\\">```\\r\\n  - 類似於 ```window.history.pushState```\\r\\n  - 會向 ```history``` 添加一筆紀錄\\r\\n  - 注意：若提供了 ```path```，```params``` 會被忽略\\r\\n  - 範例\\r\\n    ```js\\r\\n    const username = 'ming'\\r\\n    // 使用對象\\r\\n    router.push({ path: '/users/ming' })\\r\\n    // 使用組件的命名並加上參數，使路由建立 url\\r\\n    router.push({ name: 'user', params: { username: 'ming' } })\\r\\n    // 加入查詢參數，導航至 /register?plan=private\\r\\n    router.push({ path: '/register', query: { plan: 'private' } })\\r\\n    // 带 hash 後，導航至 /about#team\\r\\n    router.push({ path: '/about', hash: '#team' })\\r\\n    // 可使用模板字符串\\r\\n    router.push(`/user/${username}`) // -> /user/ming\\r\\n    router.push({ path: `/user/${username}` }) // -> /user/ming\\r\\n    // 使用 name 和 params 自動加入至 url\\r\\n    router.push({ name: 'user', params: { username } }) // -> /user/ming\\r\\n    // params 不能与 path 一起使用\\r\\n    router.push({ path: '/user', params: { username } }) // -> /user\\r\\n    ```\\r\\n- 替換當前位置的 ```URL```：```router.replace```\\r\\n  - 等同於 ```<router-link :to=\\\"...\\\" replace>```\\r\\n  - 等同於 ```router.push({ path: '...', replace: true })```\\r\\n  - 類似於 ```window.history.replaceState```\\r\\n  - 不會向 ```history``` 添加紀錄\\r\\n  - 範例\\r\\n    ```js\\r\\n    router.replace({ path: '/home' })\\r\\n    ```\\r\\n- 前往先前與之後的歷史位置：```router.go```\\r\\n  - 類似於 ```window.history.go(n)```\\r\\n  - ```router.go(1)``` 等同於 ```router.forward()```\\r\\n  - ```router.go(-1)``` 等同於 ```router.back()```\\r\\n\\r\\n\\r\\n<hr id=\\\"user-content-named-views\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >命名視圖</a>\\r\\n- 使用時機：在同路徑下用多個視圖\\r\\n- 範例\\r\\n  ```js\\r\\n  // createRouter\\r\\n  const routes = [\\r\\n    {\\r\\n      path: '/',\\r\\n      components: {\\r\\n        default: First,\\r\\n        a: Second,\\r\\n        b: Third,\\r\\n      },\\r\\n    },\\r\\n    {\\r\\n      path: '/other',\\r\\n      components: {\\r\\n        default: Third,\\r\\n        a: Second,\\r\\n        b: First,\\r\\n      },\\r\\n    },\\r\\n  ]\\r\\n  ```\\r\\n  ```html\\r\\n  <!-- App.vue -->\\r\\n  <ul>\\r\\n    <li>\\r\\n      <router-link to=\\\"/\\\">First page</router-link>\\r\\n    </li>\\r\\n    <li>\\r\\n      <router-link to=\\\"/other\\\">Second page</router-link>\\r\\n    </li>\\r\\n  </ul>\\r\\n  <!-- 若沒有 name 則取得 default 組件內容 -->\\r\\n  <router-view></router-view>\\r\\n  <router-view name=\\\"a\\\"></router-view>\\r\\n  <router-view name=\\\"b\\\"></router-view>\\r\\n  ```\\r\\n- 嵌套命名視圖\\r\\n  - 使用時機：嵌套路由視圖內使用多個視圖\\r\\n  - 範例\\r\\n    ```js\\r\\n    // createRouter\\r\\n    const routes = [\\r\\n      {\\r\\n        path: '/settings',\\r\\n        // 也可同時在頂層使用命名視圖\\r\\n        component: UserSettings,\\r\\n        children: [{\\r\\n          path: 'emails',\\r\\n          // 若只有 default 則可省略\\r\\n          component: UserEmailsSubscriptions\\r\\n        }, {\\r\\n          path: 'profile',\\r\\n          components: {\\r\\n            default: UserProfile,\\r\\n            helper: UserProfilePreview\\r\\n          }\\r\\n        }]\\r\\n      }\\r\\n    ]\\r\\n    ```\\r\\n    ```html\\r\\n    <!-- UserSettings.vue -->\\r\\n    <!-- 路徑：/settings/profile -->\\r\\n    <div>\\r\\n      <h1>User Settings</h1>\\r\\n      <!-- \\r\\n        若路徑為：/settings/emails \\r\\n        則渲染 UserEmailsSubscriptions \\r\\n      -->\\r\\n      <!-- 渲染 default 組件內容：UserProfile -->\\r\\n      <router-view />\\r\\n      <!-- 渲染 helper 組件內容：UserProfilePreview -->\\r\\n      <router-view name=\\\"helper\\\" />\\r\\n    </div>\\r\\n    ```\\r\\n\\r\\n<hr id=\\\"user-content-routes-params-components\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >路由傳參數給組件</a>\\r\\n- 使用情境\\r\\n  ```txt\\r\\n  在顯示使用者資訊時，不必再需要由組件傳值，\\r\\n  可透過路由參數傳參讓組件獲取使用者名稱，藉此去取得相關資訊，\\r\\n  ```\\r\\n- 使用方式\\r\\n  ```js\\r\\n  // 當 props 設置為 true ，代表 route.params 將被設置為組件的 props\\r\\n  const User = {\\r\\n    props: ['id'],\\r\\n    template: '<div>您好，{{ id }}</div>'\\r\\n  }\\r\\n  const routes = [{ path: '/user/:id', component: User, props: true }]\\r\\n  ```\\r\\n- 使用函數傳參\\r\\n  ```js\\r\\n  const routes = [\\r\\n    { path: '/dynamic/:years', component: Hello, props: dynamicPropsFn }\\r\\n  ]\\r\\n  function dynamicPropsFn(route) {\\r\\n    const now = new Date()\\r\\n    return {\\r\\n      name: (now.getFullYear() + parseInt(route.params.years)) + '!'\\r\\n    }\\r\\n  }\\r\\n  ```\\r\\n- 命名視圖傳參\\r\\n  ```js\\r\\n  // router\\r\\n  const routes = [\\r\\n    {\\r\\n      path: \\\"/:id\\\",\\r\\n      components: {\\r\\n        default: First,\\r\\n        a: Second,\\r\\n        b: Third\\r\\n      },\\r\\n      // 默認為 false，若命名視圖組件要取得 props 須設置為 true\\r\\n      props: {\\r\\n        default: true,\\r\\n        a: true\\r\\n      }\\r\\n    }\\r\\n  ]\\r\\n  ```\\r\\n  ```html\\r\\n  <!-- First.vue -->\\r\\n  <template>\\r\\n    <h1>First {{ id }}</h1>\\r\\n  </template>\\r\\n\\r\\n  <script>\\r\\n  export default {\\r\\n    props: [\\\"id\\\"],\\r\\n  };\\r\\n  </script>\\r\\n  ```\\r\\n\\r\\n\";","import { render } from \"./VueRouterNote.vue?vue&type=template&id=7df3008b\"\nimport script from \"./VueRouterNote.vue?vue&type=script&lang=js\"\nexport * from \"./VueRouterNote.vue?vue&type=script&lang=js\"\n\nimport \"./VueRouterNote.vue?vue&type=style&index=0&id=7df3008b&lang=scss\"\nscript.render = render\n\nexport default script","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./VueRouterNote.vue?vue&type=style&index=0&id=7df3008b&lang=scss\""],"sourceRoot":""}