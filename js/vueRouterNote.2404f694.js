(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["vueRouterNote"],{"40e4":function(r,n,e){"use strict";e.r(n);var t=e("7a23");function s(r,n,e,s,o,a){var i=Object(t["y"])("Loading");return Object(t["r"])(),Object(t["d"])(t["a"],null,[s.displayLoading?(Object(t["r"])(),Object(t["d"])(i,{key:0,class:{"content--hide":!s.showLoading,"content--show":s.showLoading}},null,8,["class"])):Object(t["e"])("",!0),s.displayContent?(Object(t["r"])(),Object(t["d"])("div",{key:1,class:{"markdown-content":!0,"content--hide":!s.showContent,"content--show":s.showContent}},[Object(t["h"])("div",{class:"markdown-body",innerHTML:s.htmlContent},null,8,["innerHTML"])],2)):Object(t["e"])("",!0)],64)}var o=e("1da1"),a=(e("96cf"),e("ed08")),i=e("df69"),u=e("d4cd"),p=e.n(u),c=e("2338"),h=e("1487"),l=e.n(h),m=e("3a5e"),d="## Vue Router 筆記\r\n<a id=\"user-content-top\"></a>\r\n\r\n### 目錄\r\n<details open>\r\n<summary style=\"cursor: pointer;\">&nbsp;目錄清單 </summary>\r\n\r\n- [介紹與安裝](#user-content-introduce)\r\n- [基本使用](#user-content-basic-use)\r\n- [動態路由](#user-content-dynamic-route)\r\n- [捕獲所有路由與404錯誤路由](#user-content-all-notfound)\r\n- [嵌套路由](#user-content-nested-route)\r\n- [命名路由](#user-content-named-route)\r\n- [重定向與別名](#user-content-redirect-alias)\r\n- [編程式導航](#user-content-programmatic-navigation)\r\n- [命名視圖](#user-content-named-views)\r\n- [路由傳參數給組件](#user-content-routes-params-components)\r\n- [官方介紹創建路由與服務器配置方式](https://router.vuejs.org/zh/guide/essentials/history-mode.html)\r\n\r\n</details>\r\n\r\n<hr id=\"user-content-introduce\" style=\"height: 4px;\">\r\n\r\n#### <a href=\"#user-content-top\" >介紹與安裝</a>\r\n- 什麼是 ```Vue Router``` ?\r\n  ```txt\r\n  是 Vue.js 的官方路由，與 Vue.js 核心深度集成\r\n  可更方便依路徑的不同來切換視圖\r\n  ```\r\n- 安裝使用方式請查看[官網](https://router.vuejs.org/zh/installation.html)\r\n\r\n<hr id=\"user-content-basic-use\" style=\"height: 2px;\">\r\n\r\n#### <a href=\"#user-content-top\" >基本使用</a>\r\n- ```router-link``` 標籤：使用該組件進行導航\r\n  - 用 ```to``` 來指定鏈接\r\n  - 最終會被渲染成一個含指定鏈接 ```href``` 的 ```a``` 標籤 \r\n- ```router-view``` 標籤：將路徑匹配到組件渲染於該標籤位置\r\n- 範例代碼\r\n  ```html\r\n  <body>\r\n    <div id=\"app\">\r\n      <ul>\r\n        <li><router-link to=\"/\">Home</router-link></li>\r\n        <li><router-link to=\"/foo\">Foo</router-link></li>\r\n        <li><router-link to=\"/bar\">Bar</router-link></li>\r\n      </ul>\r\n      <router-view></router-view>\r\n    </div>\r\n\r\n    <script>\r\n      const { createRouter, createWebHistory, createWebHashHistory } = VueRouter\r\n      const { createApp } = Vue\r\n\r\n      // 在組件裡面藉由 this.$router 可取得 createRouter 的 router 對象\r\n      const Home = { template: `<div>home</div>` }\r\n      const Foo = { template: '<div>foo</div>' }\r\n      const Bar = { template: '<div>bar</div>' }\r\n\r\n      const router = createRouter({\r\n        history: createWebHistory(),\r\n        routes: [\r\n          { path: '/', component: Home },\r\n          { path: '/foo', component: Foo },\r\n          { path: '/bar', component: Bar },\r\n        ],\r\n      })\r\n\r\n      const app = createApp({})\r\n      app.use(router)\r\n      app.mount('#app')\r\n    <\/script>\r\n  </body>\r\n  ```\r\n\r\n<hr id=\"user-content-dynamic-route\" style=\"height: 2px;\">\r\n\r\n#### <a href=\"#user-content-top\" >動態路由</a>\r\n- [官網連結](https://router.vuejs.org/zh/guide/essentials/dynamic-matching.html)\r\n- 可用[正則表達式匹配路由](https://router.vuejs.org/zh/guide/essentials/route-matching-syntax.html)\r\n- 使用情境\r\n  ```txt\r\n  假設有一個 user 介面為全體 user 一起使用\r\n  則需判斷需要取得哪個 user 的資料\r\n  藉此動態路由就可以派上用場\r\n  ```\r\n- 使用方式\r\n  - 使用 ```:名稱```，在組件中使用 ```this.$route.params.名稱``` 便可取得 ```路徑參數```-名稱\r\n  - 若 ```/user/test``` 導到 ```/user/ming```，則組件會覆用及代表不會觸發生命週期函數，可用 ```watch``` 監聽 \r\n  ```js\r\n  const User = {\r\n    template: '<div>User</div>',\r\n  }\r\n\r\n  const routes = [\r\n    // 動態字段由冒號開始\r\n    // 如 /user/test 或 /user/ming 都會映射到此路由\r\n    { path: '/users/:id', component: User },\r\n  ]\r\n  ```\r\n- 使用案例\r\n  - 若要映射該使用者寫的第三篇文章，可以這樣設計\r\n  - 舉例\r\n    ```js\r\n    /*\r\n      若路徑為 /users/ming/articles/3\r\n      則 $route.params 為 { id: 'ming', articles: '3' }\r\n    */\r\n    const routes = [\r\n      { path: '/users/:id/articles/:articles', component: Article },\r\n    ]\r\n    ```\r\n\r\n<hr id=\"user-content-all-notfound\" style=\"height: 2px;\">\r\n\r\n#### <a href=\"#user-content-top\" >捕獲所有路由與404錯誤路由</a>\r\n- 使用時機：使用者輸入不存在路由時，將其捕獲並渲染指定頁面\r\n- 範例\r\n  ```js\r\n  const routes = [\r\n    // 將匹配所有內容並放在 $route.params.pathMatch 下\r\n    { path: '/:pathMatch(.*)*', name: 'NotFound', component: NotFound },\r\n    // 匹配以 /user- 開頭所有內容，並放在 $route.params.afterUser 下\r\n    { path: '/user-:afterUser(.*)', component: UserGeneric },\r\n  ]\r\n  ```\r\n\r\n<hr id=\"user-content-nested-route\" style=\"height: 2px;\">\r\n\r\n#### <a href=\"#user-content-top\" >嵌套路由</a>\r\n- 使用情景\r\n  ```txt\r\n  假設要在使用者頁面上\r\n  顯示該使用者不同的資料頁面，如 tab\r\n  這時可使用嵌套路由，方便切換渲染不同的組件\r\n  ```\r\n- 使用方式\r\n  ```js\r\n  // 設定嵌套組件渲染位置\r\n  const User = {\r\n    template: `\r\n      <div>\r\n        <h3>User {{ $route.params.id }}</h3>\r\n        <router-view></router-view>\r\n      </div>\r\n    `,\r\n  }\r\n  // 以 / 為開頭為根路徑\r\n  const routes = [\r\n    {\r\n      path: '/user/:id',\r\n      component: User,\r\n      children: [\r\n        { \r\n          // 當 /user/:id 匹配成功 \r\n          // 若沒有設定，<router-view> 內部則為空\r\n          // UserHome 將被渲染到 User 的 <router-view> 內部\r\n          path: '',\r\n          component: UserHome \r\n        },\r\n        {\r\n          // 當 /user/:id/profile 匹配成功 \r\n          // UserProfile 將被渲染到 User 的 <router-view> 內部\r\n          path: 'profile',\r\n          component: UserProfile,\r\n        },\r\n        {\r\n          // 當 /user/:id/posts 匹配成功 \r\n          // UserPosts 將被渲染到用戶的 <router-view> 內部\r\n          path: 'posts',\r\n          component: UserPosts,\r\n        },\r\n      ],\r\n    },\r\n  ]\r\n  ```\r\n\r\n<hr id=\"user-content-named-route\" style=\"height: 2px;\">\r\n\r\n#### <a href=\"#user-content-top\" >命名路由</a>\r\n- [官方介紹](https://router.vuejs.org/zh/guide/essentials/named-routes.html)\r\n- 藉由在路由上進行命名，可更簡潔明瞭的使用鏈接\r\n- 範例\r\n  ```js\r\n  // router\r\n  const routes = [\r\n    {\r\n      path: '/user/:username',\r\n      name: 'user',\r\n      component: User\r\n    }\r\n  ]\r\n\r\n  // 下面兩種都會導航到 /user/ming。\r\n  // params 裡面屬性將對應到路徑參數(:username)\r\n  // <router-link :to=\"{ name: 'user', params: { username: 'ming' }}\">Ming</router-link>\r\n  router.push({ name: 'user', params: { username: 'ming' } })\r\n  ```\r\n\r\n<hr id=\"user-content-redirect-alias\" style=\"height: 2px;\">\r\n\r\n#### <a href=\"#user-content-top\" >重定向與別名</a>\r\n- [官方介紹](https://router.vuejs.org/zh/guide/essentials/redirect-and-alias.html)\r\n- 重定向使用時機：通常為要修改路由時，讓使用者抵達正確頁面，並告訴使用者現在的正確路徑\r\n- 重定向使用方法：\r\n  - 使用 ```path```\r\n    ```js\r\n    // 當使用者呼叫 /home 時，重定向至 /\r\n    const routes = [{ path: '/home', redirect: '/' }]\r\n    ```\r\n  - 使用 ```name```\r\n    ```js\r\n    // 當使用者呼叫 /home 時，重定向至 /\r\n    const routes = [\r\n      // 可將此行放至 /home 後面\r\n      { path: '/', name: 'home' },\r\n      { path: '/home', redirect: { name: 'home' } }\r\n    ]\r\n    ```\r\n  - 使用函數\r\n    ```js\r\n    const routes = [\r\n      { \r\n        path: \"/settings\",\r\n        component: UserSettings,\r\n        children: [\r\n          {\r\n            path: \"emails\",\r\n            component: UserEmailsSubscriptions\r\n          }\r\n        ]\r\n      },\r\n      { \r\n        path: '/home',\r\n        redirect: to => {\r\n          return { path: '/settings/emails' }\r\n        }\r\n      }\r\n    ]\r\n    ```\r\n  - 使用相對路徑\r\n    ```js\r\n    const routes = [\r\n      { \r\n        path: \"/settings\",\r\n        component: UserSettings,\r\n        children: [\r\n          {\r\n            path: \"emails\",\r\n            component: UserEmailsSubscriptions\r\n          }\r\n        ]\r\n      },\r\n      // 會重定向到 /settings/emails\r\n      {\r\n        path: \"/settings/test2\",\r\n        redirect: (to) => {\r\n          return { path: \"emails\" };\r\n        }\r\n      }\r\n    ]\r\n    ```\r\n- 別名使用時機：初始設計時，方便讓使用者使用，渲染同頁面\r\n  - 與重定向的差別：重定向會導向原路由，別名則是在原路由上創建新名稱\r\n  - 重定向與別名無法共用在同路由，因為別名會被重定向後的路徑取代\r\n  - 使用方法：\r\n    ```js\r\n    // 當導到 /aliasTest 或 /settings/sendEmail 時，會渲染 /settings/emails 頁面\r\n    const routes = [\r\n      { \r\n        path: \"/settings\",\r\n        component: UserSettings,\r\n        children: [\r\n          {\r\n            path: \"emails\",\r\n            component: UserEmailsSubscriptions,\r\n            // 若單一別名可使用字串：alias: '/aliasTest'\r\n            alias: ['/aliasTest','sendEmail']\r\n          }\r\n        ]\r\n      },\r\n      { \r\n        // 當導到 /333 時，會渲染 /test/333 頁面\r\n        path: \"/test/:id\",\r\n        component: UserSettings,\r\n        alias: '/:id'\r\n      },\r\n      // 會重定向到 /settings/emails\r\n      {\r\n        path: \"/settings/test2\",\r\n        redirect: (to) => {\r\n          return { path: \"./emails\" };\r\n        }\r\n      }\r\n    ]\r\n    ```\r\n\r\n<hr id=\"user-content-programmatic-navigation\" style=\"height: 2px;\">\r\n\r\n#### <a href=\"#user-content-top\" >編程式導航</a>\r\n- 編程式導航：使 ```router``` 元件上功能也可在 ```JS``` 中使用\r\n- 導航到不同的 ```URL```：```router.push```\r\n  - 等同於 ```<router-link :to=\"...\">```\r\n  - 類似於 ```window.history.pushState```\r\n  - 會向 ```history``` 添加一筆紀錄\r\n  - 注意：若提供了 ```path```，```params``` 會被忽略\r\n  - 範例\r\n    ```js\r\n    const username = 'ming'\r\n    // 使用對象\r\n    router.push({ path: '/users/ming' })\r\n    // 使用組件的命名並加上參數，使路由建立 url\r\n    router.push({ name: 'user', params: { username: 'ming' } })\r\n    // 加入查詢參數，導航至 /register?plan=private\r\n    router.push({ path: '/register', query: { plan: 'private' } })\r\n    // 带 hash 後，導航至 /about#team\r\n    router.push({ path: '/about', hash: '#team' })\r\n    // 可使用模板字符串\r\n    router.push(`/user/${username}`) // -> /user/ming\r\n    router.push({ path: `/user/${username}` }) // -> /user/ming\r\n    // 使用 name 和 params 自動加入至 url\r\n    router.push({ name: 'user', params: { username } }) // -> /user/ming\r\n    // params 不能与 path 一起使用\r\n    router.push({ path: '/user', params: { username } }) // -> /user\r\n    ```\r\n- 替換當前位置的 ```URL```：```router.replace```\r\n  - 等同於 ```<router-link :to=\"...\" replace>```\r\n  - 等同於 ```router.push({ path: '...', replace: true })```\r\n  - 類似於 ```window.history.replaceState```\r\n  - 不會向 ```history``` 添加紀錄\r\n  - 範例\r\n    ```js\r\n    router.replace({ path: '/home' })\r\n    ```\r\n- 前往先前與之後的歷史位置：```router.go```\r\n  - 類似於 ```window.history.go(n)```\r\n  - ```router.go(1)``` 等同於 ```router.forward()```\r\n  - ```router.go(-1)``` 等同於 ```router.back()```\r\n\r\n\r\n<hr id=\"user-content-named-views\" style=\"height: 2px;\">\r\n\r\n#### <a href=\"#user-content-top\" >命名視圖</a>\r\n- 使用時機：在同路徑下用多個視圖\r\n- 範例\r\n  ```js\r\n  // createRouter\r\n  const routes = [\r\n    {\r\n      path: '/',\r\n      components: {\r\n        default: First,\r\n        a: Second,\r\n        b: Third,\r\n      },\r\n    },\r\n    {\r\n      path: '/other',\r\n      components: {\r\n        default: Third,\r\n        a: Second,\r\n        b: First,\r\n      },\r\n    },\r\n  ]\r\n  ```\r\n  ```html\r\n  \x3c!-- App.vue --\x3e\r\n  <ul>\r\n    <li>\r\n      <router-link to=\"/\">First page</router-link>\r\n    </li>\r\n    <li>\r\n      <router-link to=\"/other\">Second page</router-link>\r\n    </li>\r\n  </ul>\r\n  \x3c!-- 若沒有 name 則取得 default 組件內容 --\x3e\r\n  <router-view></router-view>\r\n  <router-view name=\"a\"></router-view>\r\n  <router-view name=\"b\"></router-view>\r\n  ```\r\n- 嵌套命名視圖\r\n  - 使用時機：嵌套路由視圖內使用多個視圖\r\n  - 範例\r\n    ```js\r\n    // createRouter\r\n    const routes = [\r\n      {\r\n        path: '/settings',\r\n        // 也可同時在頂層使用命名視圖\r\n        component: UserSettings,\r\n        children: [{\r\n          path: 'emails',\r\n          // 若只有 default 則可省略\r\n          component: UserEmailsSubscriptions\r\n        }, {\r\n          path: 'profile',\r\n          components: {\r\n            default: UserProfile,\r\n            helper: UserProfilePreview\r\n          }\r\n        }]\r\n      }\r\n    ]\r\n    ```\r\n    ```html\r\n    \x3c!-- UserSettings.vue --\x3e\r\n    \x3c!-- 路徑：/settings/profile --\x3e\r\n    <div>\r\n      <h1>User Settings</h1>\r\n      \x3c!-- \r\n        若路徑為：/settings/emails \r\n        則渲染 UserEmailsSubscriptions \r\n      --\x3e\r\n      \x3c!-- 渲染 default 組件內容：UserProfile --\x3e\r\n      <router-view />\r\n      \x3c!-- 渲染 helper 組件內容：UserProfilePreview --\x3e\r\n      <router-view name=\"helper\" />\r\n    </div>\r\n    ```\r\n\r\n<hr id=\"user-content-routes-params-components\" style=\"height: 2px;\">\r\n\r\n#### <a href=\"#user-content-top\" >路由傳參數給組件</a>\r\n- 使用情境\r\n  ```txt\r\n  在顯示使用者資訊時，不必再需要由組件傳值，\r\n  可透過路由參數傳參讓組件獲取使用者名稱，藉此去取得相關資訊，\r\n  ```\r\n- 使用方式\r\n  ```js\r\n  // 當 props 設置為 true ，代表 route.params 將被設置為組件的 props\r\n  const User = {\r\n    props: ['id'],\r\n    template: '<div>您好，{{ id }}</div>'\r\n  }\r\n  const routes = [{ path: '/user/:id', component: User, props: true }]\r\n  ```\r\n- 使用函數傳參\r\n  ```js\r\n  const routes = [\r\n    { path: '/dynamic/:years', component: Hello, props: dynamicPropsFn }\r\n  ]\r\n  function dynamicPropsFn(route) {\r\n    const now = new Date()\r\n    return {\r\n      name: (now.getFullYear() + parseInt(route.params.years)) + '!'\r\n    }\r\n  }\r\n  ```\r\n- 命名視圖傳參\r\n  ```js\r\n  // router\r\n  const routes = [\r\n    {\r\n      path: \"/:id\",\r\n      components: {\r\n        default: First,\r\n        a: Second,\r\n        b: Third\r\n      },\r\n      // 默認為 false，若命名視圖組件要取得 props 須設置為 true\r\n      props: {\r\n        default: true,\r\n        a: true\r\n      }\r\n    }\r\n  ]\r\n  ```\r\n  ```html\r\n  \x3c!-- First.vue --\x3e\r\n  <template>\r\n    <h1>First {{ id }}</h1>\r\n  </template>\r\n\r\n  <script>\r\n  export default {\r\n    props: [\"id\"],\r\n  };\r\n  <\/script>\r\n  ```\r\n\r\n",g=Object(t["w"])(!0),v=Object(t["w"])(!1),f=Object(t["w"])(!0),w=Object(t["w"])(!1),b=Object(t["w"])(""),j={name:"VueRouterNote",components:{Loading:m["a"]},setup:function(){return Object(t["p"])(Object(o["a"])(regeneratorRuntime.mark((function r(){var n;return regeneratorRuntime.wrap((function(r){while(1)switch(r.prev=r.next){case 0:if(!g.value){r.next=7;break}return n=p()({html:!0,linkify:!0,typographer:!0,highlight:function(r,n){return l.a.highlight(r,{language:n}).value}}).use(c["a"]),b.value=n.render("".concat(d)),r.next=5,Object(a["c"])((function(){g.value=!1}),1e3).then((function(){return Object(a["c"])((function(){f.value=!1,w.value=!0}),500)})).then((function(){return Object(a["c"])((function(){v.value=!0,Object(a["a"])()}),100)}));case 5:r.next=8;break;case 7:Object(a["a"])();case 8:case"end":return r.stop()}}),r)})))),Object(i["a"])(),{showLoading:g,showContent:v,displayLoading:f,displayContent:w,htmlContent:b}}};e("4fd4");j.render=s;n["default"]=j},"4fd4":function(r,n,e){"use strict";e("a6e0")},a6e0:function(r,n,e){}}]);
//# sourceMappingURL=vueRouterNote.2404f694.js.map