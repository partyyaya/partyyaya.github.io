{"version":3,"sources":["webpack:///./src/views/CSSNote.vue","webpack:///./src/assets/md/CSS.md","webpack:///./src/views/CSSNote.vue?bf30","webpack:///./src/views/CSSNote.vue?0ecb"],"names":["displayLoading","class","displayContent","htmlContent","showLoading","showContent","name","components","Loading","setup","value","mdConfig","html","linkify","typographer","highlight","str","lang","language","use","render","then","useHashChange"],"mappings":"gNACA,4BAKU,EAAAA,gB,iBALV,eAMI,GANJ,MACKC,MAAK,C,iBAA6B,c,gBAAqC,gB,mBAD5E,sBAaU,EAAAC,gB,iBANR,eASM,OAhBR,MAQKD,MAAK,C,uCAA8D,c,gBAAqC,gB,CAOzG,eAAsD,OAAjDA,MAAM,gBAAgB,UAAQ,EAAAE,a,2BAfvC,uB,0HCDe,gy0DD8BXC,EAAc,gBAAI,GAClBC,EAAc,gBAAI,GAClBL,EAAiB,gBAAI,GACrBE,EAAiB,gBAAI,GACnBC,EAAc,eAAI,IAET,GACbG,KAAM,UACNC,WAAY,CAAEC,UAAA,MACdC,MAHa,WA2CX,OAvCA,eAAS,wCAAC,wGACJL,EAAYM,MADR,uBAEAC,EAAW,IAAG,CAClBC,MAAM,EACNC,SAAS,EACTC,aAAa,EAEbC,UALkB,SAKRC,EAAKC,GACb,OAAO,IAAKF,UAAUC,EAAK,CAAEE,SAAUD,IAAQP,SAEhDS,IAAI,QACPhB,EAAYO,MAAQC,EAASS,OAAT,UAAmB,IAXjC,SAaA,gBAAe,WAEnBhB,EAAYM,OAAQ,IACnB,KACAW,MAAK,WACJ,OAAO,gBAAe,WAEpBrB,EAAeU,OAAQ,EACvBR,EAAeQ,OAAQ,IACtB,QAEJW,MAAK,WACJ,OAAO,gBAAe,WAEpBhB,EAAYK,OAAQ,EAEpB,mBACC,QA9BD,6BAkCN,iBAlCM,4CAsCV,OAAAY,EAAA,QACO,CACLlB,cACAC,cACAL,iBACAE,iBACAC,iB,UE/EN,EAAOiB,OAASA,EAED,gB,kCCPf,W","file":"js/cssNote.5ec86bd0.js","sourcesContent":["<template>\r\n  <Loading\r\n    :class=\"{\r\n      'content--hide': !showLoading,\r\n      'content--show': showLoading,\r\n    }\"\r\n    v-if=\"displayLoading\"\r\n  />\r\n  <div\r\n    :class=\"{\r\n      'markdown-content': true,\r\n      'content--hide': !showContent,\r\n      'content--show': showContent,\r\n    }\"\r\n    v-if=\"displayContent\"\r\n  >\r\n    <div class=\"markdown-body\" v-html=\"htmlContent\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from \"vue\";\r\nimport { scrollToTargetId, timeoutPromise } from \"../utils\";\r\nimport useHashChange from \"../hooks/useHashChange\";\r\nimport md from \"markdown-it\";\r\nimport md_copy from \"../utils/mdCopy\";\r\nimport hljs from \"highlight.js\";\r\nimport Loading from \"../components/Loading\";\r\nimport data from \"!raw-loader!../assets/md/CSS.md\";\r\n\r\nlet showLoading = ref(true);\r\nlet showContent = ref(false);\r\nlet displayLoading = ref(true);\r\nlet displayContent = ref(false);\r\nconst htmlContent = ref(\"\");\r\n\r\nexport default {\r\n  name: \"CSSNote\",\r\n  components: { Loading },\r\n  setup() {\r\n    onMounted(async () => {\r\n      if (showLoading.value) {\r\n        const mdConfig = md({\r\n          html: true,\r\n          linkify: true,\r\n          typographer: true,\r\n          // 針對特定語言顯示文字突出效果\r\n          highlight(str, lang) {\r\n            return hljs.highlight(str, { language: lang }).value;\r\n          },\r\n        }).use(md_copy);\r\n        htmlContent.value = mdConfig.render(`${data}`);\r\n\r\n        await timeoutPromise(() => {\r\n          // 等待 v-if 效果\r\n          showLoading.value = false;\r\n        }, 1000)\r\n          .then(() => {\r\n            return timeoutPromise(() => {\r\n              // 等待loading動畫結束\r\n              displayLoading.value = false;\r\n              displayContent.value = true;\r\n            }, 500);\r\n          })\r\n          .then(() => {\r\n            return timeoutPromise(() => {\r\n              // 等待 v-if 效果\r\n              showContent.value = true;\r\n              // 若網址帶有 hashtag 直接進入頁面\r\n              scrollToTargetId();\r\n            }, 100);\r\n          });\r\n      } else {\r\n        // 若使用者前往其他筆記往並使用瀏覽器往前往後切換頁面帶有 hashtag\r\n        scrollToTargetId();\r\n      }\r\n    });\r\n    // 若在同個筆記切換 hash (#???)，則使用onhashchange監聽\r\n    useHashChange();\r\n    return {\r\n      showLoading,\r\n      showContent,\r\n      displayLoading,\r\n      displayContent,\r\n      htmlContent,\r\n    };\r\n  },\r\n};\r\n</script>\r\n<style lang=\"scss\">\r\n@import \"../style/md.scss\";\r\n.content--hide {\r\n  opacity: 0;\r\n}\r\n\r\n.content--show {\r\n  opacity: 1;\r\n}\r\n</style>\r\n","export default \"## CSS 筆記\\r\\n<a id=\\\"user-content-top\\\"></a>\\r\\n\\r\\n### 目錄\\r\\n<details>\\r\\n<summary style=\\\"cursor: pointer;\\\">&nbsp;BEM 設計模式、選擇器、文本字體、盒模型 </summary>\\r\\n\\r\\n- [BEM 設計模式](#user-content-bem)\\r\\n- [加入CSS的四種方式](#user-content-add)\\r\\n- [CSS選擇器](#user-content-selector)\\r\\n  - [元素關係選擇器](#user-content-selector)\\r\\n  - [偽元素](#user-content-pseudo-element)\\r\\n  - [偽類](#user-content-pseudo-class)\\r\\n  - [層疊性](#user-content-cascading)\\r\\n  - [序號選擇器](#user-content-sequence-selector)\\r\\n  - [複合選擇器](#user-content-compound-selector)\\r\\n  - [屬性選擇器](#user-content-attribute-selector)\\r\\n- [文本與字體屬性](#user-content-font-text)\\r\\n  - [字體屬性](#user-content-font-text)\\r\\n  - [常用文本樣式屬性](#user-content-text-style-attribute)\\r\\n  - [字體合寫屬性](#user-content-font-combine-attribute)\\r\\n- [盒模型](#user-content-box-model)\\r\\n  - [margin 外邊距](#user-content-box-model)\\r\\n  - [padding 內邊距](#user-content-padding)\\r\\n  - [元素隱藏與認識盒模型](#user-content-element-hidden-and-know-box)\\r\\n  - [行內與塊級元素](#user-content-inline-and-box)\\r\\n\\r\\n</details>\\r\\n<details>\\r\\n<summary style=\\\"cursor: pointer;\\\">&nbsp;浮動定位、邊框圓角、背景、2D3D位移 </summary>\\r\\n\\r\\n- [浮動與定位](#user-content-float-and-position)\\r\\n  - [浮動](#user-content-float-and-position)\\r\\n  - [清除浮動](#user-content-clear-float)\\r\\n  - [固定定位](#user-content-position-fixed)\\r\\n  - [相對定位](#user-content-position-relative)\\r\\n  - [絕對定位](#user-content-position-absolute)\\r\\n  - [BFC](#user-content-bfc)\\r\\n  - [z-index](#user-content-z-index)\\r\\n- [邊框與圓角](#user-content-borders-and-corners)\\r\\n  - [邊框](#user-content-borders-and-corners)\\r\\n  - [圓角](#user-content-corners)\\r\\n  - [容器陰影](#user-content-box-shadow)\\r\\n- [背景與漸變](#user-content-background-and-gradient)\\r\\n  - [漸變](#user-content-background-and-gradient)\\r\\n  - [背景](#user-content-background)\\r\\n- [2D&3D轉換](#user-content-transform)\\r\\n  - [位移](#user-content-transform)\\r\\n  - [歪斜](#user-content-skew)\\r\\n  - [旋轉](#user-content-rotate)\\r\\n  - [縮放](#user-content-scale)\\r\\n  - [3D空間移動](#user-content-3d-translate)\\r\\n\\r\\n</details>\\r\\n<details>\\r\\n<summary style=\\\"cursor: pointer;\\\">&nbsp;過渡與動畫</summary>\\r\\n\\r\\n- [過渡](#user-content-transition)\\r\\n- [動畫](#user-content-animation)\\r\\n\\r\\n</details>\\r\\n<details>\\r\\n<summary style=\\\"cursor: pointer;\\\">&nbsp;Flex 布局</summary>\\r\\n\\r\\n- [基本概念與介紹](#user-content-flex-introduce)\\r\\n- 容器屬性\\r\\n  - [display 屬性](#user-content-flex-display)\\r\\n  - [flex-direction 屬性](#user-content-flex-flex-direction)\\r\\n  - [flex-wrap 屬性](#user-content-flex-flex-wrap)\\r\\n  - [flex-flow 屬性](#user-content-flex-flex-flow)\\r\\n  - [justify-content 屬性](#user-content-flex-justify-content)\\r\\n  - [align-items 屬性](#user-content-flex-align-items)\\r\\n  - [align-content 屬性](#user-content-flex-align-content)\\r\\n- 項目屬性\\r\\n  - [order 屬性](#user-content-flex-item-order)\\r\\n  - [flex-grow 屬性](#user-content-flex-item-flex-grow)\\r\\n  - [flex-shrink 屬性](#user-content-flex-item-flex-shrink)\\r\\n  - [flex-basis 屬性](#user-content-flex-item-flex-basis)\\r\\n  - [flex 屬性](#user-content-flex-item-flex)\\r\\n  - [align-self 屬性](#user-content-flex-item-align-self)\\r\\n\\r\\n</details>\\r\\n<details>\\r\\n<summary style=\\\"cursor: pointer;\\\">&nbsp;其他實用功能</summary>\\r\\n\\r\\n- [水平居中](#user-content-horizontal-center)\\r\\n- [垂直居中](#user-content-vertical-center)\\r\\n- [文字省略號：```...```](#user-content-text-ellipsis)\\r\\n\\r\\n</details>\\r\\n\\r\\n\\r\\n<hr id=\\\"user-content-bem\\\" style=\\\"height: 4px;\\\">\\r\\n\\r\\n### BEM 設計模式、選擇器、文本字體、盒模型\\r\\n#### <a href=\\\"#user-content-top\\\" >BEM 設計模式</a>\\r\\n- 什麼是BEM？\\r\\n  ```txt\\r\\n  BEM 是一種 CSS class 命名的設計模式，將介面切割成許多獨立的區塊，\\r\\n  以區塊（Block）、元素（Element）和修飾子（Modifier）來命名，\\r\\n  優點是以元件觀念進行開發，具有重用性。\\r\\n  ```\\r\\n- 設計範例\\r\\n  - ```Element(元素)``` 使用雙底線做分隔、```Modifier(修飾符)``` 使用雙 dash 做分隔\\r\\n  ```html\\r\\n  <!-- \\r\\n    menu 是區塊\\r\\n    menu__item 是 menu 的元素\\r\\n    menu__item--active 是 menu__item 的其中一種狀態\\r\\n  -->\\r\\n  <ul class=\\\"menu\\\">\\r\\n    <li class=\\\"menu__item menu__item--active\\\">首頁</li>\\r\\n    <li class=\\\"menu__item\\\">關於我</li>\\r\\n    <li class=\\\"menu__item\\\">類別</li>\\r\\n  </ul>\\r\\n  ```\\r\\n<hr id=\\\"user-content-add\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >加入CSS的四種方式</a>\\r\\n- 內嵌式\\r\\n```html\\r\\n<style>\\r\\n  h1 {\\r\\n    color: red;\\r\\n  }\\r\\n</style>\\r\\n```\\r\\n- 外鏈式\\r\\n  - rel: 關係\\r\\n  - stylesheet: 樣式表\\r\\n  - href: 路徑\\r\\n```html\\r\\n<link rel=\\\"stylesheet\\\" href=\\\"css/css.css\\\">\\r\\n```\\r\\n- 導入式\\r\\n  - 導入式的樣式表不會等待css加載完畢<br>而是立即渲染html結構,會有幾秒素面朝天的時間\\r\\n```html\\r\\n<style>\\r\\n  @import url(css/css.css);\\r\\n</style>\\r\\n```\\r\\n- 行內式\\r\\n```html\\r\\n<h1 style=\\\"color: red;\\\">test</h1>\\r\\n```\\r\\n<hr id=\\\"user-content-selector\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >CSS選擇器</a>\\r\\n#### <a href=\\\"#user-content-top\\\" >元素關係選擇器</a>\\r\\n```css\\r\\n/* 只對兒子標籤 */\\r\\n.box > p {\\r\\n  color: red;\\r\\n}\\r\\n\\r\\n/* 只對同級下一個標籤 */\\r\\nimg + span {\\r\\n  color: green;\\r\\n}\\r\\n\\r\\n/* 對之後所有同級標籤 */\\r\\nh3 ~ span {\\r\\n  font-style: italic;\\r\\n}\\r\\n```\\r\\n\\r\\n<hr id=\\\"user-content-pseudo-element\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >偽元素</a>\\r\\n```css\\r\\n/* before after 的 content 為必須屬性 */\\r\\n/* 表示在所有a標籤裡所有文本之前都增加■(意指連■都可點選) */\\r\\na::before {\\r\\n  content: \\\"■\\\";\\r\\n}\\r\\n\\r\\n/* \\r\\n重點:還可以使用絕對定位在特定的目標前(後::after)加上圖片 \\r\\n舉例:\\r\\nfooter .part1 dl::before {\\r\\n  content: '';\\r\\n  position: absolute;\\r\\n  width: 60px;\\r\\n  height: 60px;\\r\\n  background-image: url(../images/icons.png);\\r\\n  left: 0;\\r\\n}\\r\\n*/\\r\\n\\r\\n/* 表示在所有a標籤裡所有文本之後都增加❤(意指連❤都可點選) */\\r\\na::after {\\r\\n    content: \\\"❤\\\";\\r\\n}\\r\\n\\r\\n.box1::selection {\\r\\n  /* 設定選取後背景颜色 */\\r\\n  background-color: springgreen;\\r\\n  /* 設定選取後文字颜色 */\\r\\n  color: deeppink;\\r\\n}\\r\\n\\r\\n/* 鎖定該塊級元素裡的第一個字 */\\r\\n.box1::first-letter {\\r\\n  font-size: 50px;\\r\\n}\\r\\n\\r\\n/* 鎖定該塊級元素裡的第一行字 */\\r\\n.box1::first-line {\\r\\n  /* 添加下划线 */\\r\\n  text-decoration: underline;\\r\\n}\\r\\n```\\r\\n<hr id=\\\"user-content-pseudo-class\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >偽類</a>\\r\\n- a 標籤偽類\\r\\n  - link 與 visited 先後都可\\r\\n  - hover 需在 active 之前\\r\\n  - link & visited 需在 hover & active 之前\\r\\n```css\\r\\n/* 沒有被訪問 */\\r\\na:link {\\r\\n  color: dodgerblue;\\r\\n}\\r\\n\\r\\n/* 被訪問過 */\\r\\na:visited {\\r\\n  color: darkgoldenrod;\\r\\n}\\r\\n\\r\\n/* 鼠標懸停在連結上 */\\r\\na:hover {\\r\\n  background-color: gold;\\r\\n}\\r\\n\\r\\n/* 按下但未鬆開 */\\r\\na:active {\\r\\n  font-size: 50px;\\r\\n}\\r\\n```\\r\\n\\r\\n- css3偽類\\r\\n```css\\r\\n/* 若標籤內為空則生效 */\\r\\n.para:empty {\\r\\n  background-color: red;\\r\\n}\\r\\n\\r\\n/* 聚焦時生效(若設定 disable 則無法聚焦) */\\r\\ninput:focus {\\r\\n  background-color: rgb(239, 243, 181);\\r\\n}\\r\\n\\r\\ninput:disabled {\\r\\n  border: 1px solid #000;\\r\\n}\\r\\n\\r\\ninput:enabled {\\r\\n  border: 1px solid rgb(17, 84, 209);\\r\\n}\\r\\n\\r\\n/* \\r\\n只用於單選按鈕和複選框\\r\\n此範例目標為 checked 狀態的 input 後面的第一個 span\\r\\n*/\\r\\ninput:checked+span {\\r\\n  color: red;\\r\\n}\\r\\n\\r\\n/* 相等於html標籤 */\\r\\n:root {\\r\\n  font-size: 20px;\\r\\n}\\r\\n```\\r\\n<hr id=\\\"user-content-cascading\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >層疊性</a>\\r\\n- 行内式 > 内嵌式的優先级\\r\\n- id > class > 標籤\\r\\n- 若層級一樣則按照先後順序\\r\\n- 就近原則\\r\\n  - 若都沒選中則看誰比較接近,若都選中則看權重\\r\\n  - 近 > 權重\\r\\n```html\\r\\n<style>\\r\\np {\\r\\n  color: red;\\r\\n}\\r\\n\\r\\n#para {\\r\\n  color: green;\\r\\n}\\r\\n\\r\\n.spec {\\r\\n  color: blue;\\r\\n}\\r\\n\\r\\n/* \\r\\n  id > class > 標籤\\r\\n  權重(2, 0, 1)\\r\\n*/\\r\\n#box1 #box2 p {\\r\\n  color: red;\\r\\n}\\r\\n\\r\\n/* \\r\\n  權重(2, 1, 2)\\r\\n*/\\r\\n#box1 div.box2 #box3 p {\\r\\n  color: green;\\r\\n}\\r\\n\\r\\n/* \\r\\n  權重(0, 3, 1)\\r\\n*/\\r\\n.box1 .box2 .box3 p {\\r\\n  color: blue;\\r\\n}\\r\\n\\r\\n/* \\r\\n  權重(0, 1, 1)\\r\\n*/\\r\\n.list li {\\r\\n  color: red;\\r\\n}\\r\\n\\r\\n/* \\r\\n  權重(0, 1, 0)\\r\\n  如果加 !important 則視為最優先\\r\\n*/\\r\\n.spec {\\r\\n  color: blue !important;\\r\\n}\\r\\n</style>\\r\\n<body>\\r\\n  <p id=\\\"para\\\" class=\\\"spec\\\">我是段落</p>\\r\\n  <div id=\\\"box1\\\" class=\\\"box1\\\">\\r\\n    <div id=\\\"box2\\\" class=\\\"box2\\\">\\r\\n      <div id=\\\"box3\\\" class=\\\"box3\\\">\\r\\n        <p>我是段落</p>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <ul class=\\\"list\\\">\\r\\n    <li>列表项</li>\\r\\n    <li class=\\\"spec\\\">列表项</li>\\r\\n    <li class=\\\"spec\\\">列表项</li>\\r\\n    <li>列表项</li>\\r\\n    <li>列表项</li>\\r\\n    <li>列表项</li>\\r\\n    <li>列表项</li>\\r\\n  </ul>\\r\\n</body>\\r\\n```\\r\\n<hr id=\\\"user-content-sequence-selector\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >序號選擇器</a>\\r\\n- 若指定(:前面)的標籤不符則不會生效 \\r\\n```html\\r\\n<style>\\r\\n  /* 第1個是p標籤生效 */\\r\\n  .box1 p:first-child {\\r\\n    color: red;\\r\\n  }\\r\\n\\r\\n  /* 最後1個是p標籤生效 */\\r\\n  .box1 p:last-child {\\r\\n    color: blue;\\r\\n  }\\r\\n\\r\\n  /* 若第3個不是p標籤則不生效 */\\r\\n  .box2 p:nth-child(3) {\\r\\n    color: green;\\r\\n  }\\r\\n\\r\\n  /* 奇數: odd=2n+1 */\\r\\n  .box3 p:nth-child(odd) {\\r\\n    color: orange;\\r\\n  }\\r\\n\\r\\n  /* 偶數: even=2n */\\r\\n  .box3 p:nth-child(even) {\\r\\n    color: red;\\r\\n  }\\r\\n\\r\\n  /* 選擇第三個p標籤 */\\r\\n  .box4 p:nth-of-type(3) {\\r\\n    color: blue;\\r\\n  }\\r\\n\\r\\n  /* 倒數第二個是p標籤則生效 */\\r\\n  .box5 p:nth-last-child(2) {\\r\\n    color: sienna;\\r\\n  }\\r\\n\\r\\n  /* 選擇倒數第二個p標籤 */\\r\\n  .box5 p:nth-last-of-type(2) {\\r\\n    color: sienna;\\r\\n  }\\r\\n</style>\\r\\n```\\r\\n<hr id=\\\"user-content-compound-selector\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >複合選擇器</a>\\r\\n```html\\r\\n<style>\\r\\n  /* 後代選擇器必須以空格隔開 */\\r\\n  div.box p.spec em {\\r\\n    color: red;\\r\\n  }\\r\\n\\r\\n  /* 交集選擇器通常用在類中指定的標籤 */\\r\\n  h3.spec {\\r\\n    font-style: italic;\\r\\n  }\\r\\n\\r\\n  /* 多重選擇器 */\\r\\n  ul, ol {\\r\\n    list-style: none;\\r\\n  }\\r\\n</style>\\r\\n<body>\\r\\n  <div class=\\\"box\\\">\\r\\n    <ul>\\r\\n      <li>\\r\\n        <p class=\\\"spec\\\">段落<em>強調文字</em></p>\\r\\n      </li>\\r\\n    </ul>\\r\\n  </div>\\r\\n  <h3 class=\\\"spec\\\">三級標題</h3>\\r\\n  <ul>\\r\\n    <li>無序列表的列表項</li>\\r\\n  </ul>\\r\\n  <ol>\\r\\n    <li>有序列表的列表項</li>\\r\\n  </ol>\\r\\n</body>\\r\\n```\\r\\n<hr id=\\\"user-content-attribute-selector\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >屬性選擇器</a>\\r\\n```html\\r\\n<style>\\r\\n  img {\\r\\n    width: 300px;\\r\\n  }\\r\\n\\r\\n  /* \\r\\n    [alt] 有這個屬性\\r\\n    [alt=\\\"abc\\\"] 精確匹配\\r\\n    [alt^=\\\"abc\\\"] 開頭匹配\\r\\n    [alt$=\\\"abc\\\"] 結尾匹配\\r\\n    [alt*=\\\"abc\\\"] 任意位置匹配\\r\\n    [alt|=\\\"abc\\\"] abc為開頭\\r\\n    [alt~=\\\"abc\\\"] abc為空格分開的獨立部分如:777 abc 888\\r\\n   */\\r\\n\\r\\n  img[alt~=\\\"手機拍攝\\\"] {\\r\\n    border: 3px solid red;\\r\\n  }\\r\\n</style>\\r\\n<img src=\\\"images/image.jpg\\\" alt=\\\"手機拍攝\\\">\\r\\n```\\r\\n<hr id=\\\"user-content-font-text\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >文本與字體屬性</a>\\r\\n#### <a href=\\\"#user-content-top\\\" >字體屬性</a>\\r\\n```css\\r\\n/* 擁有字體文件時可用以下方式定義字體 */\\r\\n@font-face {\\r\\n  /* 取名 */\\r\\n  font-family: 'webfont';\\r\\n  /* 為字體提供一個非常小的阻塞週期和無限的交換週期 */\\r\\n  font-display: swap;\\r\\n  /* IE9*/\\r\\n  src: url('fonts/webfont.eot');\\r\\n  /* IE6-IE8 */\\r\\n  src: url('fonts/webfont.eot') format('embedded-opentype'),\\r\\n      /* chrome、firefox */\\r\\n      url('fonts/webfont.woff2') format('woff2'),\\r\\n      url('fonts/webfont.woff') format('woff'),\\r\\n      /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/\\r\\n      url('fonts/webfont.ttf') format('truetype'),\\r\\n      /* iOS 4.1- */\\r\\n      url('fonts/webfont.svg') format('svg');\\r\\n}\\r\\n\\r\\n/* \\r\\n  會先查看使用者主機有無安裝字體\\r\\n  若第一個字體沒有則陸續往下尋找合適的字體\\r\\n*/\\r\\n.para5 {\\r\\n  font-family: 'Times New Roman', serif, 'Microsoft Yahei';\\r\\n}\\r\\n\\r\\n/* \\r\\n  通常中文字體會擺在英文字體後面以專注顯示中文\\r\\n  字體如果是中文或英文中間有空格，用引號包起来\\r\\n  多個字體設置，字體與字體之间用逗號隔開\\r\\n  引號嵌套:外面使用雙引號，裡面使用單引號\\r\\n*/\\r\\n.para6 {\\r\\n  font-family: 'Times New Roman', serif, '微软雅黑';\\r\\n}\\r\\n\\r\\nh3 {\\r\\n  font-family: 'webfont';\\r\\n  color: rgb(250, 50, 190);\\r\\n}\\r\\n```\\r\\n<hr id=\\\"user-content-text-style-attribute\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >常用文本樣式屬性</a>\\r\\n```css\\r\\n.test {\\r\\n  /* 背景顏色 */\\r\\n  background-color: #f36;\\r\\n  /* 字體顏色 */\\r\\n  color: #ffffff;\\r\\n  /* 最大到255 透明度為0~1*/\\r\\n  color: rgba(255, 0, 0, .6);\\r\\n  /* 字體粗細(預設: normal(400), 加粗: bold(700)) */\\r\\n  font-weight: bold;\\r\\n  /* 字體風格(預設 normal) */\\r\\n  font-style: italic;\\r\\n  /* 文字大小 */\\r\\n  font-size: 26px;\\r\\n  /* \\r\\n    文本內容之前的縮進量\\r\\n    2em: 表示兩個字符的寬度\\r\\n    %: 以該內容塊寬度決定\\r\\n  */\\r\\n  text-indent: 2em;\\r\\n  /* 文字特效(預設: none, underline: 底線, line-through: 刪除線) */\\r\\n  text-decoration: underline;\\r\\n  /* \\r\\n    行高:\\r\\n    1.75 代表該字體大小 x 1.75倍\\r\\n    也可以寫成 175% 或 26x1.75=45.5px 或 1.75em\\r\\n    通常以倍數表示 \\r\\n  */\\r\\n  line-height: 1.75;\\r\\n}\\r\\n```\\r\\n<hr id=\\\"user-content-font-combine-attribute\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >字體合寫屬性</a>\\r\\n- 必須包含: ```font-size``` ```font-family```\\r\\n- 可選擇包含: ```font-style``` ```font-variant``` ```font-weight``` ```line-height```\\r\\n- ```font-style``` ```font-variant``` ```font-weight``` 必须在 ```font-size``` 之前\\r\\n- ```line-height``` 需在 ```font-size``` 後面，由 ```/``` 分隔，如: ```16px/3```\\r\\n- font-family 必须最后指定\\r\\n```css\\r\\n p {\\r\\n  font: bold italic 40px/1.5 \\\"Times New Roman\\\", \\\"微软雅黑\\\";\\r\\n}\\r\\n```\\r\\n<hr id=\\\"user-content-box-model\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >盒模型</a>\\r\\n#### <a href=\\\"#user-content-top\\\" >margin 外邊距</a>\\r\\n```css\\r\\n/* \\r\\n  下面這三個標籤都有預設 padding 與 margin 所以要將他們去除\\r\\n  若 ul 設定padding為0則不顯示小圓點\\r\\n*/\\r\\nbody,\\r\\nul,\\r\\np {\\r\\n    margin: 0;\\r\\n    padding: 0;\\r\\n}\\r\\n\\r\\n/* \\r\\n  margin 在垂直方向會以大值為主(水平為相加)\\r\\n  依下面範例兩個盒子之間間距為 80px\\r\\n*/\\r\\n.box1 {\\r\\n  width: 200px;\\r\\n  height: 200px;\\r\\n  margin-bottom: 70px;\\r\\n}\\r\\n\\r\\n.box2 {\\r\\n  width: 200px;\\r\\n  height: 200px;\\r\\n  margin-top: 80px;\\r\\n}\\r\\n\\r\\n/* \\r\\n  應用: 水平居中\\r\\n  margin\\r\\n    個別屬性:\\r\\n      margin-top\\r\\n      margin-bottom\\r\\n      margin-left\\r\\n      margin-right\\r\\n    簡化寫法:\\r\\n      1.margin: 上 右 下 左;\\r\\n      2.margin: 上下 左右;\\r\\n      3.margin: 上 左右 下;\\r\\n      4.margin: 四邊同値; \\r\\n*/\\r\\nsection {\\r\\n  width: 600px;\\r\\n  height: 100px;\\r\\n  background-color: rgb(240, 151, 151);\\r\\n  /* 上下為0 水平居中 */\\r\\n  margin: 0 auto;\\r\\n  /* 文字居中 */\\r\\n  text-align: center;\\r\\n  /* 行高等於盒子高，讓文字垂直居中 */\\r\\n  line-height: 100px;\\r\\n}\\r\\n```\\r\\n<hr id=\\\"user-content-padding\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >padding 內邊距</a>\\r\\n```css\\r\\n/* \\r\\n  padding\\r\\n    個別屬性:\\r\\n      padding-top\\r\\n      padding-bottom\\r\\n      padding-left\\r\\n      padding-right\\r\\n    簡化寫法:\\r\\n      1.padding: 上 右 下 左;\\r\\n      2.padding: 上下 左右;\\r\\n      3.padding: 上 左右 下;\\r\\n      4.padding: 四邊同値;\\r\\n*/\\r\\n.box2 {\\r\\n  width: 200px;\\r\\n  height: 200px;\\r\\n  background-color: orange;\\r\\n  padding: 10px 20px 30px 40px;\\r\\n}\\r\\n.box3 {\\r\\n  width: 200px;\\r\\n  height: 200px;\\r\\n  background-color: orange;\\r\\n  padding: 10px 20px 30px;\\r\\n}\\r\\n.box4 {\\r\\n  width: 200px;\\r\\n  height: 200px;\\r\\n  background-color: orange;\\r\\n  padding: 10px 20px;\\r\\n}\\r\\n.box5 {\\r\\n  width: 200px;\\r\\n  height: 200px;\\r\\n  background-color: orange;\\r\\n  padding: 10px;\\r\\n}\\r\\n```\\r\\n<hr id=\\\"user-content-element-hidden-and-know-box\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >元素隱藏與認識盒模型</a>\\r\\n```css\\r\\n/* 元素隱藏 */\\r\\n.box1{\\r\\n  width: 200px;\\r\\n  height: 200px;\\r\\n  /* 隱藏，放棄位置 */\\r\\n  display: none;\\r\\n  /* 隱藏，不放棄位置 */\\r\\n  visibility: hidden;\\r\\n}\\r\\n\\r\\n/* 認識盒模型 */\\r\\n.box2 {\\r\\n  /* \\r\\n    total:盒子寬:340px 高:240px\\r\\n    width height 為\\\"內容寬高\\\";\\r\\n  */\\r\\n  width: 300px;\\r\\n  height: 200px;\\r\\n  background-color: gold;\\r\\n  /* 邊框 */\\r\\n  border: 10px solid red;\\r\\n  /* 內邊距 */\\r\\n  padding: 10px;\\r\\n}\\r\\n\\r\\n/* \\r\\n  box-sizing属性\\r\\n  若設置 border-box 屬性(content-box為預設)\\r\\n  width height 則會以盒子寬高計算\\r\\n  如下面範例實際能使用寬高只剩 160x160 \\r\\n*/\\r\\n.box3 {\\r\\n  box-sizing: border-box;\\r\\n  width: 200px;\\r\\n  height: 200px;\\r\\n  border: 10px solid #000;\\r\\n  padding: 10px;\\r\\n}\\r\\n```\\r\\n<hr id=\\\"user-content-inline-and-box\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" > 行內與塊級元素</a>\\r\\n```css\\r\\n/* \\r\\n  行內元素(如:span)與塊級元素(如:div) \\r\\n  差別:\\r\\n    1.塊級元素會獨占一行，其寬度自動填滿其父元素寬度\\r\\n      行內元素不會獨占一行，相鄰的行內元素會排列在同一行，直至排不下才會換行，其寬度隨元素的內容而變化\\r\\n    2.塊級元素可以包含行內元素和塊級元素；行內元素不能包含塊級元素\\r\\n    3.行內元素設置以下屬性無效\\r\\n      width、height、margin-top、margin-bottom、\\r\\n      padding-top、padding-bottom \\r\\n\\r\\n  相互轉換:\\r\\n    1.轉為行內塊: display:inline-block;\\r\\n    2.轉為行內元素: display:inline;\\r\\n    3.轉為塊級元素: display:block;\\r\\n*/\\r\\nspan {\\r\\n  /* 轉為行內塊 */\\r\\n  display: inline-block;\\r\\n}\\r\\n\\r\\n/* 塊级元素應用 */\\r\\n.box1 {\\r\\n  /* 寬度省略掉，由於是塊级元素，寬度會自動撐滿 */\\r\\n  height: 100px;\\r\\n}\\r\\n\\r\\n.box2 {\\r\\n  /* 高度省略掉，會被內容自動撐開 */\\r\\n  width: 200px;\\r\\n}\\r\\n```\\r\\n<hr  id=\\\"user-content-float-and-position\\\" style=\\\"height: 4px;\\\">\\r\\n\\r\\n### 浮動定位、邊框圓角、背景、2D3D位移\\r\\n#### <a href=\\\"#user-content-top\\\" >浮動與定位</a>\\r\\n#### <a href=\\\"#user-content-top\\\" >浮動</a>\\r\\n- 浮動的元素一定能設置寬高\\r\\n```css\\r\\n/* 左浮動 */\\r\\n.box1 {\\r\\n  float: left;\\r\\n}\\r\\n\\r\\n/* 右浮動 */\\r\\n.box2 {\\r\\n  float: right;\\r\\n}\\r\\n\\r\\n/* \\r\\n  1.浮動的順序貼靠特性\\r\\n    順序會依標籤從上往下\\r\\n    最下面的標籤會一直往上直到找到須貼靠的對象\\r\\n\\r\\n  2.關於寬度\\r\\n    父盒子必須涵蓋所有子盒子的寬度否則子盒子可能會被擠下去\\r\\n    父盒子若不設高度則不會被子盒子浮動撐開(去除浮動則會撐開)\\r\\n*/\\r\\n/* 父盒子 div */\\r\\n.box {\\r\\n  width: 600px;\\r\\n  height: 200px;\\r\\n  border: 1px solid #000;\\r\\n}\\r\\n/* 子盒子 div c1 */\\r\\n.box .c1 {\\r\\n  width: 200px;\\r\\n  height: 200px;\\r\\n  background-color: orange;\\r\\n  float: left;\\r\\n}\\r\\n/* 子盒子 div c2 */\\r\\n.box .c2 {\\r\\n  width: 200px;\\r\\n  height: 200px;\\r\\n  background-color: green;\\r\\n  float: left;\\r\\n}\\r\\n/* 子盒子 div c3 */\\r\\n.box .c3 {\\r\\n  width: 200px;\\r\\n  height: 200px;\\r\\n  background-color: blue;\\r\\n  float: left;\\r\\n}\\r\\n\\r\\n/* 溢出隱藏:overflow: hidden; */\\r\\ndiv{\\r\\n  width: 200px;\\r\\n  height: 200px;\\r\\n  padding: 50px;\\r\\n  border: 1px solid #000;\\r\\n  /* 溢出盒子邊框的內容將被隱藏，但會保留盒子padding部分的溢出 */\\r\\n  overflow: hidden;\\r\\n}\\r\\n```\\r\\n<hr id=\\\"user-content-clear-float\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >清除浮動</a>\\r\\n- 常用方法一\\r\\n```html\\r\\n<style>\\r\\n  /* \\r\\n    若沒設置 height 則不被視為BFC \\r\\n    但又會碰到不確定height多少的情況且子元素有浮動現象\\r\\n    所以需要用特別的方法做到BFC\\r\\n    這邊用 overflow: hidden; 來取消對子元素對外面元素影響\\r\\n  */\\r\\n  /* ================ 方法 ================== */\\r\\n  div {\\r\\n    overflow: hidden;\\r\\n    margin-bottom: 10px;\\r\\n  }\\r\\n  /* ======================================== */\\r\\n\\r\\n  p {\\r\\n    float: left;\\r\\n    width: 100px;\\r\\n    height: 100px;\\r\\n    background-color: orange;\\r\\n    margin-right: 20px;\\r\\n  }\\r\\n</style>\\r\\n<body>\\r\\n  <div>\\r\\n    <p></p>\\r\\n    <p></p>\\r\\n  </div>\\r\\n  <div>\\r\\n    <p></p>\\r\\n    <p></p>\\r\\n  </div>\\r\\n</body>\\r\\n```\\r\\n- 常用方法二\\r\\n```html\\r\\n<style>\\r\\n  /* ================ 方法 ================== */\\r\\n  /* after 的 content 必須要寫否則失效 */\\r\\n  /* 在第一個 div 後面加上一個\\\"清除左右浮動\\\"的元素 */\\r\\n  .clearfix::after {\\r\\n    content: '';\\r\\n    clear: both;\\r\\n    /* 必須转为块级元素 */\\r\\n    display: block;\\r\\n  }\\r\\n  /* ======================================== */\\r\\n\\r\\n  p {\\r\\n    float: left;\\r\\n    width: 100px;\\r\\n    height: 100px;\\r\\n    background-color: orange;\\r\\n    margin-right: 20px;\\r\\n  }\\r\\n</style>\\r\\n<body>\\r\\n  <div class=\\\"clearfix\\\">\\r\\n    <p></p>\\r\\n    <p></p>\\r\\n  </div>\\r\\n  <div>\\r\\n    <p></p>\\r\\n    <p></p>\\r\\n  </div>\\r\\n</body>\\r\\n```\\r\\n<hr id=\\\"user-content-position-fixed\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >固定定位</a>\\r\\n- 使用方式: ```position: fixed;```\\r\\n- 並選擇設定以下四種屬性: ```top``` ```bottom``` ```left``` ```right```\\r\\n- 特點\\r\\n  - 以頁面視窗為定位標準\\r\\n  - 常用來做導航與返回頂部用途\\r\\n```css\\r\\n.box {\\r\\n  position: fixed;\\r\\n  bottom: 100px;\\r\\n  right: 100px;\\r\\n  width: 100px;\\r\\n  height: 100px;\\r\\n  background-color: orange;\\r\\n}\\r\\n```\\r\\n<hr id=\\\"user-content-position-relative\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >相對定位</a>\\r\\n- 使用方式: ```position: relative;```\\r\\n- 並選擇設定以下四種屬性: ```top``` ```bottom``` ```left``` ```right```\\r\\n- 特點\\r\\n  - 主要用來微調渲染位置\\r\\n  - 頁面渲染會依相對位置渲染\\r\\n  - 相對位置不會釋放原本位置(原位置以下的標籤依然在原標籤位置下面)\\r\\n```html\\r\\n<style>\\r\\n/* \\r\\n  若同軸方向會以最後為主 \\r\\n  left:100px right:100px;\\r\\n  則會以最後right:100px;表示\\r\\n*/\\r\\ndiv{\\r\\n  width: 400px;\\r\\n  height: 400px;\\r\\n  border: 1px solid #000;\\r\\n  margin: 40px auto;\\r\\n}\\r\\n\\r\\np {\\r\\n  width: 100px;\\r\\n  height: 100px;\\r\\n  background-color: orange;\\r\\n  position: relative;\\r\\n  top: 100px;\\r\\n  left: 100px;\\r\\n}\\r\\n</style>\\r\\n<body>\\r\\n  <div>\\r\\n    <p></p>\\r\\n    <ul>\\r\\n      <li>列表</li>\\r\\n      <li>列表</li>\\r\\n      <li>列表</li>\\r\\n    </ul>\\r\\n  </div>\\r\\n</body>\\r\\n```\\r\\n<hr id=\\\"user-content-position-absolute\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >絕對定位</a>\\r\\n- 使用方式: ```position: absolute;```\\r\\n- 可選擇設定以下四種屬性: ```top``` ```bottom``` ```left``` ```right```\\r\\n- 特點:\\r\\n  - 絕對定位會釋放自己位置(脫離標準文檔流)\\r\\n  - 會直接壓蓋掉其他元素(主要用途)\\r\\n  - 設置 \\\"絕對\\\" 或 \\\"固定\\\" 定位的元素就可以設置寬高\\r\\n- 其他應用如下\\r\\n```html\\r\\n<head>\\r\\n  <style>\\r\\n    /*\\r\\n      若要設定居中:\\r\\n      margin 為寬高的一半\\r\\n    */\\r\\n    .test {\\r\\n      width: 80px;\\r\\n      height: 80px;\\r\\n      position: absolute;\\r\\n      top: 50%;\\r\\n      left: 50%;\\r\\n      margin-top: -40px;\\r\\n      margin-left: -40px;\\r\\n    }\\r\\n\\r\\n    /* \\r\\n      絕對定位之子絕父相關係\\r\\n      絕對定位的標籤會去找與他最近含有 position 父標籤當作參考點\\r\\n      經過測試: 父標籤帶有 固定定位 ,相對定位, 固定定位 皆會產生效果\\r\\n      下面範例為 p 會在 父標籤box2的 左上角 \\r\\n    */\\r\\n    .box1 {\\r\\n      width: 402px;\\r\\n      height: 402px;\\r\\n      border: 1px solid #000;\\r\\n      padding: 100px;\\r\\n      margin: 0 auto;\\r\\n    }\\r\\n\\r\\n    .box2 {\\r\\n      width: 200px;\\r\\n      height: 200px;\\r\\n      padding: 100px;\\r\\n      border: 1px solid #000;\\r\\n      position: relative;\\r\\n    }\\r\\n\\r\\n    .box3 {\\r\\n      width: 98px;\\r\\n      height: 98px;\\r\\n      padding: 50px;\\r\\n      border: 1px solid #000;\\r\\n    }\\r\\n\\r\\n    p {\\r\\n      width: 50px;\\r\\n      height: 50px;\\r\\n      background-color: orange;\\r\\n      position: absolute;\\r\\n      top: 0;\\r\\n      left: 0;\\r\\n    }\\r\\n  </style>\\r\\n</head>\\r\\n\\r\\n<body>\\r\\n  <a href=\\\"\\\">111</a>\\r\\n  <div class=\\\"box1\\\">\\r\\n    <div class=\\\"box2\\\">\\r\\n      <div class=\\\"box3\\\">\\r\\n        <p></p>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</body>\\r\\n```\\r\\n<hr id=\\\"user-content-bfc\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >BFC</a>\\r\\n- BFC 意思: Block formatting context 塊級格式上下文\\r\\n- 定義: 為頁面上一個獨立容器，容器裡面子元素不會影響到外面的元素，反之亦然\\r\\n- 常用創建 BFC 方式: [詳細請見 MDN](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context)\\r\\n  - float 不是 ```none```\\r\\n  - position 不是 ```static``` ```relative```\\r\\n  - display 是 ```inline-block``` ```flex``` ```inline-flex```\\r\\n  - ```overflow: hidden;```\\r\\n\\r\\n<hr id=\\\"user-content-z-index\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >z-index</a>\\r\\n- z-index 較大的元素會覆蓋較小的元素在上層進行顯示\\r\\n- 下面範例 box1 會覆蓋在 box2 上面\\r\\n```html\\r\\n<head>\\r\\n  <style>\\r\\n    .box1 {\\r\\n      width: 300px;\\r\\n      height: 300px;\\r\\n      background-color: orange;\\r\\n      position: absolute;\\r\\n      top: 100px;\\r\\n      left: 100px;\\r\\n      z-index: 9999;\\r\\n    }\\r\\n\\r\\n    .box2 {\\r\\n      width: 300px;\\r\\n      height: 300px;\\r\\n      background-color: blue;\\r\\n      position: absolute;\\r\\n      top: 200px;\\r\\n      left: 200px;\\r\\n      z-index: 999;\\r\\n    }\\r\\n  </style>\\r\\n</head>\\r\\n\\r\\n<body>\\r\\n  <div class=\\\"box1\\\"></div>\\r\\n  <div class=\\\"box2\\\"></div>\\r\\n</body>\\r\\n```\\r\\n\\r\\n<hr  id=\\\"user-content-borders-and-corners\\\" style=\\\"height: 4px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >邊框與圓角</a>\\r\\n#### <a href=\\\"#user-content-top\\\" >邊框</a>\\r\\n- 使用說明: ```border: 粗細 樣式 顏色```\\r\\n- 可細分為以下三種細項屬性 \\r\\n  - 粗細 ```border-width``` \\r\\n  - 樣式 ```border-style```\\r\\n    - 實線 ```solid```\\r\\n    - 點狀線 ```dotted```\\r\\n    - 虛線 ```dashed```\\r\\n  - 顏色 ```border-color```\\r\\n- 可細分為以下四邊\\r\\n  - 上邊 ```border-top```\\r\\n  - 下邊 ```border-bottom```\\r\\n  - 左邊 ```border-left```\\r\\n  - 右邊 ```border-right```\\r\\n- 範例\\r\\n  - 定義邊框: ```border: 3px solid #000;```\\r\\n  - 修改四邊的顏色: ```border-color: red;```\\r\\n  - 修改上邊的樣式: ```border-top-style: dotted;```\\r\\n  - 去掉左邊邊框: ```border-left: none;```\\r\\n  - 製作朝下的紅色三角形\\r\\n    ```txt\\r\\n    width: 0;\\r\\n    height: 0;\\r\\n    border: 20px solid transparent;\\r\\n    border-top-color: red;\\r\\n    ```\\r\\n\\r\\n<hr id=\\\"user-content-corners\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\" >圓角</a>\\r\\n- [詳細請看 MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius)\\r\\n- 理解說明: 將指定半徑的圓放在容器\\\"內\\\"四角劃出圓弧四邊形\\r\\n- 使用說明\\r\\n  - ```border-radius: 半徑(可多個值)```\\r\\n  - 半徑可以用```%```或其他單位(px、em...)\\r\\n    - ```border-radius: 50%;```代表用該容器一半寬度做半徑畫成\\\"圓形\\\"\\r\\n  - 一個值(四角)\\r\\n  - 二個值\\r\\n    - 1.左上角和右下角\\r\\n    - 2.右上角和左下角\\r\\n  - 三個值\\r\\n    - 1.左上角\\r\\n    - 2.右上角和左下角\\r\\n    - 3.右下角\\r\\n  - 四個值\\r\\n    - 1.左上角\\r\\n    - 2.右上角\\r\\n    - 3.右下角\\r\\n    - 4.左下角\\r\\n- 高級方法範例: ```border-radius: 70% 30% 30% 70% / 60% 40% 60% 40%;```\\r\\n  - 理解說明: ```border-radius: top(左1 右2) bottom(右3 左4)/ right(上1 下4) left(上2 下3);```\\r\\n    - 1 ~ 4代表順序\\r\\n    - 每一角都可分為(水平邊 & 垂直邊,所以top=左上角水平邊+右上角水平邊,依此類推)\\r\\n    - 其他範例:\\r\\n      ```txt\\r\\n      border-radius: 70% 30%/ 60% 40%;\\r\\n      等於:\\r\\n      border-radius: top(左70% 右30%) bottom(右70% 左30%)/ right(上60% 下40%) left(上40% 下60%);\\r\\n      ```\\r\\n- 可細分為四角\\r\\n  - 左上角 ```border-top-left-radius```\\r\\n  - 右上角 ```border-top-right-radius```\\r\\n  - 右下角 ```border-bottom-right-radius```\\r\\n  - 左下角 ```border-bottom-left-radius```\\r\\n\\r\\n<hr id=\\\"user-content-box-shadow\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\">容器陰影</a>\\r\\n- 使用說明\\r\\n  - 四個值\\r\\n    - ```box-shadow: x偏移量 y偏移量 模糊程度 顏色;```\\r\\n  - 五個值\\r\\n    - ```box-shadow: x偏移量 y偏移量 模糊程度 延展出去的寬度 顏色;```\\r\\n  - 內陰影(前面加入 inset 關鍵字)\\r\\n    - ```box-shadow: inset x偏移量 y偏移量 模糊程度 (延展出去的寬度) 顏色;```\\r\\n  - 可以用逗號多重疊加\\r\\n    - ```box-shadow: 2px 2px 30px red, 4px 4px 40px blue, 6px 6px 50px green, inset 0px 0px 6px orange;```\\r\\n\\r\\n<hr id=\\\"user-content-background-and-gradient\\\" style=\\\"height: 4px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\">背景與漸變</a>\\r\\n#### <a href=\\\"#user-content-top\\\">漸變</a>\\r\\n- 逕向漸變\\r\\n  - [詳細請看 MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/radial-gradient())\\r\\n  - 使用方式(裡面可填多種顏色平均分配)\\r\\n    - ```background-image: radial-gradient(圓心座標, 開始顏色, 結束顏色);```\\r\\n  - 範例\\r\\n  ```css\\r\\n  background-image: radial-gradient(50% 50%, white, rgb(211, 211, 211));\\r\\n  /*上面等同於下面*/\\r\\n  background-image: radial-gradient(50% 50%, white 0%, rgb(211, 211, 211) 100%);\\r\\n  ``` \\r\\n- 線性漸變\\r\\n  - [詳細請看 MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient())\\r\\n  - 使用方式\\r\\n    - ```linear-gradient(方向, 開始顏色, 結束顏色);```\\r\\n  - 範例\\r\\n  ```css\\r\\n  background-image: linear-gradient(to right, red, blue);\\r\\n  /* 可以設定角度 */\\r\\n  background-image: linear-gradient(45deg, red, blue);\\r\\n  /* 從左到右平均分配顏色 */\\r\\n  background-image: linear-gradient(to right, red, yellow, orange, green, blue, purple);\\r\\n  /* 設定黃色在從左到右的20%出現 */\\r\\n  background-image: linear-gradient(to right, red, yellow 20%, blue);\\r\\n  ```\\r\\n\\r\\n<hr id=\\\"user-content-background\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\">背景</a>\\r\\n- ```background-color```\\r\\n  - 使用說明\\r\\n      - ```background-color: 顏色;```\\r\\n- ```background-image```\\r\\n  - 使用說明\\r\\n    - ``` background-image: url(圖片連結);```\\r\\n- ```background-attachment```\\r\\n  - 使用說明\\r\\n    - ```background-attachment: 屬性;```\\r\\n    - 屬性有三種依 \\\"容器背景圖片\\\" 查看變化\\r\\n      - ```fixed``` 容器拉滾動條不動,視窗拉滾動條不動\\r\\n      - ```scroll``` 容器拉滾動條不動,視窗拉滾動條動\\r\\n      - ```local``` 容器拉滾動條動,視窗拉滾動條動\\r\\n- ```background-clip```\\r\\n  - 使用說明\\r\\n    - ``` background-clip: 屬性;```\\r\\n    - 屬性有三種\\r\\n      - ```border-box``` 背景被剪裁到邊框盒\\r\\n      - ```padding-box``` 背景被剪裁到內邊距框\\r\\n      - ```content-box``` 背景被剪裁到內容框\\r\\n- ```background-origin```\\r\\n  - 使用說明\\r\\n    - ``` background-origin: 屬性;```\\r\\n    - 屬性有三種\\r\\n      - ```border-box``` 背景圖片以border區域為參考\\r\\n      - ```padding-box``` 背景圖片以padding區域為參考\\r\\n      - ```content-box``` 背景圖片以content區域為參考\\r\\n- ```background-position```\\r\\n  - 使用說明\\r\\n    - ``` background-position: 位置;```\\r\\n  - 範例\\r\\n  ```css\\r\\n  /* 常用屬性 */\\r\\n  background-position: top;\\r\\n  background-position: bottom;\\r\\n  background-position: left;\\r\\n  background-position: right;\\r\\n  background-position: center;\\r\\n\\r\\n  /* 從下往上50px 從右到左100px */\\r\\n  background-position: bottom 50px right 100px;\\r\\n\\r\\n  /* 以左上角為基準 x y */\\r\\n  background-position: 25% 75%;\\r\\n  background-position: 0 0;\\r\\n  background-position: 1cm 2cm;\\r\\n  background-position: 10ch 8em;\\r\\n  ```\\r\\n- ```background-repeat```\\r\\n  - [詳細請看 MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat)\\r\\n  - 使用說明\\r\\n    - ``` background-repeat: 屬性;```\\r\\n  - 範例\\r\\n  ```css\\r\\n  /* 橫向重複 */\\r\\n  background-repeat: repeat-x;\\r\\n  /* 垂直重複 */\\r\\n  background-repeat: repeat-y;\\r\\n  /* 默認 */\\r\\n  background-repeat: repeat;\\r\\n  /* 不重複 */\\r\\n  background-repeat: no-repeat;\\r\\n\\r\\n  /* 水平horizontal 垂直vertical */\\r\\n  background-repeat: no-repeat repeat;\\r\\n  ```\\r\\n- ```background-size```\\r\\n  - [詳細請看 MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/background-size)\\r\\n  - 使用說明\\r\\n    - ``` background-size: 屬性;```\\r\\n  - 範例\\r\\n  ```css\\r\\n  /* 代表寬300px 高隨意擴展 */\\r\\n  background-size: 300px auto;\\r\\n  /* 代表盒子寬25% 高25% */\\r\\n  background-size: 25% 25%;\\r\\n  /* \\r\\n    用一張圖片充滿盒子(不延展)\\r\\n    但若加入no-repeat則不充滿\\r\\n  */\\r\\n  background-size: contain;\\r\\n  background-repeat: no-repeat;\\r\\n  /* 用一張圖片充滿盒子(延展) */ \\r\\n  background-size: cover;\\r\\n  background-repeat: no-repeat;\\r\\n  ```\\r\\n- ```background 綜合簡寫```\\r\\n  - [詳細請看 MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/background)\\r\\n  - 使用說明\\r\\n  ```css\\r\\n  /* 裡面可以+-屬性,後面兩個屬性為 background-position */\\r\\n  background: yellow url(images/image.png) no-repeat center center;\\r\\n  ```\\r\\n- ```CSS精靈```\\r\\n  - 使用說明\\r\\n  ```css\\r\\n  /* \\r\\n    用一張大圖片裡面有多張icon\\r\\n    利用 background-position 去取得裡面其中一張icon\\r\\n    重點: 右下角為(0,0) 到達要剪裁圖示左上角再用寬高去剪裁圖片\\r\\n  */\\r\\n  width: 34px;\\r\\n  height: 32px;\\r\\n  background-image: url(images/image.png);\\r\\n  background-position: -66px -488px;\\r\\n  ```\\r\\n\\r\\n<hr id=\\\"user-content-transform\\\" style=\\\"height: 4px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\">2D&3D轉換</a>\\r\\n#### <a href=\\\"#user-content-top\\\">位移</a>\\r\\n- 與相對定位相同,會保留實際位置並渲染位移後的位置\\r\\n- 可以拆分 ```translateX``` ```translateY``` ```translateZ```\\r\\n```css\\r\\ntransform: translate(400px, 100px);\\r\\n/* 以下三個等價 */\\r\\ntransform: translate(400px);\\r\\ntransform: translate(400px, 0px);\\r\\ntransform: translateX(400px);\\r\\n/* 也可以用 % */\\r\\ntransform: translate(-50%, -50%);\\r\\n```\\r\\n<hr id=\\\"user-content-skew\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\">歪斜</a>\\r\\n```css\\r\\n/* x:橫向扭曲 y:縱向扭曲 */\\r\\ntransform: skew(10deg, 20deg);\\r\\n/* \\r\\n  當只有一個參數的時候，第二個參數默認為0deg，\\r\\n  下面為元素的水平方向逆時針傾斜45度，豎直方向傾斜0度\\r\\n*/\\r\\ntransform: skew(45deg);\\r\\n```\\r\\n\\r\\n<hr id=\\\"user-content-rotate\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\">旋轉</a>\\r\\n```css\\r\\n/* 正:順時針 負:逆時針 */\\r\\ntransform: rotate(30deg);\\r\\n/* 以盒子左上角为中心点进行旋转(可用%數替換:50% 50%為中心) */\\r\\ntransform-origin: 0 0;\\r\\ntransform: rotate(30deg);\\r\\n```\\r\\n\\r\\n<hr id=\\\"user-content-scale\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\">縮放</a>\\r\\n```css\\r\\n/* 整體縮小 0.66 倍 */\\r\\ntransform: scale(.66);\\r\\n/* \\r\\n  若要將 width: 1000px; height: 500px; 的元素\\r\\n  縮放為 width: 300px; height: 100px;\\r\\n  則 transform: scale(sx, sy)，\\r\\n  sx 表示宽度缩放為原元素的 sx 倍，sy 表示高度缩放為原元素的 sy 倍。\\r\\n  所以缩放為 transform: scale(300/1000, 100/500)，\\r\\n  即 transform: scale(.3, .2)\\r\\n*/\\r\\n```\\r\\n\\r\\n<hr id=\\\"user-content-3d-translate\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\">3D空間移動</a>\\r\\n```html\\r\\n<head>\\r\\n  <style>\\r\\n    p {\\r\\n      width: 200px;\\r\\n      height: 200px;\\r\\n      border: 1px solid #000;\\r\\n      background-color: orange;\\r\\n    }\\r\\n\\r\\n    .box1 {\\r\\n      width: 202px;\\r\\n      height: 202px;\\r\\n      border: 1px solid #000;\\r\\n      margin: 50px auto;\\r\\n      /* 若子標籤(演員)要顯示3d效果則父標籤(舞台)必須增加 perspective(視角遠近) */\\r\\n      perspective: 300px;\\r\\n    }\\r\\n\\r\\n    /* 想像面對螢幕為x軸,旁邊擴展為y軸*/\\r\\n    .box1 p {\\r\\n      /* 要注意當3d變型後,移動的x,y,z軸也會跟著傾斜 */\\r\\n      /* x軸順時鐘轉30度 */\\r\\n      transform: rotateX(30deg) translateX(100px) translateY(100px) translateZ(100px);\\r\\n    }\\r\\n    /* 不提transform: rotateZ(); 因為只是平面旋轉 */\\r\\n  </style>\\r\\n</head>\\r\\n\\r\\n<body>\\r\\n  <div class=\\\"box1\\\">\\r\\n    <p></p>\\r\\n  </div>\\r\\n</body>\\r\\n```\\r\\n\\r\\n<hr id=\\\"user-content-transition\\\" style=\\\"height: 4px;\\\">\\r\\n\\r\\n### 過渡與動畫\\r\\n#### <a href=\\\"#user-content-top\\\">過渡</a>\\r\\n- 所有數值類型的屬性都可使用過渡\\r\\n- 背景顏色與文字顏色都可使用過渡\\r\\n- 所有變形(2d與3d)都可使用過渡\\r\\n- 建議事項: 請先設定初始狀態\\r\\n- 過渡可切分四個屬性\\r\\n  - ```transition-property``` 那些屬性需要過渡\\r\\n  - ```transition-duration``` 動畫時間\\r\\n  - ```transition-timing-function``` 動畫變化曲線(緩動效果)\\r\\n  - ```transition-delay``` 延遲時間\\r\\n- 常用的緩衝屬性\\r\\n  - ```線性``` transition-timing-function: linear;\\r\\n  - ```緩慢的開始，中間變快，最後慢慢結束``` transition-timing-function: ease;\\r\\n  - ```先慢後快``` transition-timing-function: ease-in;\\r\\n  - ```先快後慢``` transition-timing-function: ease-out;\\r\\n  - ```緩慢的開始和結束``` transition-timing-function: ease-in-out;\\r\\n  - [貝塞爾曲線](https://cubic-bezier.com) transition-timing-function: cubic-bezier(.29,-0.98,.5,1.76);\\r\\n\\r\\n- 實際使用\\r\\n```css\\r\\n/* \\r\\n  可以只設定兩個屬性:\\r\\n  1.用來設置哪個屬性需要過渡\\r\\n  2.設置過渡的時間 \\r\\n*/\\r\\ntransition: background 1s;\\r\\n\\r\\n/* \\r\\n  1:需要變化的屬性 \\r\\n  2:動畫時長(必須以s(秒)為單位) \\r\\n  3.變化速度曲線 \\r\\n  4.延遲時間(可ms) \\r\\n*/\\r\\ntransition: width 5s linear 0s;\\r\\n\\r\\n/* 過渡動畫範例 */\\r\\n.test {\\r\\n  width: 200px;\\r\\n  height: 200px;\\r\\n  background-color: orange;\\r\\n  margin-bottom: 10px;\\r\\n  transition: transform 1s linear 0s;\\r\\n}\\r\\n\\r\\n.test:hover {\\r\\n  transform: scale(1.2) rotate(360deg);\\r\\n}\\r\\n\\r\\n/* \\r\\n  若有多個屬性使用過渡\\r\\n  則可用all屬性代替(若屬性只有一個則請勿使用,有效率問題) */\\r\\n.test2 {\\r\\n  /* 設定初始狀態 */\\r\\n  width: 200px;\\r\\n  height: 200px;\\r\\n  background-color: orange;\\r\\n  border-radius: 0;\\r\\n  /* 設置過渡 */\\r\\n  transition: all 1s linear 0s;\\r\\n}\\r\\n.test2:hover {\\r\\n  width: 400px;\\r\\n  height: 160px;\\r\\n  background-color: green;\\r\\n  border-radius: 50%;\\r\\n}\\r\\n```\\r\\n- 特殊範例:旋轉立體正方形\\r\\n```html\\r\\n<head>\\r\\n  <style>\\r\\n    section {\\r\\n      width: 200px;\\r\\n      height: 200px;\\r\\n      margin: 100px auto;\\r\\n      perspective: 10000px;\\r\\n    }\\r\\n\\r\\n    .box {\\r\\n      width: 200px;\\r\\n      height: 200px;\\r\\n      perspective: 10000px;\\r\\n      position: relative;\\r\\n      /* 設置變化類型，保留容器内3D效果 */\\r\\n      /* 該容器是舞台也是演員，容器攜帶裡面的p一起轉 */\\r\\n      transform-style: preserve-3d;\\r\\n      transition: all 10s ease 0s;\\r\\n    }\\r\\n\\r\\n    section:hover .box {\\r\\n      transform: rotateX(360deg) rotateY(360deg);\\r\\n    }\\r\\n\\r\\n    .box p {\\r\\n      position: absolute;\\r\\n      top: 0;\\r\\n      left: 0;\\r\\n      width: 200px;\\r\\n      height: 200px;\\r\\n    }\\r\\n\\r\\n    .box p:nth-child(1) {\\r\\n      background-color: rgba(219, 56, 211, 0.486);\\r\\n      /* 前面 */\\r\\n      transform: translateZ(100px);\\r\\n    }\\r\\n\\r\\n    .box p:nth-child(2) {\\r\\n      background-color: rgba(42, 128, 199, 0.486);\\r\\n      /* 顶部面 */\\r\\n      transform: rotateX(90deg) translateZ(100px);\\r\\n    }\\r\\n\\r\\n    .box p:nth-child(3) {\\r\\n      background-color: rgba(56, 219, 83, 0.486);\\r\\n      /* 背面 */\\r\\n      transform: rotateX(180deg) translateZ(100px);\\r\\n    }\\r\\n\\r\\n    .box p:nth-child(4) {\\r\\n      background-color: rgba(213, 216, 32, 0.486);\\r\\n      /* 底部面 */\\r\\n      transform: rotateX(-90deg) translateZ(100px);\\r\\n    }\\r\\n\\r\\n    .box p:nth-child(5) {\\r\\n      background-color: rgba(236, 82, 102, 0.486);\\r\\n      /* 侧面 */\\r\\n      transform: rotateY(90deg) translateZ(100px);\\r\\n    }\\r\\n\\r\\n    .box p:nth-child(6) {\\r\\n      background-color: rgba(119, 17, 236, 0.486);\\r\\n      /* 侧面 */\\r\\n      transform: rotateY(-90deg) translateZ(100px);\\r\\n    }\\r\\n  </style>\\r\\n</head>\\r\\n\\r\\n<body>\\r\\n  <section>\\r\\n    <div class=\\\"box\\\">\\r\\n      <p></p>\\r\\n      <p></p>\\r\\n      <p></p>\\r\\n      <p></p>\\r\\n      <p></p>\\r\\n      <p></p>\\r\\n    </div>\\r\\n  </section>\\r\\n</body>\\r\\n```\\r\\n\\r\\n<hr id=\\\"user-content-animation\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\">動畫</a>\\r\\n- 使用方式\\r\\n  - ```animation: 動畫名稱 持續幾秒 緩衝效果 延遲幾秒 多少次(infinite: 無數次);```\\r\\n- 可細分多個子屬性\\r\\n  - ```animation-delay``` 定義元素讀取完畢到動畫開始的間隔時間。\\r\\n  - ```animation-direction``` 定義是否動畫播放完畢後將會反向播放。\\r\\n  - ```animation-duration``` 定義動畫完成一次週期的時間。\\r\\n  - ```animation-iteration-count``` 定義動畫重複的次數。可用 infinite 來讓動畫永遠重複播放。\\r\\n  - ```animation-name```  @keyframes 的名字。\\r\\n  - ```animation-play-state``` 控制動畫的播放狀態。有 ```pause``` ```running``` 兩種值，後者為預設值。\\r\\n  - ```animation-timing-function``` 定義動畫轉變時時間的加速曲線 (例如 linear)。\\r\\n  - ```animation-fill-mode``` 定義元素在動畫播放外(動畫開始前及結束後)的狀態。\\r\\n- 範例\\r\\n```css\\r\\n/* 無限次執行 */\\r\\nanimation: r 1s linear 0s infinite;\\r\\n/* alternate: 偶數次自動逆向執行 */\\r\\nanimation: r 2s linear 0s infinite alternate;\\r\\n/* forwards: 停止在最後結束狀態 */\\r\\nanimation: r 1s linear 0s forwards;\\r\\n\\r\\n@keyframes r {\\r\\n  from {\\r\\n      transform: rotate(0);\\r\\n  }\\r\\n\\r\\n  to {\\r\\n      transform: rotate(360deg);\\r\\n  }\\r\\n}\\r\\n\\r\\n/* 可以利用百分比分階段來做動畫 */\\r\\n@keyframes changeColor {\\r\\n  0% {\\r\\n    background-color: red;\\r\\n  }\\r\\n  20% {\\r\\n    background-color: yellow;\\r\\n  }\\r\\n  40% {\\r\\n    background-color: blue;\\r\\n  }\\r\\n  60% {\\r\\n    background-color: green;\\r\\n  }\\r\\n  80% {\\r\\n    background-color: purple;\\r\\n  }\\r\\n  100% {\\r\\n    background-color: orange;\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n<hr id=\\\"user-content-flex-introduce\\\" style=\\\"height: 4px;\\\">\\r\\n\\r\\n### Flex 布局\\r\\n#### <a href=\\\"#user-content-top\\\">基本概念與介紹</a>\\r\\n- 介紹：```flex``` 是 ```Flexible Box``` 縮寫，代表靈活或彈性的盒子，所以也稱做\\\"彈性布局\\\"\\r\\n- ```flex``` 容器定義：採用 ```flex``` 布局的元素\\r\\n- ```flex``` 項目定義：```flex``` 容器的所有子元素\\r\\n- 若需要使用 ```flex``` 程式碼請搭配以下 ```css``` 裝飾\\r\\n  ```css\\r\\n  .box {\\r\\n    background-color: white;\\r\\n    margin: 0 0 55px;\\r\\n  }\\r\\n  .box-item {\\r\\n    width: 200px;\\r\\n    height: 200px;\\r\\n    line-height: 200px;\\r\\n    vertical-align: middle;\\r\\n    margin: 5px;\\r\\n    background-color: #ffd200;\\r\\n    font-size: 100px;\\r\\n    color: white;\\r\\n    text-align: center;\\r\\n  }\\r\\n  ```\\r\\n\\r\\n<hr id=\\\"user-content-flex-display\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\">display 屬性</a>\\r\\n- 在 ```flex``` 布局中可以使用 ```display``` 屬性使元素做彈性顯示\\r\\n- ```display``` 目前有以下顯示方式：\\r\\n  - ```flex```：將對象作為彈性盒子顯示，寬度自動為 ```100%```，如：\\r\\n    ```html\\r\\n    <style>\\r\\n      .box {\\r\\n        display: flex;\\r\\n        /*width: 100%;*/\\r\\n      }\\r\\n    </style>\\r\\n    <body>\\r\\n      <div class=\\\"box\\\">\\r\\n        <div class=\\\"box-item\\\">1</div>\\r\\n        <div class=\\\"box-item\\\">2</div>\\r\\n        <div class=\\\"box-item\\\">3</div>\\r\\n        <div class=\\\"box-item\\\">4</div>\\r\\n      </div>\\r\\n    </body>\\r\\n    ```\\r\\n  - ```inline-flex```：將對象作為內聯塊(```inline-block```)彈性盒子顯示\\r\\n    ```html\\r\\n    <style>\\r\\n      .box {\\r\\n        display: inline-flex;\\r\\n      }\\r\\n    </style>\\r\\n    <body>\\r\\n      <div class=\\\"box\\\">\\r\\n        <div class=\\\"box-item\\\">1</div>\\r\\n        <div class=\\\"box-item\\\">2</div>\\r\\n        <div class=\\\"box-item\\\">3</div>\\r\\n        <div class=\\\"box-item\\\">4</div>\\r\\n      </div>\\r\\n    </body>\\r\\n    ```\\r\\n\\r\\n<hr id=\\\"user-content-flex-flex-direction\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\">flex-direction 屬性</a>\\r\\n- ```flex-direction``` 屬性：決定項目排列(主軸)的方向\\r\\n- 有四個選項：```row```、```row-reverse```、```column```、```column-reverse```\\r\\n- 以下分別來介紹：\\r\\n  - ```row``` (默認值)：水平方向、起點在左端、項目往右排列(1234)\\r\\n    ```html\\r\\n    <style>\\r\\n      .box {\\r\\n        display: flex;\\r\\n        flex-direction: row;\\r\\n      }\\r\\n    </style>\\r\\n    <body>\\r\\n      <div class=\\\"box\\\">\\r\\n        <div class=\\\"box-item\\\">1</div>\\r\\n        <div class=\\\"box-item\\\">2</div>\\r\\n        <div class=\\\"box-item\\\">3</div>\\r\\n        <div class=\\\"box-item\\\">4</div>\\r\\n      </div>\\r\\n    </body>\\r\\n    ```\\r\\n  - ```row-reverse```：水平方向、起點在右端、項目往左排列(4321)\\r\\n    ```html\\r\\n    <style>\\r\\n      .box {\\r\\n        display: flex;\\r\\n        flex-direction: row-reverse;\\r\\n      }\\r\\n    </style>\\r\\n    <body>\\r\\n      <div class=\\\"box\\\">\\r\\n        <div class=\\\"box-item\\\">1</div>\\r\\n        <div class=\\\"box-item\\\">2</div>\\r\\n        <div class=\\\"box-item\\\">3</div>\\r\\n        <div class=\\\"box-item\\\">4</div>\\r\\n      </div>\\r\\n    </body>\\r\\n    ```\\r\\n  - ```column```：垂直方向、起點在頂端、項目往下排列(1234、預設靠左)\\r\\n    ```html\\r\\n    <style>\\r\\n      .box {\\r\\n        display: flex;\\r\\n        flex-direction: column;\\r\\n      }\\r\\n    </style>\\r\\n    <body>\\r\\n      <div class=\\\"box\\\">\\r\\n        <div class=\\\"box-item\\\">1</div>\\r\\n        <div class=\\\"box-item\\\">2</div>\\r\\n        <div class=\\\"box-item\\\">3</div>\\r\\n        <div class=\\\"box-item\\\">4</div>\\r\\n      </div>\\r\\n    </body>\\r\\n    ```\\r\\n  - ```column-reverse```：垂直方向、起點在頂端、項目往下排列(4321、預設靠左)\\r\\n    ```html\\r\\n    <style>\\r\\n      .box {\\r\\n        display: flex;\\r\\n        flex-direction: column-reverse;\\r\\n      }\\r\\n    </style>\\r\\n    <body>\\r\\n      <div class=\\\"box\\\">\\r\\n        <div class=\\\"box-item\\\">1</div>\\r\\n        <div class=\\\"box-item\\\">2</div>\\r\\n        <div class=\\\"box-item\\\">3</div>\\r\\n        <div class=\\\"box-item\\\">4</div>\\r\\n      </div>\\r\\n    </body>\\r\\n    ```\\r\\n\\r\\n<hr id=\\\"user-content-flex-flex-wrap\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\">flex-wrap 屬性</a>\\r\\n- ```flex-wrap``` 屬性：若最大寬度排不下該如何換行\\r\\n- 有三個選項：```nowrap```、```wrap```、```wrap-reverse```\\r\\n- 以下分別來介紹(主軸以水平方向做範例)：\\r\\n  - ```nowrap``` (默認值)：不換行，若有多個項目，則會將每項寬度平均縮減\\r\\n    ```html\\r\\n    <style>\\r\\n      .box {\\r\\n        display: flex;\\r\\n        flex-direction: row;\\r\\n        flex-wrap: nowrap;\\r\\n      }\\r\\n    </style>\\r\\n    <body>\\r\\n      <div class=\\\"box\\\">\\r\\n        <div class=\\\"box-item\\\">1</div>\\r\\n        <div class=\\\"box-item\\\">2</div>\\r\\n        <div class=\\\"box-item\\\">3</div>\\r\\n        <div class=\\\"box-item\\\">4</div>\\r\\n      </div>\\r\\n    </body>\\r\\n    ```\\r\\n  - ```wrap```：若項目一行不夠放則換行，第一行在上方，從上往下放\\r\\n    ```html\\r\\n    <style>\\r\\n      .box {\\r\\n        display: flex;\\r\\n        flex-direction: row;\\r\\n        flex-wrap: wrap;\\r\\n      }\\r\\n    </style>\\r\\n    <body>\\r\\n      <div class=\\\"box\\\">\\r\\n        <div class=\\\"box-item\\\">1</div>\\r\\n        <div class=\\\"box-item\\\">2</div>\\r\\n        <div class=\\\"box-item\\\">3</div>\\r\\n        <div class=\\\"box-item\\\">4</div>\\r\\n      </div>\\r\\n    </body>\\r\\n    ```\\r\\n  - ```wrap-reverse```：若項目一行不夠放則換行，第一行在下方，從下往上放\\r\\n    ```html\\r\\n    <style>\\r\\n      .box {\\r\\n        display: flex;\\r\\n        flex-direction: row;\\r\\n        flex-wrap: wrap;\\r\\n      }\\r\\n    </style>\\r\\n    <body>\\r\\n      <div class=\\\"box\\\">\\r\\n        <div class=\\\"box-item\\\">1</div>\\r\\n        <div class=\\\"box-item\\\">2</div>\\r\\n        <div class=\\\"box-item\\\">3</div>\\r\\n        <div class=\\\"box-item\\\">4</div>\\r\\n      </div>\\r\\n    </body>\\r\\n    ```\\r\\n\\r\\n<hr id=\\\"user-content-flex-flex-flow\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\">flex-flow 屬性</a>\\r\\n- ```flex-flow``` 屬性為 ```flex-direction``` 與 ```flex-wrap``` 的簡寫形式，默認值為 ```row nowrap```\\r\\n- 範例\\r\\n  ```css\\r\\n  .box {\\r\\n    flex-flow: row nowrap;\\r\\n    flex-flow: row wrap;\\r\\n    flex-flow: row wrap-reverse;\\r\\n  }\\r\\n  ```\\r\\n\\r\\n<hr id=\\\"user-content-flex-justify-content\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\">justify-content 屬性</a>\\r\\n- ```justify-content``` 屬性：容器中項目在主軸上的對齊方式\\r\\n- 有五個選項：```flex-start```、```flex-end```、```center```、```space-between```、```space-around```\\r\\n- 以下分別來介紹(主軸以水平方向做範例)：\\r\\n  - ```flex-start``` (默認值)：主軸上起點對齊(向左靠)\\r\\n    ```html\\r\\n    <style>\\r\\n      .box {\\r\\n        display: flex;\\r\\n        justify-content: flex-start;\\r\\n      }\\r\\n    </style>\\r\\n    <body>\\r\\n      <div class=\\\"box\\\">\\r\\n        <div class=\\\"box-item\\\">1</div>\\r\\n        <div class=\\\"box-item\\\">2</div>\\r\\n        <div class=\\\"box-item\\\">3</div>\\r\\n        <div class=\\\"box-item\\\">4</div>\\r\\n      </div>\\r\\n    </body>\\r\\n    ```\\r\\n  - ```flex-end```：主軸上終點對齊(向右靠)\\r\\n    ```html\\r\\n    <style>\\r\\n      .box {\\r\\n        display: flex;\\r\\n        justify-content: flex-end;\\r\\n      }\\r\\n    </style>\\r\\n    <body>\\r\\n      <div class=\\\"box\\\">\\r\\n        <div class=\\\"box-item\\\">1</div>\\r\\n        <div class=\\\"box-item\\\">2</div>\\r\\n        <div class=\\\"box-item\\\">3</div>\\r\\n        <div class=\\\"box-item\\\">4</div>\\r\\n      </div>\\r\\n    </body>\\r\\n    ```\\r\\n  - ```center```：主軸上居中\\r\\n    ```html\\r\\n    <style>\\r\\n      .box {\\r\\n        display: flex;\\r\\n        justify-content: center;\\r\\n      }\\r\\n    </style>\\r\\n    <body>\\r\\n      <div class=\\\"box\\\">\\r\\n        <div class=\\\"box-item\\\">1</div>\\r\\n        <div class=\\\"box-item\\\">2</div>\\r\\n        <div class=\\\"box-item\\\">3</div>\\r\\n        <div class=\\\"box-item\\\">4</div>\\r\\n      </div>\\r\\n    </body>\\r\\n    ```\\r\\n  - ```space-between```：將所有項目平均分散在容器的主軸上，項目間間隔都相同，起始與最終\\\"不含\\\"間隔\\r\\n    ```html\\r\\n    <style>\\r\\n      .box {\\r\\n        display: flex;\\r\\n        justify-content: space-between;\\r\\n      }\\r\\n    </style>\\r\\n    <body>\\r\\n      <div class=\\\"box\\\">\\r\\n        <div class=\\\"box-item\\\">1</div>\\r\\n        <div class=\\\"box-item\\\">2</div>\\r\\n        <div class=\\\"box-item\\\">3</div>\\r\\n        <div class=\\\"box-item\\\">4</div>\\r\\n      </div>\\r\\n    </body>\\r\\n    ```\\r\\n  - ```space-around```：將所有項目平均分散在容器的主軸上，項目間間隔都相同(為最左/右邊間隔兩倍)，起始與最終\\\"含\\\"間隔\\r\\n    ```html\\r\\n    <style>\\r\\n      .box {\\r\\n        display: flex;\\r\\n        justify-content: space-around;\\r\\n      }\\r\\n    </style>\\r\\n    <body>\\r\\n      <div class=\\\"box\\\">\\r\\n        <div class=\\\"box-item\\\">1</div>\\r\\n        <div class=\\\"box-item\\\">2</div>\\r\\n        <div class=\\\"box-item\\\">3</div>\\r\\n        <div class=\\\"box-item\\\">4</div>\\r\\n      </div>\\r\\n    </body>\\r\\n    ```\\r\\n\\r\\n<hr id=\\\"user-content-flex-align-items\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\">align-items 屬性</a>\\r\\n- ```align-items``` 屬性：在容器中項目在交叉軸上如何對齊\\r\\n- 有五個選項：```flex-start```、```flex-end```、```center```、```baseline```、```stretch```\\r\\n- 以下分別來介紹(交叉軸以垂直方向做範例)：\\r\\n  - ```flex-start```：以交叉軸起點對齊(頂部對齊)\\r\\n    ```html\\r\\n    <style>\\r\\n      .box {\\r\\n        display: flex;\\r\\n        align-items: flex-start;\\r\\n      }\\r\\n      .item-tall {\\r\\n        height: 400px;\\r\\n        line-height: 400px;\\r\\n      }\\r\\n    </style>\\r\\n    <body>\\r\\n      <div class=\\\"box\\\">\\r\\n        <div class=\\\"box-item\\\">1</div>\\r\\n        <div class=\\\"box-item item-tall\\\">2</div>\\r\\n        <div class=\\\"box-item\\\">3</div>\\r\\n        <div class=\\\"box-item item-tall\\\">4</div>\\r\\n      </div>\\r\\n    </body>\\r\\n    ```\\r\\n  - ```flex-end```：以交叉軸終點對齊(底部對齊)\\r\\n    ```html\\r\\n    <style>\\r\\n      .box {\\r\\n        display: flex;\\r\\n        align-items: flex-end;\\r\\n      }\\r\\n      .item-tall {\\r\\n        height: 400px;\\r\\n        line-height: 400px;\\r\\n      }\\r\\n    </style>\\r\\n    <body>\\r\\n      <div class=\\\"box\\\">\\r\\n        <div class=\\\"box-item\\\">1</div>\\r\\n        <div class=\\\"box-item item-tall\\\">2</div>\\r\\n        <div class=\\\"box-item\\\">3</div>\\r\\n        <div class=\\\"box-item item-tall\\\">4</div>\\r\\n      </div>\\r\\n    </body>\\r\\n    ```\\r\\n  - ```center```：以交叉軸中點對齊(中間對齊、預設靠左)\\r\\n    ```html\\r\\n    <style>\\r\\n      .box {\\r\\n        display: flex;\\r\\n        align-items: center;\\r\\n      }\\r\\n      .item-tall {\\r\\n        height: 400px;\\r\\n        line-height: 400px;\\r\\n      }\\r\\n    </style>\\r\\n    <body>\\r\\n      <div class=\\\"box\\\">\\r\\n        <div class=\\\"box-item\\\">1</div>\\r\\n        <div class=\\\"box-item item-tall\\\">2</div>\\r\\n        <div class=\\\"box-item\\\">3</div>\\r\\n        <div class=\\\"box-item item-tall\\\">4</div>\\r\\n      </div>\\r\\n    </body>\\r\\n    ```\\r\\n  - ```baseline```：容器內項目的第一行文字的基線對齊(預設靠左)\\r\\n    ```html\\r\\n    <style>\\r\\n      .box {\\r\\n        display: flex;\\r\\n        align-items: baseline;\\r\\n      }\\r\\n      .box-item{\\r\\n        font-size: 88px;\\r\\n        line-height: initial;\\r\\n        text-decoration: underline;\\r\\n      }\\r\\n      .item-tall {\\r\\n        font-size: 122px;\\r\\n        line-height: initial;\\r\\n      }\\r\\n    </style>\\r\\n    <body>\\r\\n      <div class=\\\"box\\\">\\r\\n        <div class=\\\"box-item\\\">1</div>\\r\\n        <div class=\\\"box-item item-tall\\\">2</div>\\r\\n        <div class=\\\"box-item\\\">3</div>\\r\\n        <div class=\\\"box-item item-tall\\\">4</div>\\r\\n      </div>\\r\\n    </body>\\r\\n    ```\\r\\n  - ```stretch``` (默認值)：若容器內項目未設高度或 ```auto```，則自動延展至容器的高度\\r\\n    ```html\\r\\n    <style>\\r\\n      .box {\\r\\n        display: flex;\\r\\n        align-items: stretch;\\r\\n      }\\r\\n      .box-item {\\r\\n        height: auto;\\r\\n      }\\r\\n      .item-tall {\\r\\n        height: 400px;\\r\\n        line-height: 400px;\\r\\n      }\\r\\n    </style>\\r\\n    <body>\\r\\n      <div class=\\\"box\\\">\\r\\n        <div class=\\\"box-item\\\">1</div>\\r\\n        <div class=\\\"box-item item-tall\\\">2</div>\\r\\n        <div class=\\\"box-item\\\">3</div>\\r\\n        <div class=\\\"box-item item-tall\\\">4</div>\\r\\n      </div>\\r\\n    </body>\\r\\n    ```\\r\\n\\r\\n<hr id=\\\"user-content-flex-align-content\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\">align-content 屬性</a>\\r\\n- ```align-content``` 屬性：在容器中項目有多行(多個主軸)在交叉軸的對齊方式\\r\\n  - 若只有一行(單主軸)，則該屬性不起作用\\r\\n- 有六個選項：```flex-start```、```flex-end```、```center```、```space-between```、```space-around```、```stretch```\\r\\n- 以下分別來介紹(交叉軸以垂直方向做範例)：\\r\\n  - ```flex-start```：以交叉軸的起點對齊(頂部對齊)\\r\\n    ```html\\r\\n    <style>\\r\\n      .box {\\r\\n        height: 800px;\\r\\n        display: flex;\\r\\n        flex-wrap: wrap;\\r\\n        align-content: flex-start;\\r\\n      }\\r\\n    </style>\\r\\n    <body>\\r\\n      <div class=\\\"box\\\">\\r\\n        <div class=\\\"box-item\\\">1</div>\\r\\n        <div class=\\\"box-item\\\">2</div>\\r\\n        <div class=\\\"box-item\\\">3</div>\\r\\n        <div class=\\\"box-item\\\">4</div>\\r\\n        <div class=\\\"box-item\\\">5</div>\\r\\n        <div class=\\\"box-item\\\">6</div>\\r\\n        <div class=\\\"box-item\\\">7</div>\\r\\n        <div class=\\\"box-item\\\">8</div>\\r\\n        <div class=\\\"box-item\\\">9</div>\\r\\n      </div>\\r\\n    </body>\\r\\n    ```\\r\\n  - ```flex-end```：以交叉軸的終點對齊(底部對齊)\\r\\n    ```html\\r\\n    <style>\\r\\n      .box {\\r\\n        height: 800px;\\r\\n        display: flex;\\r\\n        flex-wrap: wrap;\\r\\n        align-content: flex-end;\\r\\n      }\\r\\n    </style>\\r\\n    <body>\\r\\n      <div class=\\\"box\\\">\\r\\n        <div class=\\\"box-item\\\">1</div>\\r\\n        <div class=\\\"box-item\\\">2</div>\\r\\n        <div class=\\\"box-item\\\">3</div>\\r\\n        <div class=\\\"box-item\\\">4</div>\\r\\n        <div class=\\\"box-item\\\">5</div>\\r\\n        <div class=\\\"box-item\\\">6</div>\\r\\n        <div class=\\\"box-item\\\">7</div>\\r\\n        <div class=\\\"box-item\\\">8</div>\\r\\n        <div class=\\\"box-item\\\">9</div>\\r\\n      </div>\\r\\n    </body>\\r\\n    ```\\r\\n  - ```center```：以交叉軸的中點對齊(中間對齊、預設靠左)\\r\\n    ```html\\r\\n    <style>\\r\\n      .box {\\r\\n        height: 800px;\\r\\n        display: flex;\\r\\n        flex-wrap: wrap;\\r\\n        align-content: center;\\r\\n      }\\r\\n    </style>\\r\\n    <body>\\r\\n      <div class=\\\"box\\\">\\r\\n        <div class=\\\"box-item\\\">1</div>\\r\\n        <div class=\\\"box-item\\\">2</div>\\r\\n        <div class=\\\"box-item\\\">3</div>\\r\\n        <div class=\\\"box-item\\\">4</div>\\r\\n        <div class=\\\"box-item\\\">5</div>\\r\\n        <div class=\\\"box-item\\\">6</div>\\r\\n        <div class=\\\"box-item\\\">7</div>\\r\\n        <div class=\\\"box-item\\\">8</div>\\r\\n        <div class=\\\"box-item\\\">9</div>\\r\\n      </div>\\r\\n    </body>\\r\\n    ```\\r\\n  - ```space-between```：將所有項目平均分散在容器交叉軸上，項目間間隔都相同，起始(頂部)與最終(底部)\\\"不含\\\"間隔\\r\\n    ```html\\r\\n    <style>\\r\\n      .box {\\r\\n        height: 800px;\\r\\n        display: flex;\\r\\n        flex-wrap: wrap;\\r\\n        align-content: space-between;\\r\\n      }\\r\\n    </style>\\r\\n    <body>\\r\\n      <div class=\\\"box\\\">\\r\\n        <div class=\\\"box-item\\\">1</div>\\r\\n        <div class=\\\"box-item\\\">2</div>\\r\\n        <div class=\\\"box-item\\\">3</div>\\r\\n        <div class=\\\"box-item\\\">4</div>\\r\\n        <div class=\\\"box-item\\\">5</div>\\r\\n        <div class=\\\"box-item\\\">6</div>\\r\\n        <div class=\\\"box-item\\\">7</div>\\r\\n        <div class=\\\"box-item\\\">8</div>\\r\\n        <div class=\\\"box-item\\\">9</div>\\r\\n      </div>\\r\\n    </body>\\r\\n    ```\\r\\n  - ```space-around```：將所有項目平均分散在容器交叉軸上，項目間間隔都相同(為頂/底部間隔兩倍)，起始(頂部)與最終(底部)\\\"含\\\"間隔\\r\\n    ```html\\r\\n    <style>\\r\\n      .box {\\r\\n        height: 800px;\\r\\n        display: flex;\\r\\n        flex-wrap: wrap;\\r\\n        align-content: space-around;\\r\\n      }\\r\\n    </style>\\r\\n    <body>\\r\\n      <div class=\\\"box\\\">\\r\\n        <div class=\\\"box-item\\\">1</div>\\r\\n        <div class=\\\"box-item\\\">2</div>\\r\\n        <div class=\\\"box-item\\\">3</div>\\r\\n        <div class=\\\"box-item\\\">4</div>\\r\\n        <div class=\\\"box-item\\\">5</div>\\r\\n        <div class=\\\"box-item\\\">6</div>\\r\\n        <div class=\\\"box-item\\\">7</div>\\r\\n        <div class=\\\"box-item\\\">8</div>\\r\\n        <div class=\\\"box-item\\\">9</div>\\r\\n      </div>\\r\\n    </body>\\r\\n    ```\\r\\n  - ```stretch``` (默認值)：若容器內多行的項目未設高度或 ```auto```，則自動延展至容器的高度\\r\\n    ```html\\r\\n    <style>\\r\\n      .box {\\r\\n        height: 800px;\\r\\n        display: flex;\\r\\n        flex-wrap: wrap;\\r\\n        align-content: stretch;\\r\\n      }\\r\\n      .box-item {\\r\\n        height: auto;\\r\\n      }\\r\\n    </style>\\r\\n    <body>\\r\\n      <div class=\\\"box\\\">\\r\\n        <div class=\\\"box-item\\\">1</div>\\r\\n        <div class=\\\"box-item\\\">2</div>\\r\\n        <div class=\\\"box-item\\\">3</div>\\r\\n        <div class=\\\"box-item\\\">4</div>\\r\\n        <div class=\\\"box-item\\\">5</div>\\r\\n        <div class=\\\"box-item\\\">6</div>\\r\\n        <div class=\\\"box-item\\\">7</div>\\r\\n        <div class=\\\"box-item\\\">8</div>\\r\\n        <div class=\\\"box-item\\\">9</div>\\r\\n      </div>\\r\\n    </body>\\r\\n    ```\\r\\n\\r\\n<hr id=\\\"user-content-flex-item-order\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\">order 屬性</a>\\r\\n- ```order``` 屬性：代表項目的排列順序，數值(整數)越小排列越靠前，默認值為 ```0```\\r\\n- 範例\\r\\n  ```html\\r\\n  <style>\\r\\n    .box {\\r\\n      display: flex;\\r\\n    }\\r\\n    .order {\\r\\n        order: -1;\\r\\n    }\\r\\n  </style>\\r\\n  <body>\\r\\n    <!-- 312 -->\\r\\n    <div class=\\\"box\\\">\\r\\n      <div class=\\\"box-item\\\">1</div>\\r\\n      <div class=\\\"box-item\\\">2</div>\\r\\n      <div class=\\\"box-item order\\\">3</div>\\r\\n    </div>\\r\\n  </body>\\r\\n  ```\\r\\n\\r\\n<hr id=\\\"user-content-flex-item-flex-grow\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\">flex-grow 屬性</a>\\r\\n- ```flex-grow``` 屬性：代表容器內項目放大比例，默認值為 ```0```(無效果，即若存在剩餘空間也不放大)\\r\\n  - 若所有項目屬性值皆為 ```1```，則項目將等分剩餘空間\\r\\n  - 若其中一個項目屬性值為 ```2``` ，其他項目屬性皆為 ```1```，則前者佔據的剩餘空間會比其他項目多一倍\\r\\n  - 若其中一個項目為默認屬性值並且有寬度，則剩餘屬性值大於 ```0``` 的項目將等分其他容器寬度\\r\\n- 範例\\r\\n  ```html\\r\\n  <style>\\r\\n    .box {\\r\\n      display: flex;\\r\\n    }\\r\\n    .box-item {\\r\\n        flex-grow: 1;\\r\\n    }\\r\\n    .grow-2 {\\r\\n      flex-grow: 2;\\r\\n    }\\r\\n  </style>\\r\\n  <body>\\r\\n    <!-- 區塊3 會比區塊1、區塊2延展一倍 -->\\r\\n    <div class=\\\"box\\\">\\r\\n      <div class=\\\"box-item\\\">1</div>\\r\\n      <div class=\\\"box-item\\\">2</div>\\r\\n      <div class=\\\"box-item grow-2\\\">3</div>\\r\\n    </div>\\r\\n  </body>\\r\\n  ```\\r\\n\\r\\n<hr id=\\\"user-content-flex-item-flex-shrink\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\">flex-shrink 屬性</a>\\r\\n- ```flex-shrink``` 屬性：代表項目的縮小比例，默認值為 ```1```，若容器寬度不足，則會將項目縮小\\r\\n  - 若所有項目的屬性值皆為 ```1```，則等比例縮小\\r\\n  - 若其中一個项目的屬性值為 ```0```，其他項目屬性值為 ```1```，則前者不縮小，其他項目等比例縮小\\r\\n  - 負值對該屬性無效\\r\\n- 範例\\r\\n  ```html\\r\\n  <style>\\r\\n    .box {\\r\\n      display: flex;\\r\\n    }\\r\\n    .box-item {\\r\\n        flex-shrink: 1;\\r\\n    }\\r\\n    .shrink{\\r\\n      flex-shrink: 0;\\r\\n    }\\r\\n  </style>\\r\\n  <body>\\r\\n    <!-- 若空間不足則區塊3不會變，區塊1245將縮小  -->\\r\\n    <div class=\\\"box\\\">\\r\\n      <div class=\\\"box-item\\\">1</div>\\r\\n      <div class=\\\"box-item\\\">2</div>\\r\\n      <div class=\\\"box-item shrink\\\">3</div>\\r\\n      <div class=\\\"box-item\\\">4</div>\\r\\n      <div class=\\\"box-item\\\">5</div>\\r\\n    </div>\\r\\n  </body>\\r\\n  ```\\r\\n\\r\\n<hr id=\\\"user-content-flex-item-flex-basis\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\">flex-basis 屬性</a>\\r\\n- ```flex-basis``` 屬性：代表在分配多餘的空間時，項目佔據多少主軸空間\\r\\n  - 瀏覽器將根據此屬性計算主軸是否有多餘空間，默認值為 ```auto```，即項目本來大小\\r\\n- 與 ```width/height``` 的差別在於：\\r\\n  - 當 ```flex-direction: row``` 時，該屬性會決定寬度\\r\\n  - 當 ```flex-direction: column``` 時，該屬性會決定高度\\r\\n- 範例\\r\\n  ```html\\r\\n  <style>\\r\\n    .box {\\r\\n      display: flex;\\r\\n    }\\r\\n    .box-item {\\r\\n      flex-basis: 400px;\\r\\n    }\\r\\n  </style>\\r\\n  <body>\\r\\n    <!-- 若空間不足則區塊3不會變，區塊1245將縮小  -->\\r\\n    <div class=\\\"box\\\">\\r\\n      <div class=\\\"box-item\\\">1</div>\\r\\n      <div class=\\\"box-item\\\">2</div>\\r\\n      <div class=\\\"box-item\\\">3</div>\\r\\n    </div>\\r\\n  </body>\\r\\n  ```\\r\\n\\r\\n<hr id=\\\"user-content-flex-item-flex\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\">flex 屬性</a>\\r\\n- ```flex``` 屬性為 ```flex-grow```、```flex-shrink```、```flex-basis``` 的簡寫，默認值為 ```0 1 auto```\\r\\n  - 後兩個屬性可選擇不寫：```flex: 1;``` = ```flex: 1 1 auto;``` = ```flex: auto;```\\r\\n- 該屬性有兩個快捷屬性可選擇：\\r\\n  - ```auto (1 1 auto)```\\r\\n  - ```none (0 0 auto)```\\r\\n\\r\\n<hr id=\\\"user-content-flex-item-align-self\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\">align-self 屬性</a>\\r\\n- ```align-self``` 屬性允許單個項目與其他項目有不一樣的對齊方式，可覆蓋 ```align-items``` 屬性\\r\\n- 默認值為 ```auto```，會繼承容器的 ```align-items``` 屬性，若無則屬性默認為 ```stretch```\\r\\n- 與 ```align-items``` 相同有五個屬性(不含 ```auto```)且功能相同\\r\\n  - ```flex-start```、```flex-end```、```center```、```baseline```、```stretch```\\r\\n\\r\\n<hr id=\\\"user-content-horizontal-center\\\" style=\\\"height: 4px;\\\">\\r\\n\\r\\n### 其他實用功能\\r\\n#### <a href=\\\"#user-content-top\\\">水平居中</a>\\r\\n- 聲明：```.parent``` 為父元素，```.son``` 為子元素\\r\\n- 行內元素：```display: inline;```\\r\\n  ```css\\r\\n  .parent {\\r\\n    text-align: center;\\r\\n  }\\r\\n  ```\\r\\n- 塊級元素：```display: inline-block;```、```display: block;```\\r\\n  - 基本居中\\r\\n    ```css\\r\\n    /* 左右外邊距自動居中 */\\r\\n    .son {\\r\\n      margin: 0 auto;\\r\\n    }\\r\\n    ```\\r\\n  - 子元素含浮動\\r\\n    ```css\\r\\n    /* 父元素會隨著內容改變寬度 */\\r\\n    .parent {\\r\\n      width: fit-content;\\r\\n      margin: 0 auto; \\r\\n    }\\r\\n    .son {\\r\\n      float: right;\\r\\n    }\\r\\n    ```\\r\\n  - 使用 ```flex``` 布局\\r\\n    ```css\\r\\n    .parent {\\r\\n      display: flex;\\r\\n      /* 項目排列(主軸)於中間 */\\r\\n      justify-content: center;\\r\\n    }\\r\\n    ```\\r\\n  - 使用絕對定位：```position: absolute;```\\r\\n    - 父元素必須也設定 ```position``` 屬性\\r\\n    ```css\\r\\n    /* 1.transform */\\r\\n    .son {\\r\\n      position: absolute;\\r\\n      left: 50%;\\r\\n      transform: translate(-50%, 0);\\r\\n    }\\r\\n\\r\\n    /* 2.left & width & margin */\\r\\n    .son {\\r\\n      position: absolute;\\r\\n      left: 50%;\\r\\n      width: 寬度;\\r\\n      margin-left: 寬度 * -0.5\\r\\n    }\\r\\n\\r\\n    /* 3.left、right、width、margin */\\r\\n    .son {\\r\\n      position: absolute;\\r\\n      /* 必須為最左到最右 */\\r\\n      left: 0;\\r\\n      right: 0;\\r\\n      /* 設定 width 後 margin 才會生效 */\\r\\n      width: 寬度;\\r\\n      margin: 0 auto;\\r\\n    }\\r\\n    ```\\r\\n\\r\\n<hr id=\\\"user-content-vertical-center\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\">垂直居中</a>\\r\\n- 聲明：```.parent``` 為父元素，```.son``` 為子元素\\r\\n- 行內元素：```display: inline;```\\r\\n  - 父元素為塊(行塊)元素，子元素為行內元素\\r\\n  ```css\\r\\n  /* 兩者高度需一樣 */\\r\\n  .parent {\\r\\n    height: 高度;\\r\\n  }\\r\\n  .son {\\r\\n    line-height: 高度;\\r\\n  }\\r\\n  ```\\r\\n- 塊級元素：```display: inline-block;```、```display: block;```\\r\\n  - ```display: table```\\r\\n    - 優點：高度可動態改變，若父元素空間不足，內容也不會截斷\\r\\n    ```css\\r\\n    .parent {\\r\\n      display: table;\\r\\n    }\\r\\n    .son {\\r\\n      display: table-cell;\\r\\n      vertical-align: middle;\\r\\n    }\\r\\n    ```\\r\\n  - 使用 ```flex``` 布局\\r\\n    ```css\\r\\n    .parent {\\r\\n      display: flex;\\r\\n      /* 將項目設置為交叉軸中間 */\\r\\n      align-items: center;\\r\\n    }\\r\\n    ```\\r\\n  - 使用絕對定位：```position: absolute;```\\r\\n    - 父元素必須也設定 ```position``` 屬性\\r\\n    ```css\\r\\n    /* 1.transform */\\r\\n    .son {\\r\\n      position: absolute;\\r\\n      top: 50%;\\r\\n      transform: translate( 0, -50%);\\r\\n    }\\r\\n\\r\\n    /* 2.top & height & margin */\\r\\n    .son {\\r\\n      position: absolute;\\r\\n      top: 50%;\\r\\n      height: 高度;\\r\\n      margin-top: 高度 * -0.5;\\r\\n    }\\r\\n\\r\\n    /* 3.top、bottom、margin */\\r\\n    .son {\\r\\n      position: absolute;\\r\\n      /* 必須為最頂到最底 */\\r\\n      top: 0;\\r\\n      bottom: 0;\\r\\n      /* 設定 height 後 margin 才會生效 */\\r\\n      height: 高度;\\r\\n      margin: auto 0;\\r\\n    }\\r\\n    ```\\r\\n\\r\\n<hr id=\\\"user-content-text-ellipsis\\\" style=\\\"height: 2px;\\\">\\r\\n\\r\\n#### <a href=\\\"#user-content-top\\\">文字省略號：```...```</a>\\r\\n- 通常用於多個牌卡排列時，牌卡內容過長時使用\\r\\n- 範例\\r\\n  ```html\\r\\n  <style>\\r\\n    /* 通常會搭配以下三個為一體 */\\r\\n    .text-ellipsis {\\r\\n      /* 需隱藏溢出否則照常輸出內容 */\\r\\n      overflow: hidden;\\r\\n      /* 當文字溢出時加上省略號... */\\r\\n      text-overflow: ellipsis;\\r\\n      /* 代表碰到空白字元不換行 */\\r\\n      white-space: nowrap;\\r\\n    }\\r\\n  </style>\\r\\n  <body>\\r\\n    <!-- 第一排與第三排會因超過寬度而加上省略號 -->\\r\\n    <div class=\\\"text-ellipsis\\\" style=\\\"width: 100px;\\\">\\r\\n      test12345test12345test12345<br>\\r\\n      test12345 <br>\\r\\n      test12345test12345test12345test12345test12345\\r\\n    </div>\\r\\n  </body>\\r\\n  ```\\r\\n\";","import { render } from \"./CSSNote.vue?vue&type=template&id=348d5d37\"\nimport script from \"./CSSNote.vue?vue&type=script&lang=js\"\nexport * from \"./CSSNote.vue?vue&type=script&lang=js\"\n\nimport \"./CSSNote.vue?vue&type=style&index=0&id=348d5d37&lang=scss\"\nscript.render = render\n\nexport default script","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./CSSNote.vue?vue&type=style&index=0&id=348d5d37&lang=scss\""],"sourceRoot":""}