(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["webpackNote"],{"5fd9":function(n,r,e){"use strict";e("d109")},"61bb":function(n,r,e){"use strict";e.r(r);var t=e("7a23");function s(n,r,e,s,o,a){var i=Object(t["y"])("Loading");return Object(t["r"])(),Object(t["d"])(t["a"],null,[s.displayLoading?(Object(t["r"])(),Object(t["d"])(i,{key:0,class:{"content--hide":!s.showLoading,"content--show":s.showLoading}},null,8,["class"])):Object(t["e"])("",!0),s.displayContent?(Object(t["r"])(),Object(t["d"])("div",{key:1,class:{"markdown-content":!0,"content--hide":!s.showContent,"content--show":s.showContent}},[Object(t["h"])("div",{class:"markdown-body",innerHTML:s.htmlContent},null,8,["innerHTML"])],2)):Object(t["e"])("",!0)],64)}var o=e("1da1"),a=(e("96cf"),e("d4cd")),i=e.n(a),l=e("2338"),c=e("1487"),p=e.n(c),u=e("3a5e"),d="## Webpack 筆記\r\n<a id=\"user-content-top\"></a>\r\n\r\n### 目錄\r\n<details open>\r\n<summary style=\"cursor: pointer;\">&nbsp;目錄清單 </summary>\r\n\r\n- [Webpack 介紹](#user-content-introduce)\r\n- [學前知識：Module](#user-content-module)\r\n- [Webpack 基礎配置](#user-content-install)\r\n- [entry 與 output](#user-content-entry-output)\r\n- [Loader](#user-content-loader)\r\n  - [Loader 圖片配置](#user-content-loader-image)\r\n  - [Loader 樣式與字體配置](#user-content-loader-css-font)\r\n- [Plugins](#user-content-plugins)\r\n- [SourceMap](#user-content-sourcemap)\r\n- [WebpackDevServer 與 熱模塊更新](#user-content-devserver)\r\n- [Babel](#user-content-babel)\r\n- [Esbuild-loader](#user-content-esbuild-loader)\r\n- [Tree Shaking](#user-content-tree-shaking)\r\n- [開發與打包設定](#user-content-setting)\r\n- [Code Splitting](#user-content-code-splitting)\r\n- [Caching 緩存](#user-content-caching)\r\n- [Shimming](#user-content-shimming)\r\n- [Env 環境變數](#user-content-env)\r\n- [製作 Library](#user-content-library)\r\n- [ESLint 配置](#user-content-eslint)\r\n- [性能優化](#user-content-optimization)\r\n- [多頁面配置](#user-content-multiple-page)\r\n- [參考連結](#user-content-link)\r\n\r\n</details>\r\n\r\n<hr id=\"user-content-introduce\" style=\"height: 4px;\">\r\n\r\n#### <a href=\"#user-content-top\" >Webpack 介紹</a>\r\n- [官網](https://webpack.js.org/)\r\n```txt\r\nwebpack 是靜態模塊打包器\r\nwebpack 處理時會將所有模塊打包成一或多個文件\r\n```\r\n\r\n<hr id=\"user-content-module\" style=\"height: 4px;\">\r\n\r\n#### <a href=\"#user-content-top\" >Module</a>\r\n- 用途與定義\r\n  - 局部作用域的代碼塊\r\n  - 模塊主要解決問題分析\r\n    - 將功能切分模塊化\r\n    - 消除全局變量\r\n    - 模塊加載的順序\r\n- 使用 ```script``` 加載方式\r\n  ```html\r\n  <script src=\"./your.js\" type=\"module\"><\/script>\r\n  ```\r\n- 導出與導入\r\n  - 導出與導入可分開存在\r\n  - 被導入的 ```module``` 都會先執行一次\r\n    - 重複導入多次也只會執行一次\r\n  - 使用方式\r\n  ```js\r\n  /* \r\n  1. 使用 export default 導出導入\r\n  一個 module 只能有一個 export default\r\n  使用 export default 導出則導入時可以隨意命名\r\n  */\r\n  // 導出\r\n  export default { test:'test' };\r\n  // 導入\r\n  import m from './module.js'\r\n\r\n  /* \r\n  2. 一般導出導入\r\n  非 export default 不能随意命名\r\n  使用一般導出必須命名否則導入無法呼叫\r\n  */\r\n  // 導出\r\n  export const age = 18;\r\n  // 導入\r\n  import { age } from './module.js';\r\n\r\n  /*\r\n  3. 複數導出導入\r\n  導入時不用按照順序但要同名\r\n  */\r\n  // 導出\r\n  function fn() {}\r\n  class className {}\r\n  const age = 18;\r\n  export { fn, className, age };\r\n  // 導入\r\n  import {age, fn, className} from './module.js'\r\n\r\n  /*\r\n  4. 導出導入使用別名\r\n  */\r\n  // 導出\r\n  export { fn as func, className, age };\r\n  // 導入\r\n  import { func, age, className as Person } from './module.js';\r\n\r\n  /*\r\n  5. 整體導入\r\n  */\r\n  // 導出\r\n  function fn() {}\r\n  class className {}\r\n  const age = 18;\r\n  export { fn, className };\r\n  export default age;\r\n  // 導入\r\n  import * as test from './module.js'\r\n  // export default 可藉由 test.default 取得\r\n  console.log(test.default.age)\r\n  // 一般導出取值方式\r\n  console.log(test.className)\r\n\r\n  /*\r\n  6. 同時導入\r\n  export default 必須在最前面就導入\r\n  */\r\n  // 導出\r\n  function fn() {}\r\n  class className {}\r\n  const age = 18;\r\n  export { fn, className };\r\n  export default age;\r\n  // 導入\r\n  import age, { func, className } from './module.js';\r\n\r\n  /*\r\n  7. 導入與導出的複合寫法\r\n  若用複合寫法導出的無法在當前模塊使用\r\n  */\r\n  // 導出\r\n  const age = 18;\r\n  export { age };\r\n  // 導入\r\n  export { age } from './module.js';\r\n  // 等於(但無法在當前模塊使用)\r\n  import { age } from './module.js';\r\n  export { age };\r\n  ```\r\n- 注意事項\r\n  - 模塊內的 ```this``` 為 ```undefined``` 不為 ```window```\r\n  - ```import``` 語句只能在最頂層，執行時其他代碼都未執行\r\n  - 若要在代碼執行時導入則使用 ```import()```\r\n    ```js\r\n    if (PC) {\r\n      let pcModule = await import('pc.js');\r\n      // 取得 export default\r\n      console.log(pcModule.default)\r\n    } else if (Mobile) {\r\n      import('mobile.js').then((result)=>{\r\n        // 取得 export default\r\n        console.log(result.default)\r\n      }).catch();\r\n    }\r\n    ```\r\n\r\n<hr id=\"user-content-install\" style=\"height: 2px;\">\r\n\r\n#### <a href=\"#user-content-top\" >基礎配置</a>\r\n- 安装 ```webpack```\r\n  - ```webpack-cli``` 使命令行執行 ```webpack``` 的工具\r\n  - ```-D``` 代表 ```--save-dev```\r\n  ```txt\r\n  安裝最新版本: npm install webpack webpack-cli -D\r\n  安裝指定版本: npm install webpack@版本號 webpack-cli@版本號 -D\r\n  觀看安裝資訊: npm info webpack\r\n  ```\r\n- 配置 ```webpack```\r\n  - 創建 ```webpack.config.js``` 檔案\r\n    ```javascript\r\n    const path = require('path');\r\n    module.exports = {\r\n      // mode 默認為 production\r\n      // development 代表編譯不混淆不壓縮(默認混淆並壓縮)\r\n      mode: 'development',\r\n      // entry: 代表需要編譯的檔案路徑\r\n      entry: './src/index.js',\r\n      // output: 輸出路徑(建立dist資料夾並新增編譯完成的文件 bundle.js)\r\n      output: {\r\n        /*\r\n          __dirname 代表 webpack.config.js 所在路徑\r\n          path 不寫也會默認打包於dist目錄\r\n          path 必須為絕對路徑\r\n        */\r\n        path: path.resolve(__dirname, 'dist'),\r\n        filename: 'bundle.js'\r\n      }\r\n    };\r\n    ```\r\n  - 在 ```package.json``` 添加配置\r\n    - 添加 ``` \"private\": true``` 不發佈到 ```npm``` 倉庫 \r\n    - 在 ``` scripts``` 添加 ```webpack``` 的命令\r\n      - 使用 ```scripts``` 可簡化執行語句 \r\n      ```txt\r\n      webpack 默認設定執行文件: webpack.config.js \r\n      若要改其他名字則可用 --config\r\n      以下兩句指令相等\r\n      \"webpack\": \"webpack --config webpack.config.js\" \r\n      \"webpack\": \"webpack\" \r\n      ```\r\n- 編譯執行：```npm run webpack```\r\n\r\n<hr id=\"user-content-entry-output\" style=\"height: 2px;\">\r\n\r\n#### <a href=\"#user-content-top\" >entry 與 output</a>\r\n- entry 為入口，output 為出口\r\n  ```js\r\n  // entry\r\n  // 單入口(默認入口名為 main)\r\n  entry: './src/index.js',\r\n  // 多入口\r\n  entry: {\r\n    main: './src/index.js',\r\n    search: './src/search.js'\r\n  },\r\n  // output\r\n  // 若只有單入口\r\n  output: {\r\n    path: path.resolve(__dirname, 'dist'),\r\n    filename: 'bundle.js'\r\n  }\r\n  /*\r\n    若有多入口\r\n    [name] 會比對取得入口的名字\r\n    比如在 entry 定義 search 入口，則會輸出 search.js\r\n  */\r\n  output: {\r\n    // 若要放在伺服器上，可用 publicPath 加上網址前綴\r\n    publicPath: 'http://yourDomain',\r\n    path: path.resolve(__dirname, 'dist'),\r\n    filename: '[name].js'\r\n  }\r\n  ```\r\n<hr id=\"user-content-loader\" style=\"height: 2px;\">\r\n\r\n#### <a href=\"#user-content-top\" >Loader</a>\r\n- 官網：[loader](https://webpack.js.org/loaders/)\r\n- 目的：```loader``` 能讓 ```webpack``` 處理非 JS 文件的模塊\r\n- ```loader``` 處理順序為從下到上、從右到左\r\n- 於 ```webpack.config.js``` 以下位置配置\r\n  ```js\r\n  module: {\r\n      rules: [\r\n        {\r\n          test: /\\.css$/,\r\n          // loaders 配置位置\r\n          use: []\r\n        },\r\n      ]\r\n    },\r\n  ```\r\n- ```Asset Modules``` 功能使用\r\n  - [官網介紹](https://webpack.js.org/guides/asset-modules/)\r\n  - ```asset``` 對應 ```url-loader```\r\n  - ```asset/inline``` 對應 ```url-loader```，像是注入在檔案裡面，類似內部連結\r\n  - ```asset/resource``` 對應 ```file-loader```，用途偏向搬移檔案並外部連結到該檔案\r\n  - ```asset/source``` 對應 ```raw-loader```\r\n\r\n<hr id=\"user-content-loader-image\" style=\"height: 2px;\">\r\n\r\n#### <a href=\"#user-content-top\" >Loader 圖片配置</a>\r\n- 安裝依賴\r\n  ```txt\r\n  npm install html-loader image-webpack-loader -D\r\n  ```\r\n- 在 ```webpack.config.js``` 配置\r\n  ```js\r\n  {\r\n    test: /\\.(html)$/,\r\n    // 使用 html-loader 轉換 html 文件內圖片連結\r\n    loader: 'html-loader',\r\n    options: {\r\n      sources: {\r\n        list: [\r\n          // 檢測 html 標籤是否使用特定屬性並替換正確圖片路徑\r\n          {\r\n            tag: \"option\",\r\n            attribute: 'title',\r\n            type: 'src',\r\n          },\r\n          {\r\n            tag: \"img\",\r\n            attribute: \"src\",\r\n            type: \"src\",\r\n          },\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  {\r\n    // 入口檢測符合規則的檔名\r\n    test: /\\.(png|jpe?g|gif|svg)$/,\r\n    // url-loader 於 webpack5 棄用，改用以下配置\r\n    type: 'asset/resource',\r\n    generator: {\r\n      /*\r\n        [name]:使用原檔案名\r\n        [hash]:該次打包的哈希值\r\n        [contenthash]:圖片內容的哈希值\r\n        [ext]:使用原副檔名(前面會自動加上\".\")\r\n      */\r\n      filename: `[name].[contenthash][ext]`\r\n    },\r\n    // 若需使用多個 loader 則使用 use 數組\r\n    use: [{\r\n      // 使用指定的 loader\r\n      // 使用 image-webpack-loader 將圖片壓縮\r\n      loader: 'image-webpack-loader',\r\n      options: {\r\n        // 只在 production 環境啟用圖片壓縮\r\n        disable: mode === 'production' ? false : true,\r\n        // 輸出至指定目錄下\r\n\t\t\t\t// outputPath: 'images/',\r\n        mozjpeg: {\r\n          progressive: true,\r\n          quality: 75,\r\n        },\r\n        optipng: {\r\n          enabled: false, // 表示不啟用這一個圖片優化器\r\n        },\r\n        pngquant: {\r\n          quality: [0.65, 0.9],\r\n          speed: 4,\r\n        },\r\n        gifsicle: {\r\n          interlaced: false,\r\n        },\r\n        webp: {\r\n          quality: 75, // 配置選項表示啟用 WebP 優化器\r\n        },\r\n      },\r\n    }]\r\n  }\r\n  ```\r\n- 最後在指定的 ```js``` 文件引入即可\r\n  ```js\r\n  import './avatar.jpg';\r\n  ```\r\n\r\n<hr id=\"user-content-loader-css-font\" style=\"height: 2px;\">\r\n\r\n#### <a href=\"#user-content-top\" >Loader 樣式與字體配置</a>\r\n- 以下有兩種方式安裝與 ```webpack.config.js``` 配置\r\n  - 第一種將整合的 ```css``` 內容加入 ```head style``` 標籤內\r\n    - 安裝第三方依賴\r\n      ```txt\r\n      npm install style-loader css-loader \\\r\n      sass-loader node-sass \\\r\n      postcss-loader autoprefixer -D\r\n      ```\r\n    - ```webpack.config.js``` 配置\r\n      ```js\r\n      {\r\n        /*\r\n          loader 處理順序為從下到上、從右到左\r\n          style-loader 將整合的 css 內容加入 head style 標籤內\r\n          css-loader 將多個css檔案的關係整合成一個css檔案\r\n          sass-loader 需要安裝 sass-loader 與 node-sass\r\n          postcss-loader 需要配置 postcss.config.js 文件\r\n          autoprefixer 自動加上廠商前綴如:webkit\r\n        */\r\n        \r\n        test: /\\.scss$/,\r\n        use: [\r\n          'style-loader', \r\n          // loader 若要增加配置則用對象方法\r\n          {\r\n            loader: 'css-loader',\r\n            options: {\r\n              // 代表在使用前必須先跑兩個loader(sass-loader、postcss-loader)\r\n              importLoaders: 2,\r\n              // 樣式模塊化，使每個頁面樣式不會互相影響\r\n              modules: true\r\n            }\r\n          }, \r\n          'sass-loader',\r\n          'postcss-loader'\r\n        ]\r\n      }\r\n      ```\r\n  - 第二種將 ```css``` 內容檔案壓縮\r\n    - 安裝第三方依賴\r\n      ```txt\r\n      npm install css-loader \\\r\n      sass-loader node-sass \\\r\n      postcss-loader autoprefixer \\\r\n      mini-css-extract-plugin \\\r\n      css-minimizer-webpack-plugin -D\r\n      ```\r\n    - ```webpack.config.js``` 配置\r\n      ```js\r\n      const MiniCssExtractPlugin = require('mini-css-extract-plugin');\r\n      const CssMinimizerPlugin = require(\"css-minimizer-webpack-plugin\");\r\n      module: {\r\n          rules: [\r\n          {\r\n            /*\r\n              loader 處理順序為從下到上、從右到左\r\n              css-loader 將多個css檔案的關係整合成一個css檔案\r\n              sass-loader 需要安裝 sass-loader 與 node-sass\r\n              postcss-loader 需要配置 postcss.config.js 文件\r\n              autoprefixer 自動加上廠商前綴如:webkit\r\n            */\r\n            test: /\\.scss$/,\r\n            use: [\r\n              MiniCssExtractPlugin.loader, \r\n              // loader 若要增加配置則用對象方法\r\n              {\r\n                loader: 'css-loader',\r\n                options: {\r\n                  // 代表在使用前必須先跑兩個loader(sass-loader、postcss-loader)\r\n                  importLoaders: 2,\r\n                  // 樣式模塊化，使每個頁面樣式不會互相影響\r\n                  modules: true\r\n                }\r\n              },\r\n              'sass-loader',\r\n              'postcss-loader'\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      optimization: {\r\n        minimizer: [\r\n          // 將 css 檔案進行壓縮\r\n          new CssMinimizerPlugin()\r\n        ],\r\n      },\r\n      plugins: [\r\n        new MiniCssExtractPlugin({\r\n          filename: `[name].[${useHash}].css`,\r\n          chunkFilename: `[name].[${useHash}].chunk.css`\r\n        }),\r\n      ]\r\n      ```\r\n- 字體文件配置\r\n  - 將 ```eot、svg、ttf、woff``` 字體文件加入指定資料夾\r\n  - ```webpack.config.js``` 配置\r\n    ```js\r\n    {\r\n      test: /\\.(eot|ttf|svg)$/,\r\n      type: 'asset/resource',\r\n    },\r\n    ```\r\n  - ```index.scss``` 配置(檔名自行替換)\r\n    ```scss\r\n    @font-face {\r\n      font-family: \"iconfont\";\r\n      src: url('./font/iconfont.eot?t=1543245201565'); /* IE9*/\r\n      src: url('./font/iconfont.eot?t=1543245201565#iefix') format('embedded-opentype'), /* IE6-IE8 */\r\n      url('data:application/x-font-woff;charset=utf-8;base64,data') format('woff'),\r\n      url('./font/iconfont.ttf?t=1543245201565') format('truetype'), /* chrome, firefox, opera, Safari, Android, iOS 4.2+*/\r\n      url('./font/iconfont.svg?t=1543245201565#iconfont') format('svg'); /* iOS 4.1- */\r\n    }\r\n\r\n    .iconfont {\r\n      font-family:\"iconfont\" !important;\r\n      font-size:16px;\r\n      font-style:normal;\r\n      -webkit-font-smoothing: antialiased;\r\n      -moz-osx-font-smoothing: grayscale;\r\n    }\r\n\r\n    .icon-changjingguanli:before { content: \"\\eb61\"; }\r\n\r\n    .icon-fenxiangfangshi:before { content: \"\\eb62\"; }\r\n    ```\r\n- ```postcss-loader``` 需要創建 ```postcss.config.js``` 文件\r\n  ```js\r\n  module.exports = {\r\n    plugins: [\r\n      require('autoprefixer')\r\n    ]\r\n  }\r\n  ```\r\n- 最後在指定的 ```js``` 文件引入即可\r\n  ```js\r\n  import './index.scss';\r\n  ```\r\n\r\n<hr id=\"user-content-plugins\" style=\"height: 2px;\">\r\n\r\n#### <a href=\"#user-content-top\" >Plugins</a>\r\n- 使 ```webpack``` 可以執行更廣泛的任務\r\n- 於 ```webpack.config.js``` 以下位置配置\r\n  ```js\r\n  plugins:[\r\n\t  // plugins\r\n  ],\r\n  ```\r\n- 以 ```html-webpack-plugin``` 與 ```clean-webpack-plugin``` 為範例\r\n  - 安裝依賴\r\n    ```txt\r\n    npm install html-webpack-plugin clean-webpack-plugin -D\r\n    ```\r\n  - ```webpack.config.js``` 配置\r\n    ```js\r\n    const HtmlWebpackPlugin = require('html-webpack-plugin');\r\n    const { CleanWebpackPlugin } = require('clean-webpack-plugin');\r\n    plugins: [\r\n      // 設定增加需要顯示的頁面\r\n      new HtmlWebpackPlugin({\r\n        // 原資料檔案\r\n        template: './src/index.html',\r\n        // 輸出檔案名\r\n        filename: 'index.html',\r\n        // 設定需要的資源(entry)\r\n        chunks: ['main'],\r\n        minify: {\r\n          // 删除 html 中的註釋\r\n          removeComments: true,\r\n          // 删除 html 中的空格\r\n          collapseWhitespace: true,\r\n          // 删除 html 標籤的雙引號\r\n          removeAttributeQuotes: true,\r\n          // 將 html 文件內的 css 壓縮\r\n          minifyCSS: true,\r\n          // 將 html 文件內的 js 壓縮\r\n          minifyJS: true\r\n        }\r\n      }),\r\n      // 刪除原本打包檔案再重新打包\r\n      new CleanWebpackPlugin({\r\n        cleanAfterEveryBuildPatterns: ['dist']\r\n      })\r\n    ],\r\n    ```\r\n<hr id=\"user-content-sourcemap\" style=\"height: 2px;\">\r\n\r\n#### <a href=\"#user-content-top\" >SourceMap</a>\r\n- [官網介紹](https://webpack.js.org/configuration/devtool/)\r\n- 用途：在打包後的檔案中找出原檔案的映射錯誤位置\r\n- 常用配置\r\n  - ```mode: development```：```devtool: 'cheap-module-eval-source-map'```\r\n  - ```mode: production```：```devtool: 'cheap-module-source-map'```\r\n- 說明\r\n  - ```source-map```：用來生成 ```.map``` 文件對應位置\r\n  - ```inline-source-map```：將對應關係寫進 ```.js ```裡面(通常為底部)\r\n  - ```cheap```：指精準到行但不管在第幾個字，只負責觀察業務代碼裡的錯誤\r\n  - ```module```：觀察loader裡面的錯誤\r\n  - ```eval```：將對應關係使用 ```js eval``` 方式打包\r\n- 於 ```webpack.config.js``` 配置\r\n  ```js\r\n  devtool: 'cheap-module-eval-source-map',\r\n  ```\r\n\r\n<hr id=\"user-content-devserver\" style=\"height: 2px;\">\r\n\r\n#### <a href=\"#user-content-top\" >WebpackDevServer 與 熱模塊更新</a>\r\n- [官網 devServer 介紹](https://webpack.js.org/configuration/dev-server/)\r\n- 熱模塊更新介紹\r\n  - [Guides](https://webpack.js.org/guides/hot-module-replacement/)\r\n  - [Api](https://webpack.js.org/guides/hot-module-replacement/)\r\n  - [原理](https://webpack.js.org/concepts/hot-module-replacement/)\r\n- 用途：開發測試用，避免多次手動打包\r\n- 安裝依賴\r\n  ```txt\r\n  npm install webpack-dev-server -D\r\n  ```\r\n- 在 ```webpack.config.js``` 配置\r\n  - [proxy 請求轉發介紹](https://webpack.js.org/configuration/dev-server/#devserverproxy)\r\n\r\n  ```js\r\n  devServer: {\r\n    // 自動打開指定頁面\r\n    open: ['/F2_A.html'],\r\n    // 偵測文件是否修改，並自動 reload\r\n    watchFiles: ['src/**/*'],\r\n    compress: true,\r\n    port: 8699,\r\n    hot: true\r\n    proxy: {\r\n      /*\r\n        當 webpack 使用相對路徑時，藉由proxy可以轉發到特定網址\r\n        如：\r\n          axios.get('/react/api/header.json').then((res) => {\r\n            console.log(res);\r\n          })\r\n      */ \r\n      '/react/api': {\r\n        target: 'https://www.dell-lee.com',\r\n        // 若url為https開頭，則需要設定 false 才能轉發\r\n        secure: false,\r\n        // 若後端給暫時用的url，可以使用該方式暫時取代api路徑\r\n        pathRewrite: {\r\n          'header.json': 'demo.json'\r\n        },\r\n        // 擺脫轉發的server Origin 限制\r\n        changeOrigin: true,\r\n        // 自定義請求頭\r\n        headers: {\r\n          host: 'www.dell-lee.com',\r\n        }\r\n      }\r\n    }\r\n  },\r\n  ```\r\n- 在 ```package.json``` 加上\r\n  ```txt\r\n  \"scripts\": {\r\n    \"start\": \"webpack serve\",\r\n  }\r\n  若有指定檔案設定，可使用 --config 切換至指定檔案設定\r\n  \"scripts\": {\r\n    \"start\": \"webpack serve --config ./build/webpack.dev.js\"\r\n  }\r\n  ```\r\n- 開啟 ```devServer```：```npm run start```\r\n- 若須檢測是否開啟熱更新可在 ```js``` 加入\r\n  ```js\r\n  // 如果啟動熱模塊\r\n  if(module.hot) {\r\n    // 監測該number.js文件是否更動\r\n    module.hot.accept('./number', () => {\r\n      // 若更動則執行以下動作\r\n      // ...\r\n    })\r\n  }\r\n  ```\r\n\r\n<hr id=\"user-content-babel\" style=\"height: 2px;\">\r\n\r\n#### <a href=\"#user-content-top\" >Babel</a>\r\n- 介紹\r\n  - 官網：[babel](https://babeljs.io/)\r\n  - 線上編譯：[babel-online](https://babeljs.io/repl)\r\n  ```txt\r\n  Babel 是 JavaScript 的編譯器\r\n  用來將 ES6 的代碼，轉換成 ES6 之前的代碼\r\n\r\n  但對於 ES6 新增的 API，如 Set、Map、Promise 等全局對象\r\n  及一些定義在全局對像上的方法（比如 Object.assign/Array.from）\r\n  都不能直接編譯，需要藉助其它的模塊\r\n  Babel 一般需配合 Webpack 來編譯模塊語法\r\n  ```\r\n- 使用方法\r\n  - [官方安裝說明](https://babeljs.io/setup#installation)\r\n  - 安装 ```Babel```\r\n    - 若是 ```TypeScript``` 專案，則 ```babel-loader``` 替換成 ```typescript-loader```\r\n    ```txt\r\n    npm i babel-loader @babel/core @babel/preset-env -D\r\n    ```\r\n  - 說明\r\n    - ```babel-loader```：Babel 和 webpack 傳輸檔案通道。\r\n    - ```@babel/core```：將es6以上代碼轉換AST再轉換成es5代碼\r\n    - ```@babel/preset-env```：含es6以上轉換es5的規則\r\n  - 文件配置\r\n    - 在 ```webpack.config.js``` 配置\r\n      ```js\r\n      {\r\n        test: /\\.js$/,\r\n        // exclude: 代表該路徑底下的文件不用轉譯\r\n        exclude: /node_modules/, \r\n        loader: 'babel-loader',\r\n      }\r\n      ```\r\n  - 創建 ```.babelrc``` 文件\r\n    - [babel-preset-env](https://babeljs.io/docs/en/babel-preset-env)\r\n    ```js\r\n    {\r\n      \"presets\": [\r\n        \"@babel/preset-env\",\r\n        // 可指定瀏覽器版本，可省略\r\n        { \r\n          targets: {\r\n            \"chrome\": \"58\",\r\n            \"ie\": \"11\"\r\n          },\r\n          useBuiltIns: 'usage'\r\n        }\r\n      ],\r\n    }\r\n    ```\r\n\r\n<hr id=\"user-content-esbuild-loader\" style=\"height: 2px;\">\r\n\r\n#### <a href=\"#user-content-top\" >Esbuild-loader</a>\r\n- [官方 Github](https://github.com/privatenumber/esbuild-loader)\r\n- 使用方法\r\n  - 安裝依賴：```npm i esbuild-loader -D```\r\n  - 在 ```webpack.config.js``` 配置\r\n    - [target 說明](https://github.com/privatenumber/esbuild-loader#target)\r\n    ```js\r\n    // Javascript 配置\r\n    {\r\n      test: /\\.js$/,\r\n      loader: 'esbuild-loader',\r\n      options: {\r\n        // 若沒有使用JSX語法則移除\r\n        loader: 'jsx',\r\n        target: 'es2015'\r\n      }\r\n    },\r\n\r\n    // TypeScript 配置\r\n    // 若有 tsconfig.json 文件，loader 會自動進行檢測\r\n    {\r\n      test: /\\.tsx?$/,\r\n      loader: 'esbuild-loader',\r\n      options: {\r\n        loader: 'ts', // tsx\r\n        target: 'es2015',\r\n        // 可指定 TypeScript 設定文件\r\n        // tsconfigRaw: require('./tsconfig.json')\r\n      }\r\n    },\r\n    /*\r\n      依官方說明，若單純只用 js 並無使用其他插件\r\n      則只需加入此段設定即可\r\n    */\r\n    const { ESBuildMinifyPlugin } = require('esbuild-loader')\r\n    optimization: {\r\n      minimizer: [\r\n        new ESBuildMinifyPlugin({\r\n          target: 'es2015'\r\n        })\r\n      ]\r\n    },\r\n    ```\r\n\r\n<hr id=\"user-content-tree-shaking\" style=\"height: 2px;\">\r\n\r\n#### <a href=\"#user-content-top\" >Tree Shaking</a>\r\n- 用途：刪除不必要的程式碼，減小打包體積\r\n- 只作用於 ```ESModule``` 語法\r\n- 有分兩種層級：```modules-level```、```statements-level```\r\n- ```modules-level```\r\n  - 作用於整個模塊，若該模塊未被使用則整個模塊會被刪除\r\n  - 要在 ```development``` 使用，須設置 ```optimization.sideEffects = true```，```production``` 默認為 ```true```\r\n  - 另外需在 ```package.json``` 設定 ```sideEffects```\r\n    - 可設定忽略指定文件 ```sideEffects=[\"*.css\"]``` \r\n    - 默認為 ```false``` 代表不用忽略任何文件，若設定 ```true``` 則 ```webpack``` 會自動分析是否有副作用\r\n- ```statements-level```\r\n  - 作用於模塊內語句，若該 ```import/export``` 未被使用則會被刪除\r\n  - 要在 ```development``` 使用，須設置\r\n    - ```optimization.usedExports = true```\r\n    - ```optimization.minimize = true```\r\n    - 以上設置 ```production``` 都默認為 ```true```\r\n\r\n<hr id=\"user-content-setting\" style=\"height: 2px;\">\r\n\r\n#### <a href=\"#user-content-top\" >開發與打包設定</a>\r\n- 用途：無須更改同頁面設定，並提高開發效率\r\n- 設定流程\r\n  - 安裝合併的依賴包：```npm install webpack-merge -D```\r\n  - 創建三個文件，並使用依賴進行合併共用設定\r\n    - 開發用設定：```webpack.dev.js```\r\n      ```js\r\n      const commonConfig = require('./webpack.common.js');\r\n      const { merge } = require('webpack-merge')\r\n\r\n      const devConfig = {\r\n        devServer: {\r\n          // 自動打開指定頁面\r\n          open: ['/your.html'],\r\n          // 偵測文件是否修改，並自動 reload\r\n          watchFiles: ['src/**/*'],\r\n          compress: true,\r\n          port: 8699,\r\n          hot: true\r\n        },\r\n        optimization: {\r\n          usedExports: true,\r\n        },\r\n      }\r\n      // 使用 merge 合併共用設定\r\n      module.exports = merge(commonConfig, devConfig);\r\n      ```\r\n    - 正式打包用設定：```webpack.prod.js```\r\n      - 安裝依賴：```npm i clean-webpack-plugin -D```\r\n      ```js\r\n      const commonConfig = require('./webpack.common.js');\r\n      const { merge } = require('webpack-merge')\r\n      // 重新打包時使用\r\n      const { CleanWebpackPlugin } = require('clean-webpack-plugin');\r\n\r\n      const proConfig = {\r\n        plugins: [\r\n          // 刪除原本打包檔案再重新打包\r\n          new CleanWebpackPlugin({\r\n            cleanAfterEveryBuildPatterns: ['yourPackage']\r\n          })\r\n        ]\r\n      }\r\n\r\n      module.exports = merge(commonConfig, proConfig);\r\n      ```\r\n    - 共同的設定：```webpack.common.js```\r\n  - 設定 ```package.json script```\r\n    ```txt\r\n    \"webpack\": \"webpack --config ./build/webpack.prod.js\",\r\n    \"dev\": \"webpack serve --config ./build/webpack.dev.js\"\r\n    ```\r\n\r\n<hr id=\"user-content-code-splitting\" style=\"height: 2px;\">\r\n\r\n#### <a href=\"#user-content-top\" >Code Splitting</a>\r\n- ```Code Splitting(代碼切割)``` 與 ```webpack``` 無直接關係\r\n- 用途：將代碼拆分可以節省下載的流量(只下載更改的部分)\r\n- ```webpack``` 實現代碼切割有兩種方式\r\n  - 同步代碼：只需 ```webpack``` 設定 ```optimization``` 的配置即可\r\n  - 異步代碼：無需任何配置，會自動代碼分割，放置到新的文件中\r\n- ```webpack``` 使用 ``` splitChunks``` 進行配置\r\n  - [官方說明](https://webpack.js.org/plugins/split-chunks-plugin/)\r\n  - 配置範例\r\n    ```js\r\n    optimization: {\r\n      splitChunks: {\r\n        /*\r\n          async：只處理 Lazy Loading 的 chunks，例如 import(xxx) 語法載入的模組，會走到 cacheGroups 查看配置\r\n          initial：只處理同步加載的 chunk，例如 import xxx 語法載入的模組\r\n          all：兼容以上兩種方式，通通進行處理\r\n        */\r\n        chunks: 'all',\r\n        // 若大於30kb才進行代碼分割\r\n        minSize: 30000,\r\n        // 幾乎不用，若超過 50kb 則進行多次拆分(基本上庫都拆分不了)\r\n        maxSize: 50000,\r\n        // 該模組被引用的次數\r\n        minChunks: 1,\r\n        // 若引用發送的request超過5個js 則不再代碼分割\r\n        maxAsyncRequests: 5,\r\n        // 入口文件引用的庫最多分割成 3 個js再多就不再代碼分割\r\n        maxInitialRequests: 3,\r\n        // 文件生成時會出現連接符，如:vendors~main.js\r\n        automaticNameDelimiter: '~',\r\n        // 使用 cacheGroups 下的命名\r\n        name: true,\r\n        // 打包後會察看是否符合條件加入緩存組(cacheGroups)，再依命名打包(vendors.js)\r\n        cacheGroups: {\r\n          // 若打包的庫於 node_modules 底下則都歸類到 vendors = vendors~main.js(後面main.js為入口檔名)\r\n          // priority 優先級(大到小)，cacheGroups會察看各命名的優先級進行打包命名\r\n          vendors: {\r\n            test: /[\\\\/]node_modules[\\\\/]/,\r\n            priority: -10,\r\n            // 若不想取名為 vendors~xxx.js 則可自己命名\r\n            // filename: 'vendors.js',\r\n          },\r\n          // 若不在 vendors 則使用 default 配置\r\n          default: {\r\n            priority: -20,\r\n            // 代表若該庫已被打包，則其他地方在引用相同庫時則直接進行復用不重新打包進去\r\n            reuseExistingChunk: true,\r\n            // 若不想取名為 default~xxx.js 則可自己命名\r\n            filename: 'common.js'\r\n          }\r\n        }\r\n      }\r\n    }, \r\n    ```\r\n- ```webpack``` 異步加載語句範例 ```index.js```\r\n  - ```/* webpackChunkName:\"lodash\" */``` 代表在異步加載個別打包 ```lodash``` 時取名為 ```lodash```\r\n  ```js\r\n  async function getComponent() {\r\n    const { default: _ } = await import(/* webpackChunkName:\"lodash\" */ 'lodash');\r\n    const element = document.createElement('div');\r\n    element.innerHTML = _.join(['ming', '123'], '-');\r\n    return element;\r\n  }\r\n\r\n  // 懶加載即節省加載網路資源，更快的將頁面渲染給使用者\r\n  // chunk 代表打包後的每一個文件都是一個區塊\r\n  document.addEventListener('click', () =>{\r\n    getComponent().then(element => {\r\n      document.body.appendChild(element);\r\n    });\r\n  })\r\n  ```\r\n\r\n<hr id=\"user-content-caching\" style=\"height: 2px;\">\r\n\r\n#### <a href=\"#user-content-top\" >Caching 緩存</a>\r\n- 在之前使用 ```Loader``` 加載圖片時使用過，主要為以下幾種\r\n  - ```[hash]```：該次打包的哈希值，無緩存作用\r\n  - ```[contenthash]```：內容的哈希值，可進行內容對比達到緩存作用\r\n  - ```[chunkhash]```：為依賴包的哈希值，可進行內容對比達到緩存作用\r\n  - 可加上 ```:(length)``` 減少哈希值字串長度(預設為20)\r\n    - 如：```[name].[contenthash:8][ext]```\r\n```js\r\n{\r\n  // 入口檢測符合規則的檔名\r\n  test: /\\.(png|jpe?g|gif|svg)$/,\r\n  // url-loader 於 webpack5 棄用，改用以下配置\r\n  type: 'asset/resource',\r\n  generator: {\r\n    /*\r\n      [name]:使用原檔案名\r\n      [hash]:該次打包的哈希值\r\n      [contenthash]:圖片內容的哈希值\r\n      [ext]:使用原副檔名(前面會自動加上\".\")\r\n    */\r\n    filename: `[name].[contenthash][ext]`\r\n  },\r\n}\r\n\r\n// =========================================\r\noptimization: {\r\n  /*\r\n    在舊版本 webpack 可能會出現內容一樣但哈希值也會變化\r\n    原因是 js 與 js 文件之間的關係: manifest \r\n    會包含在各個 js 文件內導致內容與原本有可能隨機不同\r\n    通過 runtimeChunk 將 manifest(文件之間的關係) 額外打包出來避免js內容有差異\r\n  */ \r\n  runtimeChunk: {\r\n    name: 'runtime'\r\n  },\r\n},\r\n```\r\n\r\n<hr id=\"user-content-shimming\" style=\"height: 2px;\">\r\n\r\n#### <a href=\"#user-content-top\" >Shimming</a>\r\n- 用途：查看所有文件是否有相符，自動引入相關的依賴包\r\n  ```js\r\n  plugins: [\r\n    new webpack.ProvidePlugin({\r\n      // 當發現文件使用 $ 符號則自動引入 jquery\r\n      $: 'jquery',\r\n      // 當發現文件使用 _join 則引用 lodash 下的 join 方法\r\n      _join: ['lodash', 'join']\r\n    }),\r\n  ],\r\n  ```\r\n- 若要設定模塊 ```this``` 對象指向 ```window```\r\n  - 需要安裝依賴：```npm install imports-loader --save-dev```\r\n  - 並加入以下配置\r\n    ```js\r\n    module: {\r\n      rules: [{ \r\n        test: /\\.js$/, \r\n        exclude: /node_modules/,\r\n        // 若要用多個loader則須用use\r\n        use: [{\r\n          loader: 'babel-loader'\r\n        }, {\r\n          // 若要在 js 文件中 this === window\r\n          // 安裝 npm install imports-loader --save-dev\r\n          // 配置以下\r\n          loader: 'imports-loader?this=>window'\r\n        }]\r\n      }]\r\n    },\r\n    ```\r\n\r\n<hr id=\"user-content-env\" style=\"height: 2px;\">\r\n\r\n#### <a href=\"#user-content-top\" >Env 環境變數</a>\r\n- 通常不建議使用環境變數\r\n- 在 ```package.json``` 與 ```webpack``` 設定加入環境變數判斷\r\n  ```js\r\n  /*\r\n    env 在 package.json 定義\r\n    webpack --env.production --config ./build/webpack.common.js\"\r\n    上面 --env.production 即 production 默認為 true\r\n\r\n    若寫成 --env production \r\n    則下面 (env) 可以直接寫為 (production)\r\n\r\n    若寫成 --env.production=abc \r\n    則下面 if(env && env.production) \r\n    可以改寫為 if(env && env.production === 'abc')\r\n  */\r\n  \r\n  module.exports = (env) => {\r\n    if(env && env.production) {\r\n      return merge(commonConfig, prodConfig);\r\n    }else {\r\n      return merge(commonConfig, devConfig);\r\n    }\r\n  }\r\n  ```\r\n\r\n<hr id=\"user-content-library\" style=\"height: 2px;\">\r\n\r\n#### <a href=\"#user-content-top\" >製作 Library</a>\r\n- 若要使用 ```import``` 方式進行打包需安裝 ```webpack```\r\n  ```npm install webpack webpack-cli --save-dev```\r\n- 並建立 ```webpack.config.js```\r\n  - ```externals```：會進行忽略避免使用者有相同的依賴包\r\n    - ```externals``` [官方說明](https://webpack.js.org/configuration/externals/)\r\n    - ```externals``` 可以是其他的數組或對象\r\n    - 在文件內會依使用者的名字不同取名引用\r\n  ```js\r\n  module.exports = {\r\n    mode: 'production',\r\n    entry: './src/index.js',\r\n    externals: 'lodash',\r\n    output: {\r\n      path: path.resolve(__dirname, 'dist'),\r\n      filename: 'library.js',\r\n      // 如要用script引入方式則需使用此方式掛載到全局變量(window.root)\r\n      library: 'root',\r\n      /*\r\n        umd(Universal Module Definition) \r\n        代表無論使用者用哪種引入方式都通用(除了script引入方式)\r\n\r\n        libraryTarget 也可以變為 this, window, global\r\n        以上三種不常用並且無法使用通用引入方式\r\n      */\r\n      \r\n      libraryTarget: 'umd'\r\n  }\r\n  ```\r\n- 若全部製作完成則可以發佈到 ```npm``` 上\r\n  - 1.先至 ```npm``` 註冊帳號\r\n  - 2.在命令行加入帳號 ```npm adduser```\r\n  - 3.發佈到公用倉庫(若有相同名字會被阻擋) ```npm publish```\r\n\r\n<hr id=\"user-content-eslint\" style=\"height: 2px;\">\r\n\r\n#### <a href=\"#user-content-top\" >ESLint 配置</a>\r\n- [ESLint 官方設定說明](https://eslint.org/docs/user-guide/configuring/)\r\n- 安裝 ```ESLint```：```npm install eslint --save-dev```\r\n- 生成 ```ESLint``` 設定文件(```.eslintrc.js```)：```npx eslint --init ```\r\n- 若要在 ```git commit``` 之前檢測並阻止提交，可使用 ```git hooks```\r\n- 以下有多種使用 ```ESLint``` 檢測程式方式\r\n  - 1.對指定資料夾 ```src``` 進行檢測：```npx eslint src```\r\n  - 2.在 ```vscode``` 安裝 ```ESLint``` 插件，會自動監測不符合的程式碼並自動標示起來(提示會顯示用於哪一規則，可以進行取消)\r\n  - 3.使用 ```eslint-loader``` 檢測\r\n    - 安裝依賴：```npm install eslint-loader --save-dev```\r\n    - 在 ```webpack.config.js``` 分別做以下設定\r\n      ```js\r\n      // devServer\r\n      devServer: {\r\n        overlay: true,\r\n      }\r\n      // rules\r\n      { \r\n        test: /\\.js$/, \r\n        exclude: /node_modules/, \r\n        use: ['babel-loader', 'eslint-loader']\r\n      },\r\n      ```\r\n    - 完成配置後錯誤將顯示在頁面上\r\n\r\n<hr id=\"user-content-optimization\" style=\"height: 2px;\">\r\n\r\n#### <a href=\"#user-content-top\" >性能優化</a>\r\n- 加快打包效率，使上版與開發速度提升\r\n- 以下為多種性能優化方式\r\n  - 1.跟上技術迭代 ```Node、webpack、npm...```\r\n  - 2.運用 ```Loader``` 時盡量排除不需要處理的文件\r\n  - 3.```Plugins``` 盡可能精簡並確保可靠\r\n  - 4.控制包文件大小：```splitChunks、treeshaking...```\r\n  - 5.使用多進程打包：```thread-loader、parallel-webpack、happypack```\r\n  - 6.合理使用 ```sourceMap```\r\n  - 7.結合 ```stats``` 分析打包結果\r\n  - 8.開發環境配置：內存編譯、無用插件去除\r\n  - 9.```resolve``` 合理配置，```Webpack``` 會調用 ```Node``` 底層尋找相符的文件\r\n    - [resolve 官方文檔](https://webpack.js.org/configuration/resolve/)\r\n    - 範例\r\n      ```js\r\n      resolve: {\r\n        // 當引入時沒有加後綴，webpack會自動去尋找以下的後綴文件(左到右)\r\n        extensions: ['.js', '.jsx'],\r\n        // 當引入的是資料夾，沒設定則webpack默認會先抓index開頭的文件(左到右尋找)\r\n        // mainFiles: ['index','child'],\r\n        // alias 可將特定路徑下的文件當作依賴庫使用:import Child from 'child';\r\n        alias: {\r\n          child: path.resolve(__dirname, '../src/a/b/c/child')\r\n        }\r\n      },\r\n      ```\r\n  - 10.避免重複打包 ```node_modules(第三方)``` 依賴庫\r\n    - 1.建立 ```webpack.dll.js```\r\n      ```js\r\n      const path = require('path');\r\n      const webpack = require('webpack');\r\n\r\n      module.exports = {\r\n        mode: 'production',\r\n        entry: {\r\n          vendors: ['lodash'],\r\n          react: ['react', 'react-dom'],\r\n          jquery: ['jquery']\r\n        },\r\n        output: {\r\n          filename: '[name].dll.js',\r\n          path: path.resolve(__dirname, '../dll'),\r\n          // 以entry名稱作為庫做使用\r\n          library: '[name]'\r\n        },\r\n        plugins: [\r\n          // 使用插件將庫之間的映射關係保存到 [name].manifest.json 文件\r\n          new webpack.DllPlugin({\r\n            name: '[name]',\r\n            path: path.resolve(__dirname, '../dll/[name].manifest.json'),\r\n          })\r\n        ]\r\n      }\r\n      ```\r\n    - 2.在 ```package.json script``` 加入並執行 ```\"build:dll\": \"webpack --config ./build/webpack.dll.js\"```\r\n    - 3.安裝依賴：```npm install add-asset-html-webpack-plugin --save```\r\n    - 4.在主要 ```webpack``` 設定加入\r\n      ```js\r\n      const AddAssetHtmlWebpackPlugin = require('add-asset-html-webpack-plugin');\r\n\r\n      // 固定的plugin\r\n      const plugins = [\r\n        new HtmlWebpackPlugin({\r\n          template: 'src/index.html'\r\n        }), \r\n        new CleanWebpackPlugin(['dist'], {\r\n          root: path.resolve(__dirname, '../')\r\n        })\r\n      ];\r\n\r\n      // 項目可能會有多個第三方依賴需要分別配置\r\n      // 讀取dll資料夾下所有文件\r\n      const files = fs.readdirSync(path.resolve(__dirname, '../dll'));\r\n      files.forEach(file => {\r\n        if(/.*\\.dll.js/.test(file)) {\r\n          // 將打包好的第三方庫引入html\r\n          plugins.push(new AddAssetHtmlWebpackPlugin({\r\n            filepath: path.resolve(__dirname, '../dll', file)\r\n          }))\r\n        }\r\n        if(/.*\\.manifest.json/.test(file)) {\r\n          /*\r\n            在引入第三方庫時，webpack會先透過\r\n            vendors.manifest.json文件取得第三方庫引入\r\n\r\n            若第三方庫無分開打包，打包速度會較慢，\r\n            webpack 引入依賴庫時一律往 node__modules 尋找\r\n          */\r\n          plugins.push(new webpack.DllReferencePlugin({\r\n            manifest: path.resolve(__dirname, '../dll', file)\r\n          }))\r\n        }\r\n      })\r\n      module.exports = {\r\n        plugins,\r\n      }\r\n      ```\r\n\r\n<hr id=\"user-content-multiple-page\" style=\"height: 2px;\">\r\n\r\n#### <a href=\"#user-content-top\" >多頁面配置</a>\r\n- 安裝依賴：```npm i html-webpack-plugin -D```\r\n- 在主要 ```webpack``` 設定加入\r\n  - 多個頁面即對應多個 ```new HtmlWebpackPlugin```\r\n  ```js\r\n  const htmlMinifyOptions = {\r\n    // 删除 html 中的註釋\r\n    removeComments: true,\r\n    // 删除 html 中的空格\r\n    collapseWhitespace: true,\r\n    // 删除 html 標籤的雙引號\r\n    removeAttributeQuotes: true,\r\n    // 將 html 文件內的 css 壓縮\r\n    minifyCSS: true,\r\n    // 將 html 文件內的 js 壓縮\r\n    minifyJS: true\r\n  }\r\n  plugins: [\r\n    // 設定增加需要顯示的頁面\r\n    new HtmlWebpackPlugin({\r\n      // 原資料檔案\r\n      template: './src/index.html',\r\n      // 輸出檔案名\r\n      filename: 'index.html',\r\n      // 設定需要的資源(entry)\r\n      chunks: ['your.js'],\r\n      minify: htmlMinifyOptions\r\n    }),\r\n  ]\r\n  ```\r\n\r\n<hr id=\"user-content-link\" style=\"height: 2px;\">\r\n\r\n#### <a href=\"#user-content-top\" >參考連結</a>\r\n- [Webpack 官網](https://webpack.js.org/)\r\n- [Webpack 中文網](https://www.webpackjs.com/concepts/)\r\n",m=Object(t["w"])(!0),h=Object(t["w"])(!1),g=Object(t["w"])(!0),b=Object(t["w"])(!1),f=Object(t["w"])(""),k={name:"WebpackNote",components:{Loading:u["a"]},setup:function(){return Object(t["p"])(Object(o["a"])(regeneratorRuntime.mark((function n(){var r,e;return regeneratorRuntime.wrap((function(n){while(1)switch(n.prev=n.next){case 0:m.value&&(r=i()({html:!0,linkify:!0,typographer:!0,highlight:function(n,r){return p.a.highlight(n,{language:r}).value}}).use(l["a"]),e=r.render("".concat(d)),f.value=e,setTimeout((function(){m.value=!1,setTimeout((function(){g.value=!1,b.value=!0,setTimeout((function(){h.value=!0}),100)}),500)}),1e3));case 1:case"end":return n.stop()}}),n)})))),{showLoading:m,showContent:h,displayLoading:g,displayContent:b,htmlContent:f}}};e("5fd9");k.render=s;r["default"]=k},d109:function(n,r,e){}}]);
//# sourceMappingURL=webpackNote.ff129970.js.map