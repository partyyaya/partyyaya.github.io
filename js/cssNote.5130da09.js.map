{"version":3,"sources":["webpack:///./src/views/CSSNote.vue?5f75","webpack:///./src/views/CSSNote.vue","webpack:///./src/assets/md/CSS.md","webpack:///./src/views/CSSNote.vue?bf30"],"names":["displayLoading","class","displayContent","htmlContent","showLoading","showContent","name","components","Loading","setup","value","mdConfig","html","linkify","typographer","highlight","str","lang","language","use","result","render","setTimeout"],"mappings":"2GAAA,W,kKCCA,4BAKU,EAAAA,gB,iBALV,eAMI,GANJ,MACKC,MAAK,C,iBAA6B,c,gBAAqC,gB,mBAD5E,sBAaU,EAAAC,gB,iBANR,eASM,OAhBR,MAQKD,MAAK,C,uCAA8D,c,gBAAqC,gB,CAOzG,eAAsD,OAAjDA,MAAM,gBAAgB,UAAQ,EAAAE,a,2BAfvC,uB,kGCDe,25+BD4BXC,EAAc,gBAAI,GAClBC,EAAc,gBAAI,GAClBL,EAAiB,gBAAI,GACrBE,EAAiB,gBAAI,GACnBC,EAAc,eAAI,IAET,GACbG,KAAM,UACNC,WAAY,CAAEC,UAAA,MACdC,MAHa,WAiCX,OA7BA,eAAS,wCAAC,sGACJL,EAAYM,QACRC,EAAW,IAAG,CAClBC,MAAM,EACNC,SAAS,EACTC,aAAa,EAEbC,UALkB,SAKPC,EAAKC,GACd,OAAO,IAAKF,UAAUC,EAAK,CAACE,SAAUD,IAAOP,SAE9CS,IAAI,QACDC,EAAST,EAASU,OAAT,UAAmB,IAClClB,EAAYO,MAAQU,EAEpBE,YAAW,WAETlB,EAAYM,OAAQ,EACpBY,YAAW,WAETtB,EAAeU,OAAQ,EACvBR,EAAeQ,OAAQ,EACvBY,YAAW,WAETjB,EAAYK,OAAQ,IACnB,OACF,OACF,MA1BG,4CA6BH,CACLN,cACAC,cACAL,iBACAE,iBACAC,iB,UEnEN,EAAOkB,OAASA,EAED","file":"js/cssNote.5130da09.js","sourcesContent":["export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./CSSNote.vue?vue&type=style&index=0&id=b64e45a4&lang=scss\"","<template>\r\n  <Loading\r\n    :class=\"{\r\n      'content--hide': !showLoading,\r\n      'content--show': showLoading,\r\n    }\"\r\n    v-if=\"displayLoading\"\r\n  />\r\n  <div\r\n    :class=\"{\r\n      'markdown-content': true,\r\n      'content--hide': !showContent,\r\n      'content--show': showContent,\r\n    }\"\r\n    v-if=\"displayContent\"\r\n  >\r\n    <div class=\"markdown-body\" v-html=\"htmlContent\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from \"vue\";\r\nimport md from \"markdown-it\";\r\nimport md_copy from \"../utils/mdCopy\";\r\nimport hljs from \"highlight.js\";\r\nimport Loading from \"../components/Loading\";\r\nimport data from \"!raw-loader!../assets/md/CSS.md\";\r\n\r\nlet showLoading = ref(true);\r\nlet showContent = ref(false);\r\nlet displayLoading = ref(true);\r\nlet displayContent = ref(false);\r\nconst htmlContent = ref(\"\");\r\n\r\nexport default {\r\n  name: \"CSSNote\",\r\n  components: { Loading },\r\n  setup() {\r\n    onMounted(async () => {\r\n      if (showLoading.value) {\r\n        const mdConfig = md({\r\n          html: true,\r\n          linkify: true,\r\n          typographer: true,\r\n          // 針對特定語言顯示文字突出效果\r\n          highlight (str, lang) {\r\n            return hljs.highlight(str, {language: lang}).value;\r\n          },\r\n        }).use(md_copy);\r\n        const result = mdConfig.render(`${data}`);\r\n        htmlContent.value = result;\r\n\r\n        setTimeout(() => {\r\n          // 等待 v-if 效果\r\n          showLoading.value = false;\r\n          setTimeout(() => {\r\n            // 等待loading動畫結束\r\n            displayLoading.value = false;\r\n            displayContent.value = true;\r\n            setTimeout(() => {\r\n              // 等待 v-if 效果\r\n              showContent.value = true;\r\n            }, 100);\r\n          }, 500);\r\n        }, 1000);\r\n      }\r\n    });\r\n    return {\r\n      showLoading,\r\n      showContent,\r\n      displayLoading,\r\n      displayContent,\r\n      htmlContent,\r\n    };\r\n  },\r\n};\r\n</script>\r\n<style lang=\"scss\">\r\n@import \"../style/md.scss\";\r\n.content--hide {\r\n  opacity: 0;\r\n}\r\n\r\n.content--show {\r\n  opacity: 1;\r\n}\r\n</style>\r\n","export default \"## CSS 筆記\\n<a id=\\\"user-content-top\\\"></a>\\n\\n### 目錄\\n<details>\\n<summary style=\\\"cursor: pointer;\\\">&nbsp;BEM 設計模式、選擇器、文本字體、盒模型 </summary>\\n\\n- [BEM 設計模式](#user-content-bem)\\n- [加入CSS的四種方式](#user-content-add)\\n- [CSS選擇器](#user-content-selector)\\n  - [元素關係選擇器](#user-content-selector)\\n  - [偽元素](#user-content-pseudo-element)\\n  - [偽類](#user-content-pseudo-class)\\n  - [層疊性](#user-content-cascading)\\n  - [序號選擇器](#user-content-sequence-selector)\\n  - [複合選擇器](#user-content-compound-selector)\\n  - [屬性選擇器](#user-content-attribute-selector)\\n- [文本與字體屬性](#user-content-font-text)\\n  - [字體屬性](#user-content-font-text)\\n  - [常用文本樣式屬性](#user-content-text-style-attribute)\\n  - [字體合寫屬性](#user-content-font-combine-attribute)\\n- [盒模型](#user-content-box-model)\\n  - [margin 外邊距](#user-content-box-model)\\n  - [padding 內邊距](#user-content-padding)\\n  - [元素隱藏與認識盒模型](#user-content-element-hidden-and-know-box)\\n  - [行內與塊級元素](#user-content-inline-and-box)\\n\\n</details>\\n<details>\\n<summary style=\\\"cursor: pointer;\\\">&nbsp;浮動定位、邊框圓角、背景、2D3D位移 </summary>\\n\\n- [浮動與定位](#user-content-float-and-position)\\n  - [浮動](#user-content-float-and-position)\\n  - [清除浮動](#user-content-clear-float)\\n  - [固定定位](#user-content-position-fixed)\\n  - [相對定位](#user-content-position-relative)\\n  - [絕對定位](#user-content-position-absolute)\\n  - [BFC](#user-content-bfc)\\n  - [z-index](#user-content-z-index)\\n- [邊框與圓角](#user-content-borders-and-corners)\\n  - [邊框](#user-content-borders-and-corners)\\n  - [圓角](#user-content-corners)\\n  - [容器陰影](#user-content-box-shadow)\\n- [背景與漸變](#user-content-background-and-gradient)\\n  - [漸變](#user-content-background-and-gradient)\\n  - [背景](#user-content-background)\\n- [2D&3D轉換](#user-content-transform)\\n  - [位移](#user-content-transform)\\n  - [歪斜](#user-content-skew)\\n  - [旋轉](#user-content-rotate)\\n  - [縮放](#user-content-scale)\\n  - [3D空間移動](#user-content-3d-translate)\\n\\n</details>\\n<details>\\n<summary style=\\\"cursor: pointer;\\\">&nbsp;過渡與動畫</summary>\\n\\n- [過渡](#user-content-transition)\\n- [動畫](#user-content-animation)\\n\\n</details>\\n\\n\\n<hr id=\\\"user-content-bem\\\" style=\\\"height: 4px;\\\">\\n\\n### BEM 設計模式、選擇器、文本字體、盒模型\\n#### <a href=\\\"#user-content-top\\\" >BEM 設計模式</a>\\n- 什麼是BEM？\\n  ```txt\\n  BEM 是一種 CSS class 命名的設計模式，將介面切割成許多獨立的區塊，\\n  以區塊（Block）、元素（Element）和修飾子（Modifier）來命名，\\n  優點是以元件觀念進行開發，具有重用性。\\n  ```\\n- 設計範例\\n  - ```Element(元素)``` 使用雙底線做分隔、```Modifier(修飾符)``` 使用雙 dash 做分隔\\n  ```html\\n  <!-- \\n    menu 是區塊\\n    menu__item 是 menu 的元素\\n    menu__item--active 是 menu__item 的其中一種狀態\\n  -->\\n  <ul class=\\\"menu\\\">\\n    <li class=\\\"menu__item menu__item--active\\\">首頁</li>\\n    <li class=\\\"menu__item\\\">關於我</li>\\n    <li class=\\\"menu__item\\\">類別</li>\\n  </ul>\\n  ```\\n<hr id=\\\"user-content-add\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\" >加入CSS的四種方式</a>\\n- 內嵌式\\n```html\\n<style>\\n  h1 {\\n    color: red;\\n  }\\n</style>\\n```\\n- 外鏈式\\n  - rel: 關係\\n  - stylesheet: 樣式表\\n  - href: 路徑\\n```html\\n<link rel=\\\"stylesheet\\\" href=\\\"css/css.css\\\">\\n```\\n- 導入式\\n  - 導入式的樣式表不會等待css加載完畢<br>而是立即渲染html結構,會有幾秒素面朝天的時間\\n```html\\n<style>\\n  @import url(css/css.css);\\n</style>\\n```\\n- 行內式\\n```html\\n<h1 style=\\\"color: red;\\\">test</h1>\\n```\\n<hr id=\\\"user-content-selector\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\" >CSS選擇器</a>\\n#### <a href=\\\"#user-content-top\\\" >元素關係選擇器</a>\\n```css\\n/* 只對兒子標籤 */\\n.box > p {\\n  color: red;\\n}\\n\\n/* 只對同級下一個標籤 */\\nimg + span {\\n  color: green;\\n}\\n\\n/* 對之後所有同級標籤 */\\nh3 ~ span {\\n  font-style: italic;\\n}\\n```\\n\\n<hr id=\\\"user-content-pseudo-element\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\" >偽元素</a>\\n```css\\n/* before after 的 content 為必須屬性 */\\n/* 表示在所有a標籤裡所有文本之前都增加■(意指連■都可點選) */\\na::before {\\n  content: \\\"■\\\";\\n}\\n\\n/* \\n重點:還可以使用絕對定位在特定的目標前(後::after)加上圖片 \\n舉例:\\nfooter .part1 dl::before {\\n  content: '';\\n  position: absolute;\\n  width: 60px;\\n  height: 60px;\\n  background-image: url(../images/icons.png);\\n  left: 0;\\n}\\n*/\\n\\n/* 表示在所有a標籤裡所有文本之後都增加❤(意指連❤都可點選) */\\na::after {\\n    content: \\\"❤\\\";\\n}\\n\\n.box1::selection {\\n  /* 設定選取後背景颜色 */\\n  background-color: springgreen;\\n  /* 設定選取後文字颜色 */\\n  color: deeppink;\\n}\\n\\n/* 鎖定該塊級元素裡的第一個字 */\\n.box1::first-letter {\\n  font-size: 50px;\\n}\\n\\n/* 鎖定該塊級元素裡的第一行字 */\\n.box1::first-line {\\n  /* 添加下划线 */\\n  text-decoration: underline;\\n}\\n```\\n<hr id=\\\"user-content-pseudo-class\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\" >偽類</a>\\n- a 標籤偽類\\n  - link 與 visited 先後都可\\n  - hover 需在 active 之前\\n  - link & visited 需在 hover & active 之前\\n```css\\n/* 沒有被訪問 */\\na:link {\\n  color: dodgerblue;\\n}\\n\\n/* 被訪問過 */\\na:visited {\\n  color: darkgoldenrod;\\n}\\n\\n/* 鼠標懸停在連結上 */\\na:hover {\\n  background-color: gold;\\n}\\n\\n/* 按下但未鬆開 */\\na:active {\\n  font-size: 50px;\\n}\\n```\\n\\n- css3偽類\\n```css\\n/* 若標籤內為空則生效 */\\n.para:empty {\\n  background-color: red;\\n}\\n\\n/* 聚焦時生效(若設定 disable 則無法聚焦) */\\ninput:focus {\\n  background-color: rgb(239, 243, 181);\\n}\\n\\ninput:disabled {\\n  border: 1px solid #000;\\n}\\n\\ninput:enabled {\\n  border: 1px solid rgb(17, 84, 209);\\n}\\n\\n/* \\n只用於單選按鈕和複選框\\n此範例目標為 checked 狀態的 input 後面的第一個 span\\n*/\\ninput:checked+span {\\n  color: red;\\n}\\n\\n/* 相等於html標籤 */\\n:root {\\n  font-size: 20px;\\n}\\n```\\n<hr id=\\\"user-content-cascading\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\" >層疊性</a>\\n- 行内式 > 内嵌式的優先级\\n- id > class > 標籤\\n- 若層級一樣則按照先後順序\\n- 就近原則\\n  - 若都沒選中則看誰比較接近,若都選中則看權重\\n  - 近 > 權重\\n```html\\n<style>\\np {\\n  color: red;\\n}\\n\\n#para {\\n  color: green;\\n}\\n\\n.spec {\\n  color: blue;\\n}\\n\\n/* \\n  id > class > 標籤\\n  權重(2, 0, 1)\\n*/\\n#box1 #box2 p {\\n  color: red;\\n}\\n\\n/* \\n  權重(2, 1, 2)\\n*/\\n#box1 div.box2 #box3 p {\\n  color: green;\\n}\\n\\n/* \\n  權重(0, 3, 1)\\n*/\\n.box1 .box2 .box3 p {\\n  color: blue;\\n}\\n\\n/* \\n  權重(0, 1, 1)\\n*/\\n.list li {\\n  color: red;\\n}\\n\\n/* \\n  權重(0, 1, 0)\\n  如果加 !important 則視為最優先\\n*/\\n.spec {\\n  color: blue !important;\\n}\\n</style>\\n<body>\\n  <p id=\\\"para\\\" class=\\\"spec\\\">我是段落</p>\\n  <div id=\\\"box1\\\" class=\\\"box1\\\">\\n    <div id=\\\"box2\\\" class=\\\"box2\\\">\\n      <div id=\\\"box3\\\" class=\\\"box3\\\">\\n        <p>我是段落</p>\\n      </div>\\n    </div>\\n  </div>\\n\\n  <ul class=\\\"list\\\">\\n    <li>列表项</li>\\n    <li class=\\\"spec\\\">列表项</li>\\n    <li class=\\\"spec\\\">列表项</li>\\n    <li>列表项</li>\\n    <li>列表项</li>\\n    <li>列表项</li>\\n    <li>列表项</li>\\n  </ul>\\n</body>\\n```\\n<hr id=\\\"user-content-sequence-selector\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\" >序號選擇器</a>\\n- 若指定(:前面)的標籤不符則不會生效 \\n```html\\n<style>\\n  /* 第1個是p標籤生效 */\\n  .box1 p:first-child {\\n    color: red;\\n  }\\n\\n  /* 最後1個是p標籤生效 */\\n  .box1 p:last-child {\\n    color: blue;\\n  }\\n\\n  /* 若第3個不是p標籤則不生效 */\\n  .box2 p:nth-child(3) {\\n    color: green;\\n  }\\n\\n  /* 奇數: odd=2n+1 */\\n  .box3 p:nth-child(odd) {\\n    color: orange;\\n  }\\n\\n  /* 偶數: even=2n */\\n  .box3 p:nth-child(even) {\\n    color: red;\\n  }\\n\\n  /* 選擇第三個p標籤 */\\n  .box4 p:nth-of-type(3) {\\n    color: blue;\\n  }\\n\\n  /* 倒數第二個是p標籤則生效 */\\n  .box5 p:nth-last-child(2) {\\n    color: sienna;\\n  }\\n\\n  /* 選擇倒數第二個p標籤 */\\n  .box5 p:nth-last-of-type(2) {\\n    color: sienna;\\n  }\\n</style>\\n```\\n<hr id=\\\"user-content-compound-selector\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\" >複合選擇器</a>\\n```html\\n<style>\\n  /* 後代選擇器必須以空格隔開 */\\n  div.box p.spec em {\\n    color: red;\\n  }\\n\\n  /* 交集選擇器通常用在類中指定的標籤 */\\n  h3.spec {\\n    font-style: italic;\\n  }\\n\\n  /* 多重選擇器 */\\n  ul, ol {\\n    list-style: none;\\n  }\\n</style>\\n<body>\\n  <div class=\\\"box\\\">\\n    <ul>\\n      <li>\\n        <p class=\\\"spec\\\">段落<em>強調文字</em></p>\\n      </li>\\n    </ul>\\n  </div>\\n  <h3 class=\\\"spec\\\">三級標題</h3>\\n  <ul>\\n    <li>無序列表的列表項</li>\\n  </ul>\\n  <ol>\\n    <li>有序列表的列表項</li>\\n  </ol>\\n</body>\\n```\\n<hr id=\\\"user-content-attribute-selector\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\" >屬性選擇器</a>\\n```html\\n<style>\\n  img {\\n    width: 300px;\\n  }\\n\\n  /* \\n    [alt] 有這個屬性\\n    [alt=\\\"abc\\\"] 精確匹配\\n    [alt^=\\\"abc\\\"] 開頭匹配\\n    [alt$=\\\"abc\\\"] 結尾匹配\\n    [alt*=\\\"abc\\\"] 任意位置匹配\\n    [alt|=\\\"abc\\\"] abc為開頭\\n    [alt~=\\\"abc\\\"] abc為空格分開的獨立部分如:777 abc 888\\n   */\\n\\n  img[alt~=\\\"手機拍攝\\\"] {\\n    border: 3px solid red;\\n  }\\n</style>\\n<img src=\\\"images/image.jpg\\\" alt=\\\"手機拍攝\\\">\\n```\\n<hr id=\\\"user-content-font-text\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\" >文本與字體屬性</a>\\n#### <a href=\\\"#user-content-top\\\" >字體屬性</a>\\n```css\\n/* 擁有字體文件時可用以下方式定義字體 */\\n@font-face {\\n  /* 取名 */\\n  font-family: 'webfont';\\n  /* 為字體提供一個非常小的阻塞週期和無限的交換週期 */\\n  font-display: swap;\\n  /* IE9*/\\n  src: url('fonts/webfont.eot');\\n  /* IE6-IE8 */\\n  src: url('fonts/webfont.eot') format('embedded-opentype'),\\n      /* chrome、firefox */\\n      url('fonts/webfont.woff2') format('woff2'),\\n      url('fonts/webfont.woff') format('woff'),\\n      /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/\\n      url('fonts/webfont.ttf') format('truetype'),\\n      /* iOS 4.1- */\\n      url('fonts/webfont.svg') format('svg');\\n}\\n\\n/* \\n  會先查看使用者主機有無安裝字體\\n  若第一個字體沒有則陸續往下尋找合適的字體\\n*/\\n.para5 {\\n  font-family: 'Times New Roman', serif, 'Microsoft Yahei';\\n}\\n\\n/* \\n  通常中文字體會擺在英文字體後面以專注顯示中文\\n  字體如果是中文或英文中間有空格，用引號包起来\\n  多個字體設置，字體與字體之间用逗號隔開\\n  引號嵌套:外面使用雙引號，裡面使用單引號\\n*/\\n.para6 {\\n  font-family: 'Times New Roman', serif, '微软雅黑';\\n}\\n\\nh3 {\\n  font-family: 'webfont';\\n  color: rgb(250, 50, 190);\\n}\\n```\\n<hr id=\\\"user-content-text-style-attribute\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\" >常用文本樣式屬性</a>\\n```css\\n.test {\\n  /* 背景顏色 */\\n  background-color: #f36;\\n  /* 字體顏色 */\\n  color: #ffffff;\\n  /* 最大到255 透明度為0~1*/\\n  color: rgba(255, 0, 0, .6);\\n  /* 字體粗細(預設: normal(400), 加粗: bold(700)) */\\n  font-weight: bold;\\n  /* 字體風格(預設 normal) */\\n  font-style: italic;\\n  /* \\n    文本內容之前的縮進量\\n    2em: 表示兩個字符的寬度\\n    %: 以該內容塊寬度決定\\n  */\\n  text-indent: 2em;\\n  /* 文字特效(預設: none, underline: 底線, line-through: 刪除線) */\\n  text-decoration: underline;\\n  /* \\n    行高:\\n    1.75 代表該字體大小 x 1.75倍\\n    也可以寫成 175% 或 26x1.75=45.5px 或 1.75em\\n    通常以倍數表示 \\n  */\\n  line-height: 1.75;\\n}\\n```\\n<hr id=\\\"user-content-font-combine-attribute\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\" >字體合寫屬性</a>\\n- 必須包含: ```font-size``` ```font-family```\\n- 可選擇包含: ```font-style``` ```font-variant``` ```font-weight``` ```line-height```\\n- ```font-style``` ```font-variant``` ```font-weight``` 必须在 ```font-size``` 之前\\n- ```line-height``` 需在 ```font-size``` 後面，由 ```/``` 分隔，如: ```16px/3```\\n- font-family 必须最后指定\\n```css\\n p {\\n  font: bold italic 40px/1.5 \\\"Times New Roman\\\", \\\"微软雅黑\\\";\\n}\\n```\\n<hr id=\\\"user-content-box-model\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\" >盒模型</a>\\n#### <a href=\\\"#user-content-top\\\" >margin 外邊距</a>\\n```css\\n/* \\n  下面這三個標籤都有預設 padding 與 margin 所以要將他們去除\\n  若 ul 設定padding為0則不顯示小圓點\\n*/\\nbody,\\nul,\\np {\\n    margin: 0;\\n    padding: 0;\\n}\\n\\n/* \\n  margin 在垂直方向會以大值為主(水平為相加)\\n  依下面範例兩個盒子之間間距為 80px\\n*/\\n.box1 {\\n  width: 200px;\\n  height: 200px;\\n  margin-bottom: 70px;\\n}\\n\\n.box2 {\\n  width: 200px;\\n  height: 200px;\\n  margin-top: 80px;\\n}\\n\\n/* \\n  應用: 水平居中\\n  margin\\n    個別屬性:\\n      margin-top\\n      margin-bottom\\n      margin-left\\n      margin-right\\n    簡化寫法:\\n      1.margin: 上 右 下 左;\\n      2.margin: 上下 左右;\\n      3.margin: 上 左右 下;\\n      4.margin: 四邊同値; \\n*/\\nsection {\\n  width: 600px;\\n  height: 100px;\\n  background-color: rgb(240, 151, 151);\\n  /* 上下為0 水平居中 */\\n  margin: 0 auto;\\n  /* 文字居中 */\\n  text-align: center;\\n  /* 行高等於盒子高，讓文字垂直居中 */\\n  line-height: 100px;\\n}\\n```\\n<hr id=\\\"user-content-padding\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\" >padding 內邊距</a>\\n```css\\n/* \\n  padding\\n    個別屬性:\\n      padding-top\\n      padding-bottom\\n      padding-left\\n      padding-right\\n    簡化寫法:\\n      1.padding: 上 右 下 左;\\n      2.padding: 上下 左右;\\n      3.padding: 上 左右 下;\\n      4.padding: 四邊同値;\\n*/\\n.box2 {\\n  width: 200px;\\n  height: 200px;\\n  background-color: orange;\\n  padding: 10px 20px 30px 40px;\\n}\\n.box3 {\\n  width: 200px;\\n  height: 200px;\\n  background-color: orange;\\n  padding: 10px 20px 30px;\\n}\\n.box4 {\\n  width: 200px;\\n  height: 200px;\\n  background-color: orange;\\n  padding: 10px 20px;\\n}\\n.box5 {\\n  width: 200px;\\n  height: 200px;\\n  background-color: orange;\\n  padding: 10px;\\n}\\n```\\n<hr id=\\\"user-content-element-hidden-and-know-box\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\" >元素隱藏與認識盒模型</a>\\n```css\\n/* 元素隱藏 */\\n.box1{\\n  width: 200px;\\n  height: 200px;\\n  /* 隱藏，放棄位置 */\\n  display: none;\\n  /* 隱藏，不放棄位置 */\\n  visibility: hidden;\\n}\\n\\n/* 認識盒模型 */\\n.box2 {\\n  /* \\n    total:盒子寬:340px 高:240px\\n    width height 為\\\"內容寬高\\\";\\n  */\\n  width: 300px;\\n  height: 200px;\\n  background-color: gold;\\n  /* 邊框 */\\n  border: 10px solid red;\\n  /* 內邊距 */\\n  padding: 10px;\\n}\\n\\n/* \\n  box-sizing属性\\n  若設置 border-box 屬性(content-box為預設)\\n  width height 則會以盒子寬高計算\\n  如下面範例實際能使用寬高只剩 160x160 \\n*/\\n.box3 {\\n  box-sizing: border-box;\\n  width: 200px;\\n  height: 200px;\\n  border: 10px solid #000;\\n  padding: 10px;\\n}\\n```\\n<hr id=\\\"user-content-inline-and-box\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\" > 行內與塊級元素</a>\\n```css\\n/* \\n  行內元素(如:span)與塊級元素(如:div) \\n  差別:\\n    1.塊級元素會獨占一行，其寬度自動填滿其父元素寬度\\n      行內元素不會獨占一行，相鄰的行內元素會排列在同一行，直至排不下才會換行，其寬度隨元素的內容而變化\\n    2.塊級元素可以包含行內元素和塊級元素；行內元素不能包含塊級元素\\n    3.行內元素設置以下屬性無效\\n      width、height、margin-top、margin-bottom、\\n      padding-top、padding-bottom \\n\\n  相互轉換:\\n    1.轉為行內塊: display:inline-block;\\n    2.轉為行內元素: display:inline;\\n    3.轉為塊級元素: display:block;\\n*/\\nspan {\\n  /* 轉為行內塊 */\\n  display: inline-block;\\n}\\n\\n/* 塊级元素應用 */\\n.box1 {\\n  /* 寬度省略掉，由於是塊级元素，寬度會自動撐滿 */\\n  height: 100px;\\n}\\n\\n.box2 {\\n  /* 高度省略掉，會被內容自動撐開 */\\n  width: 200px;\\n}\\n```\\n<hr  id=\\\"user-content-float-and-position\\\" style=\\\"height: 4px;\\\">\\n\\n### 浮動定位、邊框圓角、背景、2D3D位移\\n#### <a href=\\\"#user-content-top\\\" >浮動與定位</a>\\n#### <a href=\\\"#user-content-top\\\" >浮動</a>\\n- 浮動的元素一定能設置寬高\\n```css\\n/* 左浮動 */\\n.box1 {\\n  float: left;\\n}\\n\\n/* 右浮動 */\\n.box2 {\\n  float: right;\\n}\\n\\n/* \\n  1.浮動的順序貼靠特性\\n    順序會依標籤從上往下\\n    最下面的標籤會一直往上直到找到須貼靠的對象\\n\\n  2.關於寬度\\n    父盒子必須涵蓋所有子盒子的寬度否則子盒子可能會被擠下去\\n    父盒子若不設高度則不會被子盒子浮動撐開(去除浮動則會撐開)\\n*/\\n/* 父盒子 div */\\n.box {\\n  width: 600px;\\n  height: 200px;\\n  border: 1px solid #000;\\n}\\n/* 子盒子 div c1 */\\n.box .c1 {\\n  width: 200px;\\n  height: 200px;\\n  background-color: orange;\\n  float: left;\\n}\\n/* 子盒子 div c2 */\\n.box .c2 {\\n  width: 200px;\\n  height: 200px;\\n  background-color: green;\\n  float: left;\\n}\\n/* 子盒子 div c3 */\\n.box .c3 {\\n  width: 200px;\\n  height: 200px;\\n  background-color: blue;\\n  float: left;\\n}\\n\\n/* 溢出隱藏:overflow: hidden; */\\ndiv{\\n  width: 200px;\\n  height: 200px;\\n  padding: 50px;\\n  border: 1px solid #000;\\n  /* 溢出盒子邊框的內容將被隱藏，但會保留盒子padding部分的溢出 */\\n  overflow: hidden;\\n}\\n```\\n<hr id=\\\"user-content-clear-float\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\" >清除浮動</a>\\n- 常用方法一\\n```html\\n<style>\\n  /* \\n    若沒設置 height 則不被視為BFC \\n    但又會碰到不確定height多少的情況且子元素有浮動現象\\n    所以需要用特別的方法做到BFC\\n    這邊用 overflow: hidden; 來取消子元素對父元素影響\\n  */\\n  /* ================ 方法 ================== */\\n  div {\\n    overflow: hidden;\\n    margin-bottom: 10px;\\n  }\\n  /* ======================================== */\\n\\n  p {\\n    float: left;\\n    width: 100px;\\n    height: 100px;\\n    background-color: orange;\\n    margin-right: 20px;\\n  }\\n</style>\\n<body>\\n  <div>\\n    <p></p>\\n    <p></p>\\n  </div>\\n</body>\\n```\\n- 常用方法二\\n```html\\n<style>\\n  /* ================ 方法 ================== */\\n  /* after 的 content 必須要寫否則失效 */\\n  .clearfix::after {\\n    content: '';\\n    clear: both;\\n    /* 必須转为块级元素 */\\n    display: block;\\n  }\\n  /* ======================================== */\\n\\n  p {\\n    float: left;\\n    width: 100px;\\n    height: 100px;\\n    background-color: orange;\\n    margin-right: 20px;\\n  }\\n</style>\\n<body>\\n  <div class=\\\"clearfix\\\">\\n    <p></p>\\n    <p></p>\\n  </div>\\n</body>\\n```\\n<hr id=\\\"user-content-position-fixed\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\" >固定定位</a>\\n- 使用方式: ```position: fixed;```\\n- 並選擇設定以下四種屬性: ```top``` ```bottom``` ```left``` ```right```\\n- 特點\\n  - 以頁面視窗為定位標準\\n  - 常用來做導航與返回頂部用途\\n```css\\n.box {\\n  position: fixed;\\n  bottom: 100px;\\n  right: 100px;\\n  width: 100px;\\n  height: 100px;\\n  background-color: orange;\\n}\\n```\\n<hr id=\\\"user-content-position-relative\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\" >相對定位</a>\\n- 使用方式: ```position: relative;```\\n- 並選擇設定以下四種屬性: ```top``` ```bottom``` ```left``` ```right```\\n- 特點\\n  - 主要用來微調渲染位置\\n  - 頁面渲染會依相對位置渲染\\n  - 相對位置不會釋放原本位置(原位置以下的標籤依然在原標籤位置下面)\\n```html\\n<style>\\n/* \\n  若同軸方向會以最後為主 \\n  left:100px right:100px;\\n  則會以最後right:100px;表示\\n*/\\ndiv{\\n  width: 400px;\\n  height: 400px;\\n  border: 1px solid #000;\\n  margin: 40px auto;\\n}\\n\\np {\\n  width: 100px;\\n  height: 100px;\\n  background-color: orange;\\n  position: relative;\\n  top: 100px;\\n  left: 100px;\\n}\\n</style>\\n<body>\\n  <div>\\n    <p></p>\\n    <ul>\\n      <li>列表</li>\\n      <li>列表</li>\\n      <li>列表</li>\\n    </ul>\\n  </div>\\n</body>\\n```\\n<hr id=\\\"user-content-position-absolute\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\" >絕對定位</a>\\n- 使用方式: ```position: absolute;```\\n- 可選擇設定以下四種屬性: ```top``` ```bottom``` ```left``` ```right```\\n- 特點:\\n  - 絕對定位會釋放自己位置(脫離標準文檔流)\\n  - 會直接壓蓋掉其他元素(主要用途)\\n  - 設置 \\\"絕對\\\" 或 \\\"固定\\\" 定位的元素就可以設置寬高\\n- 其他應用如下\\n```html\\n<head>\\n  <style>\\n    /*\\n      若要設定居中:\\n      margin 為寬高的一半\\n    */\\n    .test {\\n      width: 80px;\\n      height: 80px;\\n      position: absolute;\\n      top: 50%;\\n      left: 50%;\\n      margin-top: -40px;\\n      margin-left: -40px;\\n    }\\n\\n    /* \\n      絕對定位之子絕父相關係\\n      絕對定位的標籤會去找與他最近含有 position 父標籤當作參考點\\n      經過測試: 父標籤帶有 固定定位 ,相對定位, 固定定位 皆會產生效果\\n      下面範例為 p 會在 父標籤box2的 左上角 \\n    */\\n    .box1 {\\n      width: 402px;\\n      height: 402px;\\n      border: 1px solid #000;\\n      padding: 100px;\\n      margin: 0 auto;\\n    }\\n\\n    .box2 {\\n      width: 200px;\\n      height: 200px;\\n      padding: 100px;\\n      border: 1px solid #000;\\n      position: relative;\\n    }\\n\\n    .box3 {\\n      width: 98px;\\n      height: 98px;\\n      padding: 50px;\\n      border: 1px solid #000;\\n    }\\n\\n    p {\\n      width: 50px;\\n      height: 50px;\\n      background-color: orange;\\n      position: absolute;\\n      top: 0;\\n      left: 0;\\n    }\\n  </style>\\n</head>\\n\\n<body>\\n  <a href=\\\"\\\">111</a>\\n  <div class=\\\"box1\\\">\\n    <div class=\\\"box2\\\">\\n      <div class=\\\"box3\\\">\\n        <p></p>\\n      </div>\\n    </div>\\n  </div>\\n</body>\\n```\\n<hr id=\\\"user-content-bfc\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\" >BFC</a>\\n- BFC 意思: Block formatting context 塊級格式上下文\\n- 定義: 為頁面上一個獨立容器,容器裡面子元素不會影響到外面的元素,反之亦然\\n- 常用創建 BFC 方式: [詳細請見 MDN](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context)\\n  - float 不是 ```none```\\n  - position 不是 ```static``` ```relative```\\n  - display 是 ```inline-block``` ```flex``` ```inline-flex```\\n  - ```overflow: hidden;```\\n\\n<hr id=\\\"user-content-z-index\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\" >z-index</a>\\n- z-index 較大的元素會覆蓋較小的元素在上層進行顯示\\n- 下面範例 box1 會覆蓋在 box2 上面\\n```html\\n<head>\\n  <style>\\n    .box1 {\\n      width: 300px;\\n      height: 300px;\\n      background-color: orange;\\n      position: absolute;\\n      top: 100px;\\n      left: 100px;\\n      z-index: 9999;\\n    }\\n\\n    .box2 {\\n      width: 300px;\\n      height: 300px;\\n      background-color: blue;\\n      position: absolute;\\n      top: 200px;\\n      left: 200px;\\n      z-index: 999;\\n    }\\n  </style>\\n</head>\\n\\n<body>\\n  <div class=\\\"box1\\\"></div>\\n  <div class=\\\"box2\\\"></div>\\n</body>\\n```\\n\\n<hr  id=\\\"user-content-borders-and-corners\\\" style=\\\"height: 4px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\" >邊框與圓角</a>\\n#### <a href=\\\"#user-content-top\\\" >邊框</a>\\n- 使用說明: ```border: 粗細 樣式 顏色```\\n- 可細分為以下三種細項屬性 \\n  - 粗細 ```border-width``` \\n  - 樣式 ```border-style```\\n    - 實線 ```solid```\\n    - 點狀線 ```dotted```\\n    - 虛線 ```dashed```\\n  - 顏色 ```border-color```\\n- 可細分為以下四邊\\n  - 上邊 ```border-top```\\n  - 下邊 ```border-bottom```\\n  - 左邊 ```border-left```\\n  - 右邊 ```border-right```\\n- 範例\\n  - 定義邊框: ```border: 3px solid #000;```\\n  - 修改四邊的顏色: ```border-color: red;```\\n  - 修改上邊的樣式: ```border-top-style: dotted;```\\n  - 去掉左邊邊框: ```border-left: none;```\\n  - 製作朝下的紅色三角形\\n    ```txt\\n    width: 0;\\n    height: 0;\\n    border: 20px solid transparent;\\n    border-top-color: red;\\n    ```\\n\\n<hr id=\\\"user-content-corners\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\" >圓角</a>\\n- [詳細請看 MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius)\\n- 理解說明: 將指定半徑的圓放在容器\\\"內\\\"四角劃出圓弧四邊形\\n- 使用說明\\n  - ```border-radius: 半徑(可多個值)```\\n  - 半徑可以用```%```或其他單位(px、em...)\\n    - ```border-radius: 50%;```代表用該容器一半寬度做半徑畫成\\\"圓形\\\"\\n  - 一個值(四角)\\n  - 二個值\\n    - 1.左上角和右下角\\n    - 2.右上角和左下角\\n  - 三個值\\n    - 1.左上角\\n    - 2.右上角和左下角\\n    - 3.右下角\\n  - 四個值\\n    - 1.左上角\\n    - 2.右上角\\n    - 3.右下角\\n    - 4.左下角\\n- 高級方法範例: ```border-radius: 70% 30% 30% 70% / 60% 40% 60% 40%;```\\n  - 理解說明: ```border-radius: top(左1 右2) bottom(右3 左4)/ right(上1 下4) left(上2 下3);```\\n    - 1 ~ 4代表順序\\n    - 每一角都可分為(水平邊 & 垂直邊,所以top=左上角水平邊+右上角水平邊,依此類推)\\n    - 其他範例:\\n      ```txt\\n      border-radius: 70% 30%/ 60% 40%;\\n      等於:\\n      border-radius: top(左70% 右30%) bottom(右70% 左30%)/ right(上60% 下40%) left(上40% 下60%);\\n      ```\\n- 可細分為四角\\n  - 左上角 ```border-top-left-radius```\\n  - 右上角 ```border-top-right-radius```\\n  - 右下角 ```border-bottom-right-radius```\\n  - 左下角 ```border-bottom-left-radius```\\n\\n<hr id=\\\"user-content-box-shadow\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">容器陰影</a>\\n- 使用說明\\n  - 四個值\\n    - ```box-shadow: x偏移量 y偏移量 模糊程度 顏色;```\\n  - 五個值\\n    - ```box-shadow: x偏移量 y偏移量 模糊程度 延展出去的寬度 顏色;```\\n  - 內陰影(前面加入 inset 關鍵字)\\n    - ```box-shadow: inset x偏移量 y偏移量 模糊程度 (延展出去的寬度) 顏色;```\\n  - 可以用逗號多重疊加\\n    - ```box-shadow: 2px 2px 30px red, 4px 4px 40px blue, 6px 6px 50px green, inset 0px 0px 6px orange;```\\n\\n<hr id=\\\"user-content-background-and-gradient\\\" style=\\\"height: 4px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">背景與漸變</a>\\n#### <a href=\\\"#user-content-top\\\">漸變</a>\\n- 逕向漸變\\n  - [詳細請看 MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/radial-gradient())\\n  - 使用方式(裡面可填多種顏色平均分配)\\n    - ```background-image: radial-gradient(圓心座標, 開始顏色, 結束顏色);```\\n  - 範例\\n  ```css\\n  background-image: radial-gradient(50% 50%, white, rgb(211, 211, 211));\\n  /*上面等同於下面*/\\n  background-image: radial-gradient(50% 50%, white 0%, rgb(211, 211, 211) 100%);\\n  ``` \\n- 線性漸變\\n  - [詳細請看 MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient())\\n  - 使用方式\\n    - ```linear-gradient(方向, 開始顏色, 結束顏色);```\\n  - 範例\\n  ```css\\n  background-image: linear-gradient(to right, red, blue);\\n  /* 可以設定角度 */\\n  background-image: linear-gradient(45deg, red, blue);\\n  /* 從左到右平均分配顏色 */\\n  background-image: linear-gradient(to right, red, yellow, orange, green, blue, purple);\\n  /* 設定黃色在從左到右的20%出現 */\\n  background-image: linear-gradient(to right, red, yellow 20%, blue);\\n  ```\\n\\n<hr id=\\\"user-content-background\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">背景</a>\\n- ```background-color```\\n  - 使用說明\\n      - ```background-color: 顏色;```\\n- ```background-image```\\n  - 使用說明\\n    - ``` background-image: url(圖片連結);```\\n- ```background-attachment```\\n  - 使用說明\\n    - ```background-attachment: 屬性;```\\n    - 屬性有三種依 \\\"容器背景圖片\\\" 查看變化\\n      - ```fixed``` 容器拉滾動條不動,視窗拉滾動條不動\\n      - ```scroll``` 容器拉滾動條不動,視窗拉滾動條動\\n      - ```local``` 容器拉滾動條動,視窗拉滾動條動\\n- ```background-clip```\\n  - 使用說明\\n    - ``` background-clip: 屬性;```\\n    - 屬性有三種\\n      - ```border-box``` 背景被剪裁到邊框盒\\n      - ```padding-box``` 背景被剪裁到內邊距框\\n      - ```content-box``` 背景被剪裁到內容框\\n- ```background-origin```\\n  - 使用說明\\n    - ``` background-origin: 屬性;```\\n    - 屬性有三種\\n      - ```border-box``` 背景圖片以border區域為參考\\n      - ```padding-box``` 背景圖片以padding區域為參考\\n      - ```content-box``` 背景圖片以content區域為參考\\n- ```background-position```\\n  - 使用說明\\n    - ``` background-position: 位置;```\\n  - 範例\\n  ```css\\n  /* 常用屬性 */\\n  background-position: top;\\n  background-position: bottom;\\n  background-position: left;\\n  background-position: right;\\n  background-position: center;\\n\\n  /* 從下往上50px 從右到左100px */\\n  background-position: bottom 50px right 100px;\\n\\n  /* 以左上角為基準 x y */\\n  background-position: 25% 75%;\\n  background-position: 0 0;\\n  background-position: 1cm 2cm;\\n  background-position: 10ch 8em;\\n  ```\\n- ```background-repeat```\\n  - [詳細請看 MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat)\\n  - 使用說明\\n    - ``` background-repeat: 屬性;```\\n  - 範例\\n  ```css\\n  /* 橫向重複 */\\n  background-repeat: repeat-x;\\n  /* 垂直重複 */\\n  background-repeat: repeat-y;\\n  /* 默認 */\\n  background-repeat: repeat;\\n  /* 不重複 */\\n  background-repeat: no-repeat;\\n\\n  /* 水平horizontal 垂直vertical */\\n  background-repeat: no-repeat repeat;\\n  ```\\n- ```background-size```\\n  - [詳細請看 MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/background-size)\\n  - 使用說明\\n    - ``` background-size: 屬性;```\\n  - 範例\\n  ```css\\n  /* 代表寬300px 高隨意擴展 */\\n  background-size: 300px auto;\\n  /* 代表盒子寬25% 高25% */\\n  background-size: 25% 25%;\\n  /* \\n    用一張圖片充滿盒子(不延展)\\n    但若加入no-repeat則不充滿\\n  */\\n  background-size: contain;\\n  background-repeat: no-repeat;\\n  /* 用一張圖片充滿盒子(延展) */ \\n  background-size: cover;\\n  background-repeat: no-repeat;\\n  ```\\n- ```background 綜合簡寫```\\n  - [詳細請看 MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/background)\\n  - 使用說明\\n  ```css\\n  /* 裡面可以+-屬性,後面兩個屬性為 background-position */\\n  background: yellow url(images/image.png) no-repeat center center;\\n  ```\\n- ```CSS精靈```\\n  - 使用說明\\n  ```css\\n  /* \\n    用一張大圖片裡面有多張icon\\n    利用 background-position 去取得裡面其中一張icon\\n    重點: 右下角為(0,0) 到達要剪裁圖示左上角再用寬高去剪裁圖片\\n  */\\n  width: 34px;\\n  height: 32px;\\n  background-image: url(images/image.png);\\n  background-position: -66px -488px;\\n  ```\\n\\n<hr id=\\\"user-content-transform\\\" style=\\\"height: 4px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">2D&3D轉換</a>\\n#### <a href=\\\"#user-content-top\\\">位移</a>\\n- 與相對定位相同,會保留實際位置並渲染位移後的位置\\n- 可以拆分 ```translateX``` ```translateY``` ```translateZ```\\n```css\\ntransform: translate(400px, 100px);\\n/* 以下三個等價 */\\ntransform: translate(400px);\\ntransform: translate(400px, 0px);\\ntransform: translateX(400px);\\n/* 也可以用 % */\\ntransform: translate(-50%, -50%);\\n```\\n<hr id=\\\"user-content-skew\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">歪斜</a>\\n```css\\n/* x:橫向扭曲 y:縱向扭曲 */\\ntransform: skew(10deg, 20deg);\\n/* \\n  當只有一個參數的時候，第二個參數默認為0deg，\\n  下面為元素的水平方向逆時針傾斜45度，豎直方向傾斜0度\\n*/\\ntransform: skew(45deg);\\n```\\n\\n<hr id=\\\"user-content-rotate\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">旋轉</a>\\n```css\\n/* 正:順時針 負:逆時針 */\\ntransform: rotate(30deg);\\n/* 以盒子左上角为中心点进行旋转(可用%數替換:50% 50%為中心) */\\ntransform-origin: 0 0;\\ntransform: rotate(30deg);\\n```\\n\\n<hr id=\\\"user-content-scale\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">縮放</a>\\n```css\\n/* 整體縮小 0.66 倍 */\\ntransform: scale(.66);\\n/* \\n  若要將 width: 1000px; height: 500px; 的元素\\n  縮放為 width: 300px; height: 100px;\\n  則 transform: scale(sx, sy)，\\n  sx 表示宽度缩放為原元素的 sx 倍，sy 表示高度缩放為原元素的 sy 倍。\\n  所以缩放為 transform: scale(300/1000, 100/500)，\\n  即 transform: scale(.3, .2)\\n*/\\n```\\n\\n<hr id=\\\"user-content-3d-translate\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">3D空間移動</a>\\n```html\\n<head>\\n  <style>\\n    p {\\n      width: 200px;\\n      height: 200px;\\n      border: 1px solid #000;\\n      background-color: orange;\\n    }\\n\\n    .box1 {\\n      width: 202px;\\n      height: 202px;\\n      border: 1px solid #000;\\n      margin: 50px auto;\\n      /* 若子標籤(演員)要顯示3d效果則父標籤(舞台)必須增加 perspective(視角遠近) */\\n      perspective: 300px;\\n    }\\n\\n    /* 想像面對螢幕為x軸,旁邊擴展為y軸*/\\n    .box1 p {\\n      /* 要注意當3d變型後,移動的x,y,z軸也會跟著傾斜 */\\n      /* x軸順時鐘轉30度 */\\n      transform: rotateX(30deg) translateX(100px) translateY(100px) translateZ(100px);\\n    }\\n    /* 不提transform: rotateZ(); 因為只是平面旋轉 */\\n  </style>\\n</head>\\n\\n<body>\\n  <div class=\\\"box1\\\">\\n    <p></p>\\n  </div>\\n</body>\\n```\\n\\n<hr id=\\\"user-content-transition\\\" style=\\\"height: 4px;\\\">\\n\\n### 過渡與動畫\\n#### <a href=\\\"#user-content-top\\\">過渡</a>\\n- 所有數值類型的屬性都可使用過渡\\n- 背景顏色與文字顏色都可使用過渡\\n- 所有變形(2d與3d)都可使用過渡\\n- 建議事項: 請先設定初始狀態\\n- 過渡可切分四個屬性\\n  - ```transition-property``` 那些屬性需要過渡\\n  - ```transition-duration``` 動畫時間\\n  - ```transition-timing-function``` 動畫變化曲線(緩動效果)\\n  - ```transition-delay``` 延遲時間\\n- 常用的緩衝屬性\\n  - ```線性``` transition-timing-function: linear;\\n  - ```緩慢的開始，中間變快，最後慢慢結束``` transition-timing-function: ease;\\n  - ```先慢後快``` transition-timing-function: ease-in;\\n  - ```先快後慢``` transition-timing-function: ease-out;\\n  - ```緩慢的開始和結束``` transition-timing-function: ease-in-out;\\n  - [貝塞爾曲線](https://cubic-bezier.com) transition-timing-function: cubic-bezier(.29,-0.98,.5,1.76);\\n\\n- 實際使用\\n```css\\n/* \\n  可以只設定兩個屬性:\\n  1.用來設置哪個屬性需要過渡\\n  2.設置過渡的時間 \\n*/\\ntransition: background 1s;\\n\\n/* \\n  1:需要變化的屬性 \\n  2:動畫時長(必須以s(秒)為單位) \\n  3.變化速度曲線 \\n  4.延遲時間(可ms) \\n*/\\ntransition: width 5s linear 0s;\\n\\n/* 過渡動畫範例 */\\n.test {\\n  width: 200px;\\n  height: 200px;\\n  background-color: orange;\\n  margin-bottom: 10px;\\n  transition: transform 1s linear 0s;\\n}\\n\\n.test:hover {\\n  transform: scale(1.2) rotate(360deg);\\n}\\n\\n/* \\n  若有多個屬性使用過渡\\n  則可用all屬性代替(若屬性只有一個則請勿使用,有效率問題) */\\n.test2 {\\n  /* 設定初始狀態 */\\n  width: 200px;\\n  height: 200px;\\n  background-color: orange;\\n  border-radius: 0;\\n  /* 設置過渡 */\\n  transition: all 1s linear 0s;\\n}\\n.test2:hover {\\n  width: 400px;\\n  height: 160px;\\n  background-color: green;\\n  border-radius: 50%;\\n}\\n```\\n- 特殊範例:旋轉立體正方形\\n```html\\n<head>\\n  <style>\\n    section {\\n      width: 200px;\\n      height: 200px;\\n      margin: 100px auto;\\n      perspective: 10000px;\\n    }\\n\\n    .box {\\n      width: 200px;\\n      height: 200px;\\n      perspective: 10000px;\\n      position: relative;\\n      /* 設置變化類型，保留容器内3D效果 */\\n      /* 該容器是舞台也是演員，容器攜帶裡面的p一起轉 */\\n      transform-style: preserve-3d;\\n      transition: all 10s ease 0s;\\n    }\\n\\n    section:hover .box {\\n      transform: rotateX(360deg) rotateY(360deg);\\n    }\\n\\n    .box p {\\n      position: absolute;\\n      top: 0;\\n      left: 0;\\n      width: 200px;\\n      height: 200px;\\n    }\\n\\n    .box p:nth-child(1) {\\n      background-color: rgba(219, 56, 211, 0.486);\\n      /* 前面 */\\n      transform: translateZ(100px);\\n    }\\n\\n    .box p:nth-child(2) {\\n      background-color: rgba(42, 128, 199, 0.486);\\n      /* 顶部面 */\\n      transform: rotateX(90deg) translateZ(100px);\\n    }\\n\\n    .box p:nth-child(3) {\\n      background-color: rgba(56, 219, 83, 0.486);\\n      /* 背面 */\\n      transform: rotateX(180deg) translateZ(100px);\\n    }\\n\\n    .box p:nth-child(4) {\\n      background-color: rgba(213, 216, 32, 0.486);\\n      /* 底部面 */\\n      transform: rotateX(-90deg) translateZ(100px);\\n    }\\n\\n    .box p:nth-child(5) {\\n      background-color: rgba(236, 82, 102, 0.486);\\n      /* 侧面 */\\n      transform: rotateY(90deg) translateZ(100px);\\n    }\\n\\n    .box p:nth-child(6) {\\n      background-color: rgba(119, 17, 236, 0.486);\\n      /* 侧面 */\\n      transform: rotateY(-90deg) translateZ(100px);\\n    }\\n  </style>\\n</head>\\n\\n<body>\\n  <section>\\n    <div class=\\\"box\\\">\\n      <p></p>\\n      <p></p>\\n      <p></p>\\n      <p></p>\\n      <p></p>\\n      <p></p>\\n    </div>\\n  </section>\\n</body>\\n```\\n\\n<hr id=\\\"user-content-animation\\\" style=\\\"height: 2px;\\\">\\n\\n#### <a href=\\\"#user-content-top\\\">動畫</a>\\n- 使用方式\\n  - ```animation: 動畫名稱 持續幾秒 緩衝效果 延遲幾秒 多少次(infinite: 無數次);```\\n- 可細分多個子屬性\\n  - ```animation-delay``` 定義元素讀取完畢到動畫開始的間隔時間。\\n  - ```animation-direction``` 定義是否動畫播放完畢後將會反向播放。\\n  - ```animation-duration``` 定義動畫完成一次週期的時間。\\n  - ```animation-iteration-count``` 定義動畫重複的次數。可用 infinite 來讓動畫永遠重複播放。\\n  - ```animation-name```  @keyframes 的名字。\\n  - ```animation-play-state``` 控制動畫的播放狀態。有 ```pause``` ```running``` 兩種值，後者為預設值。\\n  - ```animation-timing-function``` 定義動畫轉變時時間的加速曲線 (例如 linear)。\\n  - ```animation-fill-mode``` 定義元素在動畫播放外(動畫開始前及結束後)的狀態。\\n- 範例\\n```css\\n/* 無限次執行 */\\nanimation: r 1s linear 0s infinite;\\n/* alternate: 偶數次自動逆向執行 */\\nanimation: r 2s linear 0s infinite alternate;\\n/* forwards: 停止在最後結束狀態 */\\nanimation: r 1s linear 0s forwards;\\n\\n@keyframes r {\\n  from {\\n      transform: rotate(0);\\n  }\\n\\n  to {\\n      transform: rotate(360deg);\\n  }\\n}\\n\\n/* 可以利用百分比分階段來做動畫 */\\n@keyframes changeColor {\\n  0% {\\n    background-color: red;\\n  }\\n  20% {\\n    background-color: yellow;\\n  }\\n  40% {\\n    background-color: blue;\\n  }\\n  60% {\\n    background-color: green;\\n  }\\n  80% {\\n    background-color: purple;\\n  }\\n  100% {\\n    background-color: orange;\\n  }\\n}\\n```\\n\";","import { render } from \"./CSSNote.vue?vue&type=template&id=b64e45a4\"\nimport script from \"./CSSNote.vue?vue&type=script&lang=js\"\nexport * from \"./CSSNote.vue?vue&type=script&lang=js\"\n\nimport \"./CSSNote.vue?vue&type=style&index=0&id=b64e45a4&lang=scss\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}